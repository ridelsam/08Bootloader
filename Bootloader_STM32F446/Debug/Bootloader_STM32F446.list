
Bootloader_STM32F446.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037fc  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000534  080039c0  080039c0  000139c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ef4  08003ef4  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08003ef4  08003ef4  00013ef4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003efc  08003efc  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003efc  08003efc  00013efc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f00  08003f00  00013f00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08003f04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000198  20000014  08003f18  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ac  08003f18  000201ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a559  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001be9  00000000  00000000  0002a59d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000938  00000000  00000000  0002c188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000890  00000000  00000000  0002cac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021175  00000000  00000000  0002d350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000af3b  00000000  00000000  0004e4c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c820b  00000000  00000000  00059400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012160b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000024f0  00000000  00000000  0012165c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000014 	.word	0x20000014
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080039a8 	.word	0x080039a8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000018 	.word	0x20000018
 8000200:	080039a8 	.word	0x080039a8

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:

			HAL_FLASH_OB_Lock();
}

int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050c:	f001 f8ce 	bl	80016ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000510:	f000 f8d4 	bl	80006bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000514:	f000 f9c2 	bl	800089c <MX_GPIO_Init>
  MX_CRC_Init();
 8000518:	f000 f94c 	bl	80007b4 <MX_CRC_Init>
  MX_USART2_UART_Init();
 800051c:	f000 f962 	bl	80007e4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000520:	f000 f98e 	bl	8000840 <MX_USART3_UART_Init>
//flash_testing();

  /* Lets check whether button is pressed or not, if not pressed jump to user application */
  if ( HAL_GPIO_ReadPin(B1_GPIO_Port,B1_Pin) == GPIO_PIN_RESET )
 8000524:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000528:	4809      	ldr	r0, [pc, #36]	; (8000550 <main+0x48>)
 800052a:	f001 ff93 	bl	8002454 <HAL_GPIO_ReadPin>
 800052e:	4603      	mov	r3, r0
 8000530:	2b00      	cmp	r3, #0
 8000532:	d105      	bne.n	8000540 <main+0x38>
  {
	  printmsg("BL_DEBUG_MSG:Button is pressed .. going to BL mode\n\r");
 8000534:	4807      	ldr	r0, [pc, #28]	; (8000554 <main+0x4c>)
 8000536:	f000 f8b7 	bl	80006a8 <printmsg>

	  //we should continue in bootloader mode
	  bootloader_uart_read_data();
 800053a:	f000 f80f 	bl	800055c <bootloader_uart_read_data>
 800053e:	e004      	b.n	800054a <main+0x42>

  }
  else
  {
	  printmsg("BL_DEBUG_MSG:Button is not pressed .. executing user app\n");
 8000540:	4805      	ldr	r0, [pc, #20]	; (8000558 <main+0x50>)
 8000542:	f000 f8b1 	bl	80006a8 <printmsg>

		//jump to user application
		bootloader_jump_to_user_app();
 8000546:	f000 f883 	bl	8000650 <bootloader_jump_to_user_app>
 800054a:	2300      	movs	r3, #0

  }

}
 800054c:	4618      	mov	r0, r3
 800054e:	bd80      	pop	{r7, pc}
 8000550:	40020800 	.word	0x40020800
 8000554:	080039c0 	.word	0x080039c0
 8000558:	080039f8 	.word	0x080039f8

0800055c <bootloader_uart_read_data>:


void  bootloader_uart_read_data(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
    uint8_t rcv_len=0;
 8000562:	2300      	movs	r3, #0
 8000564:	71fb      	strb	r3, [r7, #7]

	while(1)
	{
		memset(bl_rx_buffer,0,200);
 8000566:	22c8      	movs	r2, #200	; 0xc8
 8000568:	2100      	movs	r1, #0
 800056a:	4835      	ldr	r0, [pc, #212]	; (8000640 <bootloader_uart_read_data+0xe4>)
 800056c:	f003 fa14 	bl	8003998 <memset>
		//here we will read and decode the commands coming from host
		//first read only one byte from the host , which is the "length" field of the command packet
    HAL_UART_Receive(C_UART,bl_rx_buffer,1,HAL_MAX_DELAY);
 8000570:	f04f 33ff 	mov.w	r3, #4294967295
 8000574:	2201      	movs	r2, #1
 8000576:	4932      	ldr	r1, [pc, #200]	; (8000640 <bootloader_uart_read_data+0xe4>)
 8000578:	4832      	ldr	r0, [pc, #200]	; (8000644 <bootloader_uart_read_data+0xe8>)
 800057a:	f002 fe64 	bl	8003246 <HAL_UART_Receive>
		rcv_len= bl_rx_buffer[0];
 800057e:	4b30      	ldr	r3, [pc, #192]	; (8000640 <bootloader_uart_read_data+0xe4>)
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	71fb      	strb	r3, [r7, #7]
		HAL_UART_Receive(C_UART,&bl_rx_buffer[1],rcv_len,HAL_MAX_DELAY);
 8000584:	79fb      	ldrb	r3, [r7, #7]
 8000586:	b29a      	uxth	r2, r3
 8000588:	f04f 33ff 	mov.w	r3, #4294967295
 800058c:	492e      	ldr	r1, [pc, #184]	; (8000648 <bootloader_uart_read_data+0xec>)
 800058e:	482d      	ldr	r0, [pc, #180]	; (8000644 <bootloader_uart_read_data+0xe8>)
 8000590:	f002 fe59 	bl	8003246 <HAL_UART_Receive>
		switch(bl_rx_buffer[1])
 8000594:	4b2a      	ldr	r3, [pc, #168]	; (8000640 <bootloader_uart_read_data+0xe4>)
 8000596:	785b      	ldrb	r3, [r3, #1]
 8000598:	3b51      	subs	r3, #81	; 0x51
 800059a:	2b0b      	cmp	r3, #11
 800059c:	d84a      	bhi.n	8000634 <bootloader_uart_read_data+0xd8>
 800059e:	a201      	add	r2, pc, #4	; (adr r2, 80005a4 <bootloader_uart_read_data+0x48>)
 80005a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005a4:	080005d5 	.word	0x080005d5
 80005a8:	080005dd 	.word	0x080005dd
 80005ac:	080005e5 	.word	0x080005e5
 80005b0:	080005ed 	.word	0x080005ed
 80005b4:	080005f5 	.word	0x080005f5
 80005b8:	080005fd 	.word	0x080005fd
 80005bc:	08000605 	.word	0x08000605
 80005c0:	0800060d 	.word	0x0800060d
 80005c4:	08000615 	.word	0x08000615
 80005c8:	0800061d 	.word	0x0800061d
 80005cc:	08000625 	.word	0x08000625
 80005d0:	0800062d 	.word	0x0800062d
		{
            case BL_GET_VER:
                bootloader_handle_getver_cmd(bl_rx_buffer);
 80005d4:	481a      	ldr	r0, [pc, #104]	; (8000640 <bootloader_uart_read_data+0xe4>)
 80005d6:	f000 f9cd 	bl	8000974 <bootloader_handle_getver_cmd>
                break;
 80005da:	e02f      	b.n	800063c <bootloader_uart_read_data+0xe0>
            case BL_GET_HELP:
                bootloader_handle_gethelp_cmd(bl_rx_buffer);
 80005dc:	4818      	ldr	r0, [pc, #96]	; (8000640 <bootloader_uart_read_data+0xe4>)
 80005de:	f000 fa11 	bl	8000a04 <bootloader_handle_gethelp_cmd>
                break;
 80005e2:	e02b      	b.n	800063c <bootloader_uart_read_data+0xe0>
            case BL_GET_CID:
                bootloader_handle_getcid_cmd(bl_rx_buffer);
 80005e4:	4816      	ldr	r0, [pc, #88]	; (8000640 <bootloader_uart_read_data+0xe4>)
 80005e6:	f000 fa49 	bl	8000a7c <bootloader_handle_getcid_cmd>
                break;
 80005ea:	e027      	b.n	800063c <bootloader_uart_read_data+0xe0>
            case BL_GET_RDP_STATUS:
                bootloader_handle_getrdp_cmd(bl_rx_buffer);
 80005ec:	4814      	ldr	r0, [pc, #80]	; (8000640 <bootloader_uart_read_data+0xe4>)
 80005ee:	f000 fa91 	bl	8000b14 <bootloader_handle_getrdp_cmd>
                break;
 80005f2:	e023      	b.n	800063c <bootloader_uart_read_data+0xe0>
            case BL_GO_TO_ADDR:
                bootloader_handle_go_cmd(bl_rx_buffer);
 80005f4:	4812      	ldr	r0, [pc, #72]	; (8000640 <bootloader_uart_read_data+0xe4>)
 80005f6:	f000 fad9 	bl	8000bac <bootloader_handle_go_cmd>
                break;
 80005fa:	e01f      	b.n	800063c <bootloader_uart_read_data+0xe0>
            case BL_FLASH_ERASE:
                bootloader_handle_flash_erase_cmd(bl_rx_buffer);
 80005fc:	4810      	ldr	r0, [pc, #64]	; (8000640 <bootloader_uart_read_data+0xe4>)
 80005fe:	f000 fb3f 	bl	8000c80 <bootloader_handle_flash_erase_cmd>
                break;
 8000602:	e01b      	b.n	800063c <bootloader_uart_read_data+0xe0>
            case BL_MEM_WRITE:
                bootloader_handle_mem_write_cmd(bl_rx_buffer);
 8000604:	480e      	ldr	r0, [pc, #56]	; (8000640 <bootloader_uart_read_data+0xe4>)
 8000606:	f000 fba5 	bl	8000d54 <bootloader_handle_mem_write_cmd>
                break;
 800060a:	e017      	b.n	800063c <bootloader_uart_read_data+0xe0>
            case BL_EN_RW_PROTECT:
                bootloader_handle_en_rw_protect(bl_rx_buffer);
 800060c:	480c      	ldr	r0, [pc, #48]	; (8000640 <bootloader_uart_read_data+0xe4>)
 800060e:	f000 fc29 	bl	8000e64 <bootloader_handle_en_rw_protect>
                break;
 8000612:	e013      	b.n	800063c <bootloader_uart_read_data+0xe0>
            case BL_MEM_READ:
                bootloader_handle_mem_read(bl_rx_buffer);
 8000614:	480a      	ldr	r0, [pc, #40]	; (8000640 <bootloader_uart_read_data+0xe4>)
 8000616:	f000 fcc3 	bl	8000fa0 <bootloader_handle_mem_read>
                break;
 800061a:	e00f      	b.n	800063c <bootloader_uart_read_data+0xe0>
            case BL_READ_SECTOR_P_STATUS:
                bootloader_handle_read_sector_protection_status(bl_rx_buffer);
 800061c:	4808      	ldr	r0, [pc, #32]	; (8000640 <bootloader_uart_read_data+0xe4>)
 800061e:	f000 fcc9 	bl	8000fb4 <bootloader_handle_read_sector_protection_status>
                break;
 8000622:	e00b      	b.n	800063c <bootloader_uart_read_data+0xe0>
            case BL_OTP_READ:
                bootloader_handle_read_otp(bl_rx_buffer);
 8000624:	4806      	ldr	r0, [pc, #24]	; (8000640 <bootloader_uart_read_data+0xe4>)
 8000626:	f000 fd0d 	bl	8001044 <bootloader_handle_read_otp>
                break;
 800062a:	e007      	b.n	800063c <bootloader_uart_read_data+0xe0>
						case BL_DIS_R_W_PROTECT:
                bootloader_handle_dis_rw_protect(bl_rx_buffer);
 800062c:	4804      	ldr	r0, [pc, #16]	; (8000640 <bootloader_uart_read_data+0xe4>)
 800062e:	f000 fc6b 	bl	8000f08 <bootloader_handle_dis_rw_protect>
                break;
 8000632:	e003      	b.n	800063c <bootloader_uart_read_data+0xe0>
             default:
                printmsg("BL_DEBUG_MSG:Invalid command code received from host \n");
 8000634:	4805      	ldr	r0, [pc, #20]	; (800064c <bootloader_uart_read_data+0xf0>)
 8000636:	f000 f837 	bl	80006a8 <printmsg>
                break;
 800063a:	bf00      	nop
		memset(bl_rx_buffer,0,200);
 800063c:	e793      	b.n	8000566 <bootloader_uart_read_data+0xa>
 800063e:	bf00      	nop
 8000640:	200000c0 	.word	0x200000c0
 8000644:	20000038 	.word	0x20000038
 8000648:	200000c1 	.word	0x200000c1
 800064c:	08003a34 	.word	0x08003a34

08000650 <bootloader_jump_to_user_app>:
/*code to jump to user application
 *Here we are assuming FLASH_SECTOR2_BASE_ADDRESS
 *is where the user application is stored
 */
void bootloader_jump_to_user_app(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b084      	sub	sp, #16
 8000654:	af00      	add	r7, sp, #0

   //just a function pointer to hold the address of the reset handler of the user app.
    void (*app_reset_handler)(void);

    printmsg("BL_DEBUG_MSG:bootloader_jump_to_user_app\n");
 8000656:	480f      	ldr	r0, [pc, #60]	; (8000694 <bootloader_jump_to_user_app+0x44>)
 8000658:	f000 f826 	bl	80006a8 <printmsg>


    // 1. configure the MSP by reading the value from the base address of the sector 2
    uint32_t msp_value = *(volatile uint32_t *)FLASH_SECTOR2_BASE_ADDRESS;
 800065c:	4b0e      	ldr	r3, [pc, #56]	; (8000698 <bootloader_jump_to_user_app+0x48>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	60fb      	str	r3, [r7, #12]
    printmsg("BL_DEBUG_MSG:MSP value : %#x\n",msp_value);
 8000662:	68f9      	ldr	r1, [r7, #12]
 8000664:	480d      	ldr	r0, [pc, #52]	; (800069c <bootloader_jump_to_user_app+0x4c>)
 8000666:	f000 f81f 	bl	80006a8 <printmsg>
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800066e:	683b      	ldr	r3, [r7, #0]
 8000670:	f383 8808 	msr	MSP, r3
}
 8000674:	bf00      	nop
    //SCB->VTOR = FLASH_SECTOR1_BASE_ADDRESS;

    /* 2. Now fetch the reset handler address of the user application
     * from the location FLASH_SECTOR2_BASE_ADDRESS+4
     */
    uint32_t resethandler_address = *(volatile uint32_t *) (FLASH_SECTOR2_BASE_ADDRESS + 4);
 8000676:	4b0a      	ldr	r3, [pc, #40]	; (80006a0 <bootloader_jump_to_user_app+0x50>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	60bb      	str	r3, [r7, #8]

    app_reset_handler = (void*) resethandler_address;
 800067c:	68bb      	ldr	r3, [r7, #8]
 800067e:	607b      	str	r3, [r7, #4]

    printmsg("BL_DEBUG_MSG: app reset handler addr : %#x\n",app_reset_handler);
 8000680:	6879      	ldr	r1, [r7, #4]
 8000682:	4808      	ldr	r0, [pc, #32]	; (80006a4 <bootloader_jump_to_user_app+0x54>)
 8000684:	f000 f810 	bl	80006a8 <printmsg>

    //3. jump to reset handler of the user application
    app_reset_handler();
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	4798      	blx	r3

}
 800068c:	bf00      	nop
 800068e:	3710      	adds	r7, #16
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	08003a6c 	.word	0x08003a6c
 8000698:	08008000 	.word	0x08008000
 800069c:	08003a98 	.word	0x08003a98
 80006a0:	08008004 	.word	0x08008004
 80006a4:	08003ab8 	.word	0x08003ab8

080006a8 <printmsg>:
/* prints formatted string to console over UART */
 void printmsg(char *format,...)
 {
 80006a8:	b40f      	push	{r0, r1, r2, r3}
 80006aa:	b480      	push	{r7}
 80006ac:	af00      	add	r7, sp, #0
	va_start(args, format);
	vsprintf(str, format,args);
	HAL_UART_Transmit(D_UART,(uint8_t *)str, strlen(str),HAL_MAX_DELAY);
	va_end(args);
#endif
 }
 80006ae:	bf00      	nop
 80006b0:	46bd      	mov	sp, r7
 80006b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b6:	b004      	add	sp, #16
 80006b8:	4770      	bx	lr
	...

080006bc <SystemClock_Config>:

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b094      	sub	sp, #80	; 0x50
 80006c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c2:	2300      	movs	r3, #0
 80006c4:	607b      	str	r3, [r7, #4]
 80006c6:	4b37      	ldr	r3, [pc, #220]	; (80007a4 <SystemClock_Config+0xe8>)
 80006c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ca:	4a36      	ldr	r2, [pc, #216]	; (80007a4 <SystemClock_Config+0xe8>)
 80006cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006d0:	6413      	str	r3, [r2, #64]	; 0x40
 80006d2:	4b34      	ldr	r3, [pc, #208]	; (80007a4 <SystemClock_Config+0xe8>)
 80006d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	687b      	ldr	r3, [r7, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006de:	2300      	movs	r3, #0
 80006e0:	603b      	str	r3, [r7, #0]
 80006e2:	4b31      	ldr	r3, [pc, #196]	; (80007a8 <SystemClock_Config+0xec>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006ea:	4a2f      	ldr	r2, [pc, #188]	; (80007a8 <SystemClock_Config+0xec>)
 80006ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006f0:	6013      	str	r3, [r2, #0]
 80006f2:	4b2d      	ldr	r3, [pc, #180]	; (80007a8 <SystemClock_Config+0xec>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006fa:	603b      	str	r3, [r7, #0]
 80006fc:	683b      	ldr	r3, [r7, #0]

    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006fe:	2302      	movs	r3, #2
 8000700:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000702:	2301      	movs	r3, #1
 8000704:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8000706:	2310      	movs	r3, #16
 8000708:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800070a:	2302      	movs	r3, #2
 800070c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800070e:	2300      	movs	r3, #0
 8000710:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000712:	2310      	movs	r3, #16
 8000714:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000716:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800071a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800071c:	2304      	movs	r3, #4
 800071e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000720:	2302      	movs	r3, #2
 8000722:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000724:	2302      	movs	r3, #2
 8000726:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000728:	f107 031c 	add.w	r3, r7, #28
 800072c:	4618      	mov	r0, r3
 800072e:	f002 fa0d 	bl	8002b4c <HAL_RCC_OscConfig>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d004      	beq.n	8000742 <SystemClock_Config+0x86>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000738:	f44f 71a3 	mov.w	r1, #326	; 0x146
 800073c:	481b      	ldr	r0, [pc, #108]	; (80007ac <SystemClock_Config+0xf0>)
 800073e:	f000 f913 	bl	8000968 <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000742:	230f      	movs	r3, #15
 8000744:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000746:	2302      	movs	r3, #2
 8000748:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800074a:	2300      	movs	r3, #0
 800074c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800074e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000752:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000754:	2300      	movs	r3, #0
 8000756:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000758:	f107 0308 	add.w	r3, r7, #8
 800075c:	2102      	movs	r1, #2
 800075e:	4618      	mov	r0, r3
 8000760:	f001 feaa 	bl	80024b8 <HAL_RCC_ClockConfig>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d004      	beq.n	8000774 <SystemClock_Config+0xb8>
  {
    _Error_Handler(__FILE__, __LINE__);
 800076a:	f44f 71aa 	mov.w	r1, #340	; 0x154
 800076e:	480f      	ldr	r0, [pc, #60]	; (80007ac <SystemClock_Config+0xf0>)
 8000770:	f000 f8fa 	bl	8000968 <_Error_Handler>
  }

    /**Configure the Systick interrupt time
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000774:	f001 ff86 	bl	8002684 <HAL_RCC_GetHCLKFreq>
 8000778:	4603      	mov	r3, r0
 800077a:	4a0d      	ldr	r2, [pc, #52]	; (80007b0 <SystemClock_Config+0xf4>)
 800077c:	fba2 2303 	umull	r2, r3, r2, r3
 8000780:	099b      	lsrs	r3, r3, #6
 8000782:	4618      	mov	r0, r3
 8000784:	f001 f8dd 	bl	8001942 <HAL_SYSTICK_Config>

    /**Configure the Systick
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000788:	2004      	movs	r0, #4
 800078a:	f001 f8e7 	bl	800195c <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800078e:	2200      	movs	r2, #0
 8000790:	2100      	movs	r1, #0
 8000792:	f04f 30ff 	mov.w	r0, #4294967295
 8000796:	f001 f8b8 	bl	800190a <HAL_NVIC_SetPriority>
}
 800079a:	bf00      	nop
 800079c:	3750      	adds	r7, #80	; 0x50
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	40023800 	.word	0x40023800
 80007a8:	40007000 	.word	0x40007000
 80007ac:	08003ae4 	.word	0x08003ae4
 80007b0:	10624dd3 	.word	0x10624dd3

080007b4 <MX_CRC_Init>:

/* CRC init function */
static void MX_CRC_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 80007b8:	4b07      	ldr	r3, [pc, #28]	; (80007d8 <MX_CRC_Init+0x24>)
 80007ba:	4a08      	ldr	r2, [pc, #32]	; (80007dc <MX_CRC_Init+0x28>)
 80007bc:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80007be:	4806      	ldr	r0, [pc, #24]	; (80007d8 <MX_CRC_Init+0x24>)
 80007c0:	f001 f8e8 	bl	8001994 <HAL_CRC_Init>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d004      	beq.n	80007d4 <MX_CRC_Init+0x20>
  {
    _Error_Handler(__FILE__, __LINE__);
 80007ca:	f44f 71b5 	mov.w	r1, #362	; 0x16a
 80007ce:	4804      	ldr	r0, [pc, #16]	; (80007e0 <MX_CRC_Init+0x2c>)
 80007d0:	f000 f8ca 	bl	8000968 <_Error_Handler>
  }

}
 80007d4:	bf00      	nop
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	20000030 	.word	0x20000030
 80007dc:	40023000 	.word	0x40023000
 80007e0:	08003ae4 	.word	0x08003ae4

080007e4 <MX_USART2_UART_Init>:

/* USART2 init function */
static void MX_USART2_UART_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80007e8:	4b12      	ldr	r3, [pc, #72]	; (8000834 <MX_USART2_UART_Init+0x50>)
 80007ea:	4a13      	ldr	r2, [pc, #76]	; (8000838 <MX_USART2_UART_Init+0x54>)
 80007ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007ee:	4b11      	ldr	r3, [pc, #68]	; (8000834 <MX_USART2_UART_Init+0x50>)
 80007f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007f6:	4b0f      	ldr	r3, [pc, #60]	; (8000834 <MX_USART2_UART_Init+0x50>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007fc:	4b0d      	ldr	r3, [pc, #52]	; (8000834 <MX_USART2_UART_Init+0x50>)
 80007fe:	2200      	movs	r2, #0
 8000800:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000802:	4b0c      	ldr	r3, [pc, #48]	; (8000834 <MX_USART2_UART_Init+0x50>)
 8000804:	2200      	movs	r2, #0
 8000806:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000808:	4b0a      	ldr	r3, [pc, #40]	; (8000834 <MX_USART2_UART_Init+0x50>)
 800080a:	220c      	movs	r2, #12
 800080c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800080e:	4b09      	ldr	r3, [pc, #36]	; (8000834 <MX_USART2_UART_Init+0x50>)
 8000810:	2200      	movs	r2, #0
 8000812:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000814:	4b07      	ldr	r3, [pc, #28]	; (8000834 <MX_USART2_UART_Init+0x50>)
 8000816:	2200      	movs	r2, #0
 8000818:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800081a:	4806      	ldr	r0, [pc, #24]	; (8000834 <MX_USART2_UART_Init+0x50>)
 800081c:	f002 fc34 	bl	8003088 <HAL_UART_Init>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d004      	beq.n	8000830 <MX_USART2_UART_Init+0x4c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000826:	f240 117d 	movw	r1, #381	; 0x17d
 800082a:	4804      	ldr	r0, [pc, #16]	; (800083c <MX_USART2_UART_Init+0x58>)
 800082c:	f000 f89c 	bl	8000968 <_Error_Handler>
  }

}
 8000830:	bf00      	nop
 8000832:	bd80      	pop	{r7, pc}
 8000834:	20000038 	.word	0x20000038
 8000838:	40004400 	.word	0x40004400
 800083c:	08003ae4 	.word	0x08003ae4

08000840 <MX_USART3_UART_Init>:

/* USART3 init function */
static void MX_USART3_UART_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8000844:	4b12      	ldr	r3, [pc, #72]	; (8000890 <MX_USART3_UART_Init+0x50>)
 8000846:	4a13      	ldr	r2, [pc, #76]	; (8000894 <MX_USART3_UART_Init+0x54>)
 8000848:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800084a:	4b11      	ldr	r3, [pc, #68]	; (8000890 <MX_USART3_UART_Init+0x50>)
 800084c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000850:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000852:	4b0f      	ldr	r3, [pc, #60]	; (8000890 <MX_USART3_UART_Init+0x50>)
 8000854:	2200      	movs	r2, #0
 8000856:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000858:	4b0d      	ldr	r3, [pc, #52]	; (8000890 <MX_USART3_UART_Init+0x50>)
 800085a:	2200      	movs	r2, #0
 800085c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800085e:	4b0c      	ldr	r3, [pc, #48]	; (8000890 <MX_USART3_UART_Init+0x50>)
 8000860:	2200      	movs	r2, #0
 8000862:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000864:	4b0a      	ldr	r3, [pc, #40]	; (8000890 <MX_USART3_UART_Init+0x50>)
 8000866:	220c      	movs	r2, #12
 8000868:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800086a:	4b09      	ldr	r3, [pc, #36]	; (8000890 <MX_USART3_UART_Init+0x50>)
 800086c:	2200      	movs	r2, #0
 800086e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000870:	4b07      	ldr	r3, [pc, #28]	; (8000890 <MX_USART3_UART_Init+0x50>)
 8000872:	2200      	movs	r2, #0
 8000874:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000876:	4806      	ldr	r0, [pc, #24]	; (8000890 <MX_USART3_UART_Init+0x50>)
 8000878:	f002 fc06 	bl	8003088 <HAL_UART_Init>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d004      	beq.n	800088c <MX_USART3_UART_Init+0x4c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000882:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000886:	4804      	ldr	r0, [pc, #16]	; (8000898 <MX_USART3_UART_Init+0x58>)
 8000888:	f000 f86e 	bl	8000968 <_Error_Handler>
  }

}
 800088c:	bf00      	nop
 800088e:	bd80      	pop	{r7, pc}
 8000890:	2000007c 	.word	0x2000007c
 8000894:	40004800 	.word	0x40004800
 8000898:	08003ae4 	.word	0x08003ae4

0800089c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b08a      	sub	sp, #40	; 0x28
 80008a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	613b      	str	r3, [r7, #16]
 80008a6:	4b2d      	ldr	r3, [pc, #180]	; (800095c <MX_GPIO_Init+0xc0>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	4a2c      	ldr	r2, [pc, #176]	; (800095c <MX_GPIO_Init+0xc0>)
 80008ac:	f043 0304 	orr.w	r3, r3, #4
 80008b0:	6313      	str	r3, [r2, #48]	; 0x30
 80008b2:	4b2a      	ldr	r3, [pc, #168]	; (800095c <MX_GPIO_Init+0xc0>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	f003 0304 	and.w	r3, r3, #4
 80008ba:	613b      	str	r3, [r7, #16]
 80008bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	60fb      	str	r3, [r7, #12]
 80008c2:	4b26      	ldr	r3, [pc, #152]	; (800095c <MX_GPIO_Init+0xc0>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	4a25      	ldr	r2, [pc, #148]	; (800095c <MX_GPIO_Init+0xc0>)
 80008c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008cc:	6313      	str	r3, [r2, #48]	; 0x30
 80008ce:	4b23      	ldr	r3, [pc, #140]	; (800095c <MX_GPIO_Init+0xc0>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008d6:	60fb      	str	r3, [r7, #12]
 80008d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	60bb      	str	r3, [r7, #8]
 80008de:	4b1f      	ldr	r3, [pc, #124]	; (800095c <MX_GPIO_Init+0xc0>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	4a1e      	ldr	r2, [pc, #120]	; (800095c <MX_GPIO_Init+0xc0>)
 80008e4:	f043 0301 	orr.w	r3, r3, #1
 80008e8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ea:	4b1c      	ldr	r3, [pc, #112]	; (800095c <MX_GPIO_Init+0xc0>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	f003 0301 	and.w	r3, r3, #1
 80008f2:	60bb      	str	r3, [r7, #8]
 80008f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	607b      	str	r3, [r7, #4]
 80008fa:	4b18      	ldr	r3, [pc, #96]	; (800095c <MX_GPIO_Init+0xc0>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	4a17      	ldr	r2, [pc, #92]	; (800095c <MX_GPIO_Init+0xc0>)
 8000900:	f043 0302 	orr.w	r3, r3, #2
 8000904:	6313      	str	r3, [r2, #48]	; 0x30
 8000906:	4b15      	ldr	r3, [pc, #84]	; (800095c <MX_GPIO_Init+0xc0>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	f003 0302 	and.w	r3, r3, #2
 800090e:	607b      	str	r3, [r7, #4]
 8000910:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000912:	2200      	movs	r2, #0
 8000914:	2120      	movs	r1, #32
 8000916:	4812      	ldr	r0, [pc, #72]	; (8000960 <MX_GPIO_Init+0xc4>)
 8000918:	f001 fdb4 	bl	8002484 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800091c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000920:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000922:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000926:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800092c:	f107 0314 	add.w	r3, r7, #20
 8000930:	4619      	mov	r1, r3
 8000932:	480c      	ldr	r0, [pc, #48]	; (8000964 <MX_GPIO_Init+0xc8>)
 8000934:	f001 fbfa 	bl	800212c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000938:	2320      	movs	r3, #32
 800093a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093c:	2301      	movs	r3, #1
 800093e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000944:	2300      	movs	r3, #0
 8000946:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000948:	f107 0314 	add.w	r3, r7, #20
 800094c:	4619      	mov	r1, r3
 800094e:	4804      	ldr	r0, [pc, #16]	; (8000960 <MX_GPIO_Init+0xc4>)
 8000950:	f001 fbec 	bl	800212c <HAL_GPIO_Init>

}
 8000954:	bf00      	nop
 8000956:	3728      	adds	r7, #40	; 0x28
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	40023800 	.word	0x40023800
 8000960:	40020000 	.word	0x40020000
 8000964:	40020800 	.word	0x40020800

08000968 <_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 8000968:	b480      	push	{r7}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
 8000970:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 8000972:	e7fe      	b.n	8000972 <_Error_Handler+0xa>

08000974 <bootloader_handle_getver_cmd>:

/**************Implementation of Boot-loader Command Handle functions *********/

/*Helper function to handle BL_GET_VER command */
void bootloader_handle_getver_cmd(uint8_t *bl_rx_buffer)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b086      	sub	sp, #24
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
    uint8_t bl_version;

    // 1) verify the checksum
      printmsg("BL_DEBUG_MSG:bootloader_handle_getver_cmd\n");
 800097c:	481d      	ldr	r0, [pc, #116]	; (80009f4 <bootloader_handle_getver_cmd+0x80>)
 800097e:	f7ff fe93 	bl	80006a8 <printmsg>

	 //Total length of the command packet
	  uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	3301      	adds	r3, #1
 8000988:	617b      	str	r3, [r7, #20]

	  //extract the CRC32 sent by the Host
	  uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 800098a:	697b      	ldr	r3, [r7, #20]
 800098c:	3b04      	subs	r3, #4
 800098e:	687a      	ldr	r2, [r7, #4]
 8000990:	4413      	add	r3, r2
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	613b      	str	r3, [r7, #16]

    if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8000996:	697b      	ldr	r3, [r7, #20]
 8000998:	3b04      	subs	r3, #4
 800099a:	693a      	ldr	r2, [r7, #16]
 800099c:	4619      	mov	r1, r3
 800099e:	6878      	ldr	r0, [r7, #4]
 80009a0:	f000 fb86 	bl	80010b0 <bootloader_verify_crc>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d11a      	bne.n	80009e0 <bootloader_handle_getver_cmd+0x6c>
    {
        printmsg("BL_DEBUG_MSG:checksum success !!\n");
 80009aa:	4813      	ldr	r0, [pc, #76]	; (80009f8 <bootloader_handle_getver_cmd+0x84>)
 80009ac:	f7ff fe7c 	bl	80006a8 <printmsg>
        // checksum is correct..
        bootloader_send_ack(bl_rx_buffer[0],1);
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	2101      	movs	r1, #1
 80009b6:	4618      	mov	r0, r3
 80009b8:	f000 fb4e 	bl	8001058 <bootloader_send_ack>
        bl_version=get_bootloader_version();
 80009bc:	f000 fbc0 	bl	8001140 <get_bootloader_version>
 80009c0:	4603      	mov	r3, r0
 80009c2:	73fb      	strb	r3, [r7, #15]
        printmsg("BL_DEBUG_MSG:BL_VER : %d %#x\n",bl_version,bl_version);
 80009c4:	7bfb      	ldrb	r3, [r7, #15]
 80009c6:	4619      	mov	r1, r3
 80009c8:	7bfb      	ldrb	r3, [r7, #15]
 80009ca:	461a      	mov	r2, r3
 80009cc:	480b      	ldr	r0, [pc, #44]	; (80009fc <bootloader_handle_getver_cmd+0x88>)
 80009ce:	f7ff fe6b 	bl	80006a8 <printmsg>
        bootloader_uart_write_data(&bl_version,1);
 80009d2:	f107 030f 	add.w	r3, r7, #15
 80009d6:	2101      	movs	r1, #1
 80009d8:	4618      	mov	r0, r3
 80009da:	f000 fb9d 	bl	8001118 <bootloader_uart_write_data>
        //checksum is wrong send nack
        bootloader_send_nack();
    }


}
 80009de:	e004      	b.n	80009ea <bootloader_handle_getver_cmd+0x76>
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
 80009e0:	4807      	ldr	r0, [pc, #28]	; (8000a00 <bootloader_handle_getver_cmd+0x8c>)
 80009e2:	f7ff fe61 	bl	80006a8 <printmsg>
        bootloader_send_nack();
 80009e6:	f000 fb51 	bl	800108c <bootloader_send_nack>
}
 80009ea:	bf00      	nop
 80009ec:	3718      	adds	r7, #24
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	08003af8 	.word	0x08003af8
 80009f8:	08003b24 	.word	0x08003b24
 80009fc:	08003b48 	.word	0x08003b48
 8000a00:	08003b68 	.word	0x08003b68

08000a04 <bootloader_handle_gethelp_cmd>:

/*Helper function to handle BL_GET_HELP command
 * Bootloader sends out All supported Command codes
 */
void bootloader_handle_gethelp_cmd(uint8_t *pBuffer)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b084      	sub	sp, #16
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
    printmsg("BL_DEBUG_MSG:bootloader_handle_gethelp_cmd\n");
 8000a0c:	4816      	ldr	r0, [pc, #88]	; (8000a68 <bootloader_handle_gethelp_cmd+0x64>)
 8000a0e:	f7ff fe4b 	bl	80006a8 <printmsg>

	//Total length of the command packet
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8000a12:	4b16      	ldr	r3, [pc, #88]	; (8000a6c <bootloader_handle_gethelp_cmd+0x68>)
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	3301      	adds	r3, #1
 8000a18:	60fb      	str	r3, [r7, #12]

	//extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	3b04      	subs	r3, #4
 8000a1e:	4a13      	ldr	r2, [pc, #76]	; (8000a6c <bootloader_handle_gethelp_cmd+0x68>)
 8000a20:	4413      	add	r3, r2
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	60bb      	str	r3, [r7, #8]

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	3b04      	subs	r3, #4
 8000a2a:	68ba      	ldr	r2, [r7, #8]
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	480f      	ldr	r0, [pc, #60]	; (8000a6c <bootloader_handle_gethelp_cmd+0x68>)
 8000a30:	f000 fb3e 	bl	80010b0 <bootloader_verify_crc>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d10d      	bne.n	8000a56 <bootloader_handle_gethelp_cmd+0x52>
	{
        printmsg("BL_DEBUG_MSG:checksum success !!\n");
 8000a3a:	480d      	ldr	r0, [pc, #52]	; (8000a70 <bootloader_handle_gethelp_cmd+0x6c>)
 8000a3c:	f7ff fe34 	bl	80006a8 <printmsg>
        bootloader_send_ack(pBuffer[0],sizeof(supported_commands));
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	2108      	movs	r1, #8
 8000a46:	4618      	mov	r0, r3
 8000a48:	f000 fb06 	bl	8001058 <bootloader_send_ack>
        bootloader_uart_write_data(supported_commands,sizeof(supported_commands) );
 8000a4c:	2108      	movs	r1, #8
 8000a4e:	4809      	ldr	r0, [pc, #36]	; (8000a74 <bootloader_handle_gethelp_cmd+0x70>)
 8000a50:	f000 fb62 	bl	8001118 <bootloader_uart_write_data>
	{
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
        bootloader_send_nack();
	}

}
 8000a54:	e004      	b.n	8000a60 <bootloader_handle_gethelp_cmd+0x5c>
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
 8000a56:	4808      	ldr	r0, [pc, #32]	; (8000a78 <bootloader_handle_gethelp_cmd+0x74>)
 8000a58:	f7ff fe26 	bl	80006a8 <printmsg>
        bootloader_send_nack();
 8000a5c:	f000 fb16 	bl	800108c <bootloader_send_nack>
}
 8000a60:	bf00      	nop
 8000a62:	3710      	adds	r7, #16
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	08003b88 	.word	0x08003b88
 8000a6c:	200000c0 	.word	0x200000c0
 8000a70:	08003b24 	.word	0x08003b24
 8000a74:	20000000 	.word	0x20000000
 8000a78:	08003b68 	.word	0x08003b68

08000a7c <bootloader_handle_getcid_cmd>:

/*Helper function to handle BL_GET_CID command */
void bootloader_handle_getcid_cmd(uint8_t *pBuffer)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b086      	sub	sp, #24
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
	uint16_t bl_cid_num = 0;
 8000a84:	2300      	movs	r3, #0
 8000a86:	81fb      	strh	r3, [r7, #14]
	printmsg("BL_DEBUG_MSG:bootloader_handle_getcid_cmd\n");
 8000a88:	481d      	ldr	r0, [pc, #116]	; (8000b00 <bootloader_handle_getcid_cmd+0x84>)
 8000a8a:	f7ff fe0d 	bl	80006a8 <printmsg>

    //Total length of the command packet
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8000a8e:	4b1d      	ldr	r3, [pc, #116]	; (8000b04 <bootloader_handle_getcid_cmd+0x88>)
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	3301      	adds	r3, #1
 8000a94:	617b      	str	r3, [r7, #20]

	//extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8000a96:	697b      	ldr	r3, [r7, #20]
 8000a98:	3b04      	subs	r3, #4
 8000a9a:	4a1a      	ldr	r2, [pc, #104]	; (8000b04 <bootloader_handle_getcid_cmd+0x88>)
 8000a9c:	4413      	add	r3, r2
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	613b      	str	r3, [r7, #16]

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8000aa2:	697b      	ldr	r3, [r7, #20]
 8000aa4:	3b04      	subs	r3, #4
 8000aa6:	693a      	ldr	r2, [r7, #16]
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4816      	ldr	r0, [pc, #88]	; (8000b04 <bootloader_handle_getcid_cmd+0x88>)
 8000aac:	f000 fb00 	bl	80010b0 <bootloader_verify_crc>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d11a      	bne.n	8000aec <bootloader_handle_getcid_cmd+0x70>
	{
        printmsg("BL_DEBUG_MSG:checksum success !!\n");
 8000ab6:	4814      	ldr	r0, [pc, #80]	; (8000b08 <bootloader_handle_getcid_cmd+0x8c>)
 8000ab8:	f7ff fdf6 	bl	80006a8 <printmsg>
        bootloader_send_ack(pBuffer[0],2);
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	2102      	movs	r1, #2
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f000 fac8 	bl	8001058 <bootloader_send_ack>
        bl_cid_num = get_mcu_chip_id();
 8000ac8:	f000 fb42 	bl	8001150 <get_mcu_chip_id>
 8000acc:	4603      	mov	r3, r0
 8000ace:	81fb      	strh	r3, [r7, #14]
        printmsg("BL_DEBUG_MSG:MCU id : %d %#x !!\n",bl_cid_num, bl_cid_num);
 8000ad0:	89fb      	ldrh	r3, [r7, #14]
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	89fb      	ldrh	r3, [r7, #14]
 8000ad6:	461a      	mov	r2, r3
 8000ad8:	480c      	ldr	r0, [pc, #48]	; (8000b0c <bootloader_handle_getcid_cmd+0x90>)
 8000ada:	f7ff fde5 	bl	80006a8 <printmsg>
        bootloader_uart_write_data((uint8_t *)&bl_cid_num,2);
 8000ade:	f107 030e 	add.w	r3, r7, #14
 8000ae2:	2102      	movs	r1, #2
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f000 fb17 	bl	8001118 <bootloader_uart_write_data>
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
        bootloader_send_nack();
	}


}
 8000aea:	e004      	b.n	8000af6 <bootloader_handle_getcid_cmd+0x7a>
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
 8000aec:	4808      	ldr	r0, [pc, #32]	; (8000b10 <bootloader_handle_getcid_cmd+0x94>)
 8000aee:	f7ff fddb 	bl	80006a8 <printmsg>
        bootloader_send_nack();
 8000af2:	f000 facb 	bl	800108c <bootloader_send_nack>
}
 8000af6:	bf00      	nop
 8000af8:	3718      	adds	r7, #24
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	08003bb4 	.word	0x08003bb4
 8000b04:	200000c0 	.word	0x200000c0
 8000b08:	08003b24 	.word	0x08003b24
 8000b0c:	08003be0 	.word	0x08003be0
 8000b10:	08003b68 	.word	0x08003b68

08000b14 <bootloader_handle_getrdp_cmd>:

/*Helper function to handle BL_GET_RDP_STATUS command */
void bootloader_handle_getrdp_cmd(uint8_t *pBuffer)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b086      	sub	sp, #24
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
    uint8_t rdp_level = 0x00;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	73fb      	strb	r3, [r7, #15]
    printmsg("BL_DEBUG_MSG:bootloader_handle_getrdp_cmd\n");
 8000b20:	481d      	ldr	r0, [pc, #116]	; (8000b98 <bootloader_handle_getrdp_cmd+0x84>)
 8000b22:	f7ff fdc1 	bl	80006a8 <printmsg>

    //Total length of the command packet
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8000b26:	4b1d      	ldr	r3, [pc, #116]	; (8000b9c <bootloader_handle_getrdp_cmd+0x88>)
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	3301      	adds	r3, #1
 8000b2c:	617b      	str	r3, [r7, #20]

	//extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8000b2e:	697b      	ldr	r3, [r7, #20]
 8000b30:	3b04      	subs	r3, #4
 8000b32:	4a1a      	ldr	r2, [pc, #104]	; (8000b9c <bootloader_handle_getrdp_cmd+0x88>)
 8000b34:	4413      	add	r3, r2
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	613b      	str	r3, [r7, #16]

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	3b04      	subs	r3, #4
 8000b3e:	693a      	ldr	r2, [r7, #16]
 8000b40:	4619      	mov	r1, r3
 8000b42:	4816      	ldr	r0, [pc, #88]	; (8000b9c <bootloader_handle_getrdp_cmd+0x88>)
 8000b44:	f000 fab4 	bl	80010b0 <bootloader_verify_crc>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d11a      	bne.n	8000b84 <bootloader_handle_getrdp_cmd+0x70>
	{
        printmsg("BL_DEBUG_MSG:checksum success !!\n");
 8000b4e:	4814      	ldr	r0, [pc, #80]	; (8000ba0 <bootloader_handle_getrdp_cmd+0x8c>)
 8000b50:	f7ff fdaa 	bl	80006a8 <printmsg>
        bootloader_send_ack(pBuffer[0],1);
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	2101      	movs	r1, #1
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f000 fa7c 	bl	8001058 <bootloader_send_ack>
        rdp_level = get_flash_rdp_level();
 8000b60:	f000 fb08 	bl	8001174 <get_flash_rdp_level>
 8000b64:	4603      	mov	r3, r0
 8000b66:	73fb      	strb	r3, [r7, #15]
        printmsg("BL_DEBUG_MSG:RDP level: %d %#x\n",rdp_level,rdp_level);
 8000b68:	7bfb      	ldrb	r3, [r7, #15]
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	7bfb      	ldrb	r3, [r7, #15]
 8000b6e:	461a      	mov	r2, r3
 8000b70:	480c      	ldr	r0, [pc, #48]	; (8000ba4 <bootloader_handle_getrdp_cmd+0x90>)
 8000b72:	f7ff fd99 	bl	80006a8 <printmsg>
        bootloader_uart_write_data(&rdp_level,1);
 8000b76:	f107 030f 	add.w	r3, r7, #15
 8000b7a:	2101      	movs	r1, #1
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f000 facb 	bl	8001118 <bootloader_uart_write_data>
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
        bootloader_send_nack();
	}


}
 8000b82:	e004      	b.n	8000b8e <bootloader_handle_getrdp_cmd+0x7a>
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
 8000b84:	4808      	ldr	r0, [pc, #32]	; (8000ba8 <bootloader_handle_getrdp_cmd+0x94>)
 8000b86:	f7ff fd8f 	bl	80006a8 <printmsg>
        bootloader_send_nack();
 8000b8a:	f000 fa7f 	bl	800108c <bootloader_send_nack>
}
 8000b8e:	bf00      	nop
 8000b90:	3718      	adds	r7, #24
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	08003c04 	.word	0x08003c04
 8000b9c:	200000c0 	.word	0x200000c0
 8000ba0:	08003b24 	.word	0x08003b24
 8000ba4:	08003c30 	.word	0x08003c30
 8000ba8:	08003b68 	.word	0x08003b68

08000bac <bootloader_handle_go_cmd>:

/*Helper function to handle BL_GO_TO_ADDR command */
void bootloader_handle_go_cmd(uint8_t *pBuffer)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b088      	sub	sp, #32
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
    uint32_t go_address=0;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	61fb      	str	r3, [r7, #28]
    uint8_t addr_valid = ADDR_VALID;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	73fb      	strb	r3, [r7, #15]
    uint8_t addr_invalid = ADDR_INVALID;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	73bb      	strb	r3, [r7, #14]

    printmsg("BL_DEBUG_MSG:bootloader_handle_go_cmd\n");
 8000bc0:	4828      	ldr	r0, [pc, #160]	; (8000c64 <bootloader_handle_go_cmd+0xb8>)
 8000bc2:	f7ff fd71 	bl	80006a8 <printmsg>

    //Total length of the command packet
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8000bc6:	4b28      	ldr	r3, [pc, #160]	; (8000c68 <bootloader_handle_go_cmd+0xbc>)
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	3301      	adds	r3, #1
 8000bcc:	61bb      	str	r3, [r7, #24]

	//extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8000bce:	69bb      	ldr	r3, [r7, #24]
 8000bd0:	3b04      	subs	r3, #4
 8000bd2:	4a25      	ldr	r2, [pc, #148]	; (8000c68 <bootloader_handle_go_cmd+0xbc>)
 8000bd4:	4413      	add	r3, r2
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	617b      	str	r3, [r7, #20]

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8000bda:	69bb      	ldr	r3, [r7, #24]
 8000bdc:	3b04      	subs	r3, #4
 8000bde:	697a      	ldr	r2, [r7, #20]
 8000be0:	4619      	mov	r1, r3
 8000be2:	4821      	ldr	r0, [pc, #132]	; (8000c68 <bootloader_handle_go_cmd+0xbc>)
 8000be4:	f000 fa64 	bl	80010b0 <bootloader_verify_crc>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d131      	bne.n	8000c52 <bootloader_handle_go_cmd+0xa6>
	{
        printmsg("BL_DEBUG_MSG:checksum success !!\n");
 8000bee:	481f      	ldr	r0, [pc, #124]	; (8000c6c <bootloader_handle_go_cmd+0xc0>)
 8000bf0:	f7ff fd5a 	bl	80006a8 <printmsg>

        bootloader_send_ack(pBuffer[0],1);
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	2101      	movs	r1, #1
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f000 fa2c 	bl	8001058 <bootloader_send_ack>

        //extract the go address
        go_address = *((uint32_t *)&pBuffer[2] );
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8000c06:	61fb      	str	r3, [r7, #28]
        printmsg("BL_DEBUG_MSG:GO addr: %#x\n",go_address);
 8000c08:	69f9      	ldr	r1, [r7, #28]
 8000c0a:	4819      	ldr	r0, [pc, #100]	; (8000c70 <bootloader_handle_go_cmd+0xc4>)
 8000c0c:	f7ff fd4c 	bl	80006a8 <printmsg>

        if( verify_address(go_address) == ADDR_VALID )
 8000c10:	69f8      	ldr	r0, [r7, #28]
 8000c12:	f000 fac3 	bl	800119c <verify_address>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d110      	bne.n	8000c3e <bootloader_handle_go_cmd+0x92>
        {
            //tell host that address is fine
            bootloader_uart_write_data(&addr_valid,1);
 8000c1c:	f107 030f 	add.w	r3, r7, #15
 8000c20:	2101      	movs	r1, #1
 8000c22:	4618      	mov	r0, r3
 8000c24:	f000 fa78 	bl	8001118 <bootloader_uart_write_data>
            Its not the duty of bootloader. so just trust and jump */

            /* Not doing the below line will result in hardfault exception for ARM cortex M */
            //watch : https://www.youtube.com/watch?v=VX_12SjnNhY

            go_address+=1; //make T bit =1
 8000c28:	69fb      	ldr	r3, [r7, #28]
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	61fb      	str	r3, [r7, #28]

            void (*lets_jump)(void) = (void *)go_address;
 8000c2e:	69fb      	ldr	r3, [r7, #28]
 8000c30:	613b      	str	r3, [r7, #16]

            printmsg("BL_DEBUG_MSG: jumping to go address! \n");
 8000c32:	4810      	ldr	r0, [pc, #64]	; (8000c74 <bootloader_handle_go_cmd+0xc8>)
 8000c34:	f7ff fd38 	bl	80006a8 <printmsg>

            lets_jump();
 8000c38:	693b      	ldr	r3, [r7, #16]
 8000c3a:	4798      	blx	r3
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
        bootloader_send_nack();
	}


}
 8000c3c:	e00e      	b.n	8000c5c <bootloader_handle_go_cmd+0xb0>
            printmsg("BL_DEBUG_MSG:GO addr invalid ! \n");
 8000c3e:	480e      	ldr	r0, [pc, #56]	; (8000c78 <bootloader_handle_go_cmd+0xcc>)
 8000c40:	f7ff fd32 	bl	80006a8 <printmsg>
            bootloader_uart_write_data(&addr_invalid,1);
 8000c44:	f107 030e 	add.w	r3, r7, #14
 8000c48:	2101      	movs	r1, #1
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f000 fa64 	bl	8001118 <bootloader_uart_write_data>
}
 8000c50:	e004      	b.n	8000c5c <bootloader_handle_go_cmd+0xb0>
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
 8000c52:	480a      	ldr	r0, [pc, #40]	; (8000c7c <bootloader_handle_go_cmd+0xd0>)
 8000c54:	f7ff fd28 	bl	80006a8 <printmsg>
        bootloader_send_nack();
 8000c58:	f000 fa18 	bl	800108c <bootloader_send_nack>
}
 8000c5c:	bf00      	nop
 8000c5e:	3720      	adds	r7, #32
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	08003c50 	.word	0x08003c50
 8000c68:	200000c0 	.word	0x200000c0
 8000c6c:	08003b24 	.word	0x08003b24
 8000c70:	08003c78 	.word	0x08003c78
 8000c74:	08003c94 	.word	0x08003c94
 8000c78:	08003cbc 	.word	0x08003cbc
 8000c7c:	08003b68 	.word	0x08003b68

08000c80 <bootloader_handle_flash_erase_cmd>:

/*Helper function to handle BL_FLASH_ERASE command */
void bootloader_handle_flash_erase_cmd(uint8_t *pBuffer)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b086      	sub	sp, #24
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
    uint8_t erase_status = 0x00;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	73fb      	strb	r3, [r7, #15]
    printmsg("BL_DEBUG_MSG:bootloader_handle_flash_erase_cmd\n");
 8000c8c:	482a      	ldr	r0, [pc, #168]	; (8000d38 <bootloader_handle_flash_erase_cmd+0xb8>)
 8000c8e:	f7ff fd0b 	bl	80006a8 <printmsg>

    //Total length of the command packet
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8000c92:	4b2a      	ldr	r3, [pc, #168]	; (8000d3c <bootloader_handle_flash_erase_cmd+0xbc>)
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	3301      	adds	r3, #1
 8000c98:	617b      	str	r3, [r7, #20]

	//extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	3b04      	subs	r3, #4
 8000c9e:	4a27      	ldr	r2, [pc, #156]	; (8000d3c <bootloader_handle_flash_erase_cmd+0xbc>)
 8000ca0:	4413      	add	r3, r2
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	613b      	str	r3, [r7, #16]

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	3b04      	subs	r3, #4
 8000caa:	693a      	ldr	r2, [r7, #16]
 8000cac:	4619      	mov	r1, r3
 8000cae:	4823      	ldr	r0, [pc, #140]	; (8000d3c <bootloader_handle_flash_erase_cmd+0xbc>)
 8000cb0:	f000 f9fe 	bl	80010b0 <bootloader_verify_crc>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d135      	bne.n	8000d26 <bootloader_handle_flash_erase_cmd+0xa6>
	{
        printmsg("BL_DEBUG_MSG:checksum success !!\n");
 8000cba:	4821      	ldr	r0, [pc, #132]	; (8000d40 <bootloader_handle_flash_erase_cmd+0xc0>)
 8000cbc:	f7ff fcf4 	bl	80006a8 <printmsg>
        bootloader_send_ack(pBuffer[0],1);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	2101      	movs	r1, #1
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f000 f9c6 	bl	8001058 <bootloader_send_ack>
        printmsg("BL_DEBUG_MSG:initial_sector : %d  no_ofsectors: %d\n",pBuffer[2],pBuffer[3]);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	3302      	adds	r3, #2
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	3303      	adds	r3, #3
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	461a      	mov	r2, r3
 8000cdc:	4819      	ldr	r0, [pc, #100]	; (8000d44 <bootloader_handle_flash_erase_cmd+0xc4>)
 8000cde:	f7ff fce3 	bl	80006a8 <printmsg>

        HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,1);
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	2120      	movs	r1, #32
 8000ce6:	4818      	ldr	r0, [pc, #96]	; (8000d48 <bootloader_handle_flash_erase_cmd+0xc8>)
 8000ce8:	f001 fbcc 	bl	8002484 <HAL_GPIO_WritePin>
        erase_status = execute_flash_erase(pBuffer[2] , pBuffer[3]);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	3302      	adds	r3, #2
 8000cf0:	781a      	ldrb	r2, [r3, #0]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	3303      	adds	r3, #3
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4610      	mov	r0, r2
 8000cfc:	f000 fa8c 	bl	8001218 <execute_flash_erase>
 8000d00:	4603      	mov	r3, r0
 8000d02:	73fb      	strb	r3, [r7, #15]
        HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,0);
 8000d04:	2200      	movs	r2, #0
 8000d06:	2120      	movs	r1, #32
 8000d08:	480f      	ldr	r0, [pc, #60]	; (8000d48 <bootloader_handle_flash_erase_cmd+0xc8>)
 8000d0a:	f001 fbbb 	bl	8002484 <HAL_GPIO_WritePin>

        printmsg("BL_DEBUG_MSG: flash erase status: %#x\n",erase_status);
 8000d0e:	7bfb      	ldrb	r3, [r7, #15]
 8000d10:	4619      	mov	r1, r3
 8000d12:	480e      	ldr	r0, [pc, #56]	; (8000d4c <bootloader_handle_flash_erase_cmd+0xcc>)
 8000d14:	f7ff fcc8 	bl	80006a8 <printmsg>

        bootloader_uart_write_data(&erase_status,1);
 8000d18:	f107 030f 	add.w	r3, r7, #15
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f000 f9fa 	bl	8001118 <bootloader_uart_write_data>
	}else
	{
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
        bootloader_send_nack();
	}
}
 8000d24:	e004      	b.n	8000d30 <bootloader_handle_flash_erase_cmd+0xb0>
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
 8000d26:	480a      	ldr	r0, [pc, #40]	; (8000d50 <bootloader_handle_flash_erase_cmd+0xd0>)
 8000d28:	f7ff fcbe 	bl	80006a8 <printmsg>
        bootloader_send_nack();
 8000d2c:	f000 f9ae 	bl	800108c <bootloader_send_nack>
}
 8000d30:	bf00      	nop
 8000d32:	3718      	adds	r7, #24
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	08003ce0 	.word	0x08003ce0
 8000d3c:	200000c0 	.word	0x200000c0
 8000d40:	08003b24 	.word	0x08003b24
 8000d44:	08003d10 	.word	0x08003d10
 8000d48:	40020000 	.word	0x40020000
 8000d4c:	08003d44 	.word	0x08003d44
 8000d50:	08003b68 	.word	0x08003b68

08000d54 <bootloader_handle_mem_write_cmd>:

/*Helper function to handle BL_MEM_WRITE command */
void bootloader_handle_mem_write_cmd(uint8_t *pBuffer)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b088      	sub	sp, #32
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
	uint8_t addr_valid = ADDR_VALID;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	77fb      	strb	r3, [r7, #31]
	uint8_t write_status = 0x00;
 8000d60:	2300      	movs	r3, #0
 8000d62:	73fb      	strb	r3, [r7, #15]
	uint8_t chksum =0, len=0;
 8000d64:	2300      	movs	r3, #0
 8000d66:	77bb      	strb	r3, [r7, #30]
 8000d68:	2300      	movs	r3, #0
 8000d6a:	777b      	strb	r3, [r7, #29]
	len = pBuffer[0];
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	777b      	strb	r3, [r7, #29]
	uint8_t payload_len = pBuffer[6];
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	799b      	ldrb	r3, [r3, #6]
 8000d76:	773b      	strb	r3, [r7, #28]

	uint32_t mem_address = *((uint32_t *) ( &pBuffer[2]) );
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8000d7e:	61bb      	str	r3, [r7, #24]

	chksum = pBuffer[len];
 8000d80:	7f7b      	ldrb	r3, [r7, #29]
 8000d82:	687a      	ldr	r2, [r7, #4]
 8000d84:	4413      	add	r3, r2
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	77bb      	strb	r3, [r7, #30]

    printmsg("BL_DEBUG_MSG:bootloader_handle_mem_write_cmd\n");
 8000d8a:	482e      	ldr	r0, [pc, #184]	; (8000e44 <bootloader_handle_mem_write_cmd+0xf0>)
 8000d8c:	f7ff fc8c 	bl	80006a8 <printmsg>

    //Total length of the command packet
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8000d90:	4b2d      	ldr	r3, [pc, #180]	; (8000e48 <bootloader_handle_mem_write_cmd+0xf4>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	3301      	adds	r3, #1
 8000d96:	617b      	str	r3, [r7, #20]

	//extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	3b04      	subs	r3, #4
 8000d9c:	4a2a      	ldr	r2, [pc, #168]	; (8000e48 <bootloader_handle_mem_write_cmd+0xf4>)
 8000d9e:	4413      	add	r3, r2
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	613b      	str	r3, [r7, #16]


	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	3b04      	subs	r3, #4
 8000da8:	693a      	ldr	r2, [r7, #16]
 8000daa:	4619      	mov	r1, r3
 8000dac:	4826      	ldr	r0, [pc, #152]	; (8000e48 <bootloader_handle_mem_write_cmd+0xf4>)
 8000dae:	f000 f97f 	bl	80010b0 <bootloader_verify_crc>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d13b      	bne.n	8000e30 <bootloader_handle_mem_write_cmd+0xdc>
	{
        printmsg("BL_DEBUG_MSG:checksum success !!\n");
 8000db8:	4824      	ldr	r0, [pc, #144]	; (8000e4c <bootloader_handle_mem_write_cmd+0xf8>)
 8000dba:	f7ff fc75 	bl	80006a8 <printmsg>

        bootloader_send_ack(pBuffer[0],1);
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	2101      	movs	r1, #1
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f000 f947 	bl	8001058 <bootloader_send_ack>

        printmsg("BL_DEBUG_MSG: mem write address : %#x\n",mem_address);
 8000dca:	69b9      	ldr	r1, [r7, #24]
 8000dcc:	4820      	ldr	r0, [pc, #128]	; (8000e50 <bootloader_handle_mem_write_cmd+0xfc>)
 8000dce:	f7ff fc6b 	bl	80006a8 <printmsg>

		if( verify_address(mem_address) == ADDR_VALID )
 8000dd2:	69b8      	ldr	r0, [r7, #24]
 8000dd4:	f000 f9e2 	bl	800119c <verify_address>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d11c      	bne.n	8000e18 <bootloader_handle_mem_write_cmd+0xc4>
		{

            printmsg("BL_DEBUG_MSG: valid mem write address\n");
 8000dde:	481d      	ldr	r0, [pc, #116]	; (8000e54 <bootloader_handle_mem_write_cmd+0x100>)
 8000de0:	f7ff fc62 	bl	80006a8 <printmsg>

            //glow the led to indicate bootloader is currently writing to memory
            HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000de4:	2201      	movs	r2, #1
 8000de6:	2120      	movs	r1, #32
 8000de8:	481b      	ldr	r0, [pc, #108]	; (8000e58 <bootloader_handle_mem_write_cmd+0x104>)
 8000dea:	f001 fb4b 	bl	8002484 <HAL_GPIO_WritePin>

            //execute mem write
            write_status = execute_mem_write(&pBuffer[7],mem_address, payload_len);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	3307      	adds	r3, #7
 8000df2:	7f3a      	ldrb	r2, [r7, #28]
 8000df4:	69b9      	ldr	r1, [r7, #24]
 8000df6:	4618      	mov	r0, r3
 8000df8:	f000 fa55 	bl	80012a6 <execute_mem_write>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	73fb      	strb	r3, [r7, #15]

            //turn off the led to indicate memory write is over
            HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e00:	2200      	movs	r2, #0
 8000e02:	2120      	movs	r1, #32
 8000e04:	4814      	ldr	r0, [pc, #80]	; (8000e58 <bootloader_handle_mem_write_cmd+0x104>)
 8000e06:	f001 fb3d 	bl	8002484 <HAL_GPIO_WritePin>

            //inform host about the status
            bootloader_uart_write_data(&write_status,1);
 8000e0a:	f107 030f 	add.w	r3, r7, #15
 8000e0e:	2101      	movs	r1, #1
 8000e10:	4618      	mov	r0, r3
 8000e12:	f000 f981 	bl	8001118 <bootloader_uart_write_data>
	{
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
        bootloader_send_nack();
	}

}
 8000e16:	e010      	b.n	8000e3a <bootloader_handle_mem_write_cmd+0xe6>
            printmsg("BL_DEBUG_MSG: invalid mem write address\n");
 8000e18:	4810      	ldr	r0, [pc, #64]	; (8000e5c <bootloader_handle_mem_write_cmd+0x108>)
 8000e1a:	f7ff fc45 	bl	80006a8 <printmsg>
            write_status = ADDR_INVALID;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	73fb      	strb	r3, [r7, #15]
            bootloader_uart_write_data(&write_status,1);
 8000e22:	f107 030f 	add.w	r3, r7, #15
 8000e26:	2101      	movs	r1, #1
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f000 f975 	bl	8001118 <bootloader_uart_write_data>
}
 8000e2e:	e004      	b.n	8000e3a <bootloader_handle_mem_write_cmd+0xe6>
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
 8000e30:	480b      	ldr	r0, [pc, #44]	; (8000e60 <bootloader_handle_mem_write_cmd+0x10c>)
 8000e32:	f7ff fc39 	bl	80006a8 <printmsg>
        bootloader_send_nack();
 8000e36:	f000 f929 	bl	800108c <bootloader_send_nack>
}
 8000e3a:	bf00      	nop
 8000e3c:	3720      	adds	r7, #32
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	08003d6c 	.word	0x08003d6c
 8000e48:	200000c0 	.word	0x200000c0
 8000e4c:	08003b24 	.word	0x08003b24
 8000e50:	08003d9c 	.word	0x08003d9c
 8000e54:	08003dc4 	.word	0x08003dc4
 8000e58:	40020000 	.word	0x40020000
 8000e5c:	08003dec 	.word	0x08003dec
 8000e60:	08003b68 	.word	0x08003b68

08000e64 <bootloader_handle_en_rw_protect>:

/*Helper function to handle BL_EN_RW_PROTECT  command */
void bootloader_handle_en_rw_protect(uint8_t *pBuffer)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b086      	sub	sp, #24
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x00;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	73fb      	strb	r3, [r7, #15]
    printmsg("BL_DEBUG_MSG:bootloader_handle_endis_rw_protect\n");
 8000e70:	4820      	ldr	r0, [pc, #128]	; (8000ef4 <bootloader_handle_en_rw_protect+0x90>)
 8000e72:	f7ff fc19 	bl	80006a8 <printmsg>

    //Total length of the command packet
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8000e76:	4b20      	ldr	r3, [pc, #128]	; (8000ef8 <bootloader_handle_en_rw_protect+0x94>)
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	3301      	adds	r3, #1
 8000e7c:	617b      	str	r3, [r7, #20]

	//extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	3b04      	subs	r3, #4
 8000e82:	4a1d      	ldr	r2, [pc, #116]	; (8000ef8 <bootloader_handle_en_rw_protect+0x94>)
 8000e84:	4413      	add	r3, r2
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	613b      	str	r3, [r7, #16]

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	3b04      	subs	r3, #4
 8000e8e:	693a      	ldr	r2, [r7, #16]
 8000e90:	4619      	mov	r1, r3
 8000e92:	4819      	ldr	r0, [pc, #100]	; (8000ef8 <bootloader_handle_en_rw_protect+0x94>)
 8000e94:	f000 f90c 	bl	80010b0 <bootloader_verify_crc>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d120      	bne.n	8000ee0 <bootloader_handle_en_rw_protect+0x7c>
	{
        printmsg("BL_DEBUG_MSG:checksum success !!\n");
 8000e9e:	4817      	ldr	r0, [pc, #92]	; (8000efc <bootloader_handle_en_rw_protect+0x98>)
 8000ea0:	f7ff fc02 	bl	80006a8 <printmsg>
        bootloader_send_ack(pBuffer[0],1);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	2101      	movs	r1, #1
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f000 f8d4 	bl	8001058 <bootloader_send_ack>

        status = configure_flash_sector_rw_protection(pBuffer[2] , pBuffer[3],0);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	3302      	adds	r3, #2
 8000eb4:	7818      	ldrb	r0, [r3, #0]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	3303      	adds	r3, #3
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	f000 fa1e 	bl	8001300 <configure_flash_sector_rw_protection>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	73fb      	strb	r3, [r7, #15]

        printmsg("BL_DEBUG_MSG: flash erase status: %#x\n",status);
 8000ec8:	7bfb      	ldrb	r3, [r7, #15]
 8000eca:	4619      	mov	r1, r3
 8000ecc:	480c      	ldr	r0, [pc, #48]	; (8000f00 <bootloader_handle_en_rw_protect+0x9c>)
 8000ece:	f7ff fbeb 	bl	80006a8 <printmsg>

        bootloader_uart_write_data(&status,1);
 8000ed2:	f107 030f 	add.w	r3, r7, #15
 8000ed6:	2101      	movs	r1, #1
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f000 f91d 	bl	8001118 <bootloader_uart_write_data>
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
        bootloader_send_nack();
	}


}
 8000ede:	e004      	b.n	8000eea <bootloader_handle_en_rw_protect+0x86>
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
 8000ee0:	4808      	ldr	r0, [pc, #32]	; (8000f04 <bootloader_handle_en_rw_protect+0xa0>)
 8000ee2:	f7ff fbe1 	bl	80006a8 <printmsg>
        bootloader_send_nack();
 8000ee6:	f000 f8d1 	bl	800108c <bootloader_send_nack>
}
 8000eea:	bf00      	nop
 8000eec:	3718      	adds	r7, #24
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	08003e18 	.word	0x08003e18
 8000ef8:	200000c0 	.word	0x200000c0
 8000efc:	08003b24 	.word	0x08003b24
 8000f00:	08003d44 	.word	0x08003d44
 8000f04:	08003b68 	.word	0x08003b68

08000f08 <bootloader_handle_dis_rw_protect>:


/*Helper function to handle BL_EN_RW_PROTECT  command */
void bootloader_handle_dis_rw_protect(uint8_t *pBuffer)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b086      	sub	sp, #24
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x00;
 8000f10:	2300      	movs	r3, #0
 8000f12:	73fb      	strb	r3, [r7, #15]
    printmsg("BL_DEBUG_MSG:bootloader_handle_dis_rw_protect\n");
 8000f14:	481d      	ldr	r0, [pc, #116]	; (8000f8c <bootloader_handle_dis_rw_protect+0x84>)
 8000f16:	f7ff fbc7 	bl	80006a8 <printmsg>

    //Total length of the command packet
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8000f1a:	4b1d      	ldr	r3, [pc, #116]	; (8000f90 <bootloader_handle_dis_rw_protect+0x88>)
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	3301      	adds	r3, #1
 8000f20:	617b      	str	r3, [r7, #20]

	//extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	3b04      	subs	r3, #4
 8000f26:	4a1a      	ldr	r2, [pc, #104]	; (8000f90 <bootloader_handle_dis_rw_protect+0x88>)
 8000f28:	4413      	add	r3, r2
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	613b      	str	r3, [r7, #16]

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	3b04      	subs	r3, #4
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	4619      	mov	r1, r3
 8000f36:	4816      	ldr	r0, [pc, #88]	; (8000f90 <bootloader_handle_dis_rw_protect+0x88>)
 8000f38:	f000 f8ba 	bl	80010b0 <bootloader_verify_crc>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d11b      	bne.n	8000f7a <bootloader_handle_dis_rw_protect+0x72>
	{
        printmsg("BL_DEBUG_MSG:checksum success !!\n");
 8000f42:	4814      	ldr	r0, [pc, #80]	; (8000f94 <bootloader_handle_dis_rw_protect+0x8c>)
 8000f44:	f7ff fbb0 	bl	80006a8 <printmsg>
        bootloader_send_ack(pBuffer[0],1);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	2101      	movs	r1, #1
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f000 f882 	bl	8001058 <bootloader_send_ack>

        status = configure_flash_sector_rw_protection(0,0,1);
 8000f54:	2201      	movs	r2, #1
 8000f56:	2100      	movs	r1, #0
 8000f58:	2000      	movs	r0, #0
 8000f5a:	f000 f9d1 	bl	8001300 <configure_flash_sector_rw_protection>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	73fb      	strb	r3, [r7, #15]

        printmsg("BL_DEBUG_MSG: flash erase status: %#x\n",status);
 8000f62:	7bfb      	ldrb	r3, [r7, #15]
 8000f64:	4619      	mov	r1, r3
 8000f66:	480c      	ldr	r0, [pc, #48]	; (8000f98 <bootloader_handle_dis_rw_protect+0x90>)
 8000f68:	f7ff fb9e 	bl	80006a8 <printmsg>

        bootloader_uart_write_data(&status,1);
 8000f6c:	f107 030f 	add.w	r3, r7, #15
 8000f70:	2101      	movs	r1, #1
 8000f72:	4618      	mov	r0, r3
 8000f74:	f000 f8d0 	bl	8001118 <bootloader_uart_write_data>
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
        bootloader_send_nack();
	}


}
 8000f78:	e004      	b.n	8000f84 <bootloader_handle_dis_rw_protect+0x7c>
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
 8000f7a:	4808      	ldr	r0, [pc, #32]	; (8000f9c <bootloader_handle_dis_rw_protect+0x94>)
 8000f7c:	f7ff fb94 	bl	80006a8 <printmsg>
        bootloader_send_nack();
 8000f80:	f000 f884 	bl	800108c <bootloader_send_nack>
}
 8000f84:	bf00      	nop
 8000f86:	3718      	adds	r7, #24
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	08003e4c 	.word	0x08003e4c
 8000f90:	200000c0 	.word	0x200000c0
 8000f94:	08003b24 	.word	0x08003b24
 8000f98:	08003d44 	.word	0x08003d44
 8000f9c:	08003b68 	.word	0x08003b68

08000fa0 <bootloader_handle_mem_read>:

/*Helper function to handle BL_MEM_READ command */
void bootloader_handle_mem_read (uint8_t *pBuffer)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]


}
 8000fa8:	bf00      	nop
 8000faa:	370c      	adds	r7, #12
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr

08000fb4 <bootloader_handle_read_sector_protection_status>:

/*Helper function to handle _BL_READ_SECTOR_P_STATUS command */
void bootloader_handle_read_sector_protection_status(uint8_t *pBuffer)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b086      	sub	sp, #24
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
	 uint16_t status;
	printmsg("BL_DEBUG_MSG:bootloader_handle_read_sector_protection_status\n");
 8000fbc:	481c      	ldr	r0, [pc, #112]	; (8001030 <bootloader_handle_read_sector_protection_status+0x7c>)
 8000fbe:	f7ff fb73 	bl	80006a8 <printmsg>

    //Total length of the command packet
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8000fc2:	4b1c      	ldr	r3, [pc, #112]	; (8001034 <bootloader_handle_read_sector_protection_status+0x80>)
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	617b      	str	r3, [r7, #20]

	//extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	3b04      	subs	r3, #4
 8000fce:	4a19      	ldr	r2, [pc, #100]	; (8001034 <bootloader_handle_read_sector_protection_status+0x80>)
 8000fd0:	4413      	add	r3, r2
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	613b      	str	r3, [r7, #16]

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	3b04      	subs	r3, #4
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4815      	ldr	r0, [pc, #84]	; (8001034 <bootloader_handle_read_sector_protection_status+0x80>)
 8000fe0:	f000 f866 	bl	80010b0 <bootloader_verify_crc>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d118      	bne.n	800101c <bootloader_handle_read_sector_protection_status+0x68>
	{
        printmsg("BL_DEBUG_MSG:checksum success !!\n");
 8000fea:	4813      	ldr	r0, [pc, #76]	; (8001038 <bootloader_handle_read_sector_protection_status+0x84>)
 8000fec:	f7ff fb5c 	bl	80006a8 <printmsg>
        bootloader_send_ack(pBuffer[0],2);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	2102      	movs	r1, #2
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f000 f82e 	bl	8001058 <bootloader_send_ack>
        status=read_OB_rw_protection_status();
 8000ffc:	f000 fa16 	bl	800142c <read_OB_rw_protection_status>
 8001000:	4603      	mov	r3, r0
 8001002:	81fb      	strh	r3, [r7, #14]
        printmsg("BL_DEBUG_MSG: nWRP status: %#x\n",status);
 8001004:	89fb      	ldrh	r3, [r7, #14]
 8001006:	4619      	mov	r1, r3
 8001008:	480c      	ldr	r0, [pc, #48]	; (800103c <bootloader_handle_read_sector_protection_status+0x88>)
 800100a:	f7ff fb4d 	bl	80006a8 <printmsg>
        bootloader_uart_write_data((uint8_t*)&status,2);
 800100e:	f107 030e 	add.w	r3, r7, #14
 8001012:	2102      	movs	r1, #2
 8001014:	4618      	mov	r0, r3
 8001016:	f000 f87f 	bl	8001118 <bootloader_uart_write_data>
	{
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
        bootloader_send_nack();
	}

}
 800101a:	e004      	b.n	8001026 <bootloader_handle_read_sector_protection_status+0x72>
        printmsg("BL_DEBUG_MSG:checksum fail !!\n");
 800101c:	4808      	ldr	r0, [pc, #32]	; (8001040 <bootloader_handle_read_sector_protection_status+0x8c>)
 800101e:	f7ff fb43 	bl	80006a8 <printmsg>
        bootloader_send_nack();
 8001022:	f000 f833 	bl	800108c <bootloader_send_nack>
}
 8001026:	bf00      	nop
 8001028:	3718      	adds	r7, #24
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	08003e7c 	.word	0x08003e7c
 8001034:	200000c0 	.word	0x200000c0
 8001038:	08003b24 	.word	0x08003b24
 800103c:	08003ebc 	.word	0x08003ebc
 8001040:	08003b68 	.word	0x08003b68

08001044 <bootloader_handle_read_otp>:

/*Helper function to handle BL_OTP_READ command */
void bootloader_handle_read_otp(uint8_t *pBuffer)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]


}
 800104c:	bf00      	nop
 800104e:	370c      	adds	r7, #12
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr

08001058 <bootloader_send_ack>:

/*This function sends ACK if CRC matches along with "len to follow"*/
void bootloader_send_ack(uint8_t command_code, uint8_t follow_len)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	460a      	mov	r2, r1
 8001062:	71fb      	strb	r3, [r7, #7]
 8001064:	4613      	mov	r3, r2
 8001066:	71bb      	strb	r3, [r7, #6]
	 //here we send 2 byte.. first byte is ack and the second byte is len value
	uint8_t ack_buf[2];
	ack_buf[0] = BL_ACK;
 8001068:	23a5      	movs	r3, #165	; 0xa5
 800106a:	733b      	strb	r3, [r7, #12]
	ack_buf[1] = follow_len;
 800106c:	79bb      	ldrb	r3, [r7, #6]
 800106e:	737b      	strb	r3, [r7, #13]
	HAL_UART_Transmit(C_UART,ack_buf,2,HAL_MAX_DELAY);
 8001070:	f107 010c 	add.w	r1, r7, #12
 8001074:	f04f 33ff 	mov.w	r3, #4294967295
 8001078:	2202      	movs	r2, #2
 800107a:	4803      	ldr	r0, [pc, #12]	; (8001088 <bootloader_send_ack+0x30>)
 800107c:	f002 f851 	bl	8003122 <HAL_UART_Transmit>

}
 8001080:	bf00      	nop
 8001082:	3710      	adds	r7, #16
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	20000038 	.word	0x20000038

0800108c <bootloader_send_nack>:

/*This function sends NACK */
void bootloader_send_nack(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
	uint8_t nack = BL_NACK;
 8001092:	237f      	movs	r3, #127	; 0x7f
 8001094:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(C_UART,&nack,1,HAL_MAX_DELAY);
 8001096:	1df9      	adds	r1, r7, #7
 8001098:	f04f 33ff 	mov.w	r3, #4294967295
 800109c:	2201      	movs	r2, #1
 800109e:	4803      	ldr	r0, [pc, #12]	; (80010ac <bootloader_send_nack+0x20>)
 80010a0:	f002 f83f 	bl	8003122 <HAL_UART_Transmit>
}
 80010a4:	bf00      	nop
 80010a6:	3708      	adds	r7, #8
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	20000038 	.word	0x20000038

080010b0 <bootloader_verify_crc>:

//This verifies the CRC of the given buffer in pData .
uint8_t bootloader_verify_crc (uint8_t *pData, uint32_t len, uint32_t crc_host)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b088      	sub	sp, #32
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	60f8      	str	r0, [r7, #12]
 80010b8:	60b9      	str	r1, [r7, #8]
 80010ba:	607a      	str	r2, [r7, #4]
    uint32_t uwCRCValue=0xff;
 80010bc:	23ff      	movs	r3, #255	; 0xff
 80010be:	61fb      	str	r3, [r7, #28]

    for (uint32_t i=0 ; i < len ; i++)
 80010c0:	2300      	movs	r3, #0
 80010c2:	61bb      	str	r3, [r7, #24]
 80010c4:	e00f      	b.n	80010e6 <bootloader_verify_crc+0x36>
	{
        uint32_t i_data = pData[i];
 80010c6:	68fa      	ldr	r2, [r7, #12]
 80010c8:	69bb      	ldr	r3, [r7, #24]
 80010ca:	4413      	add	r3, r2
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	617b      	str	r3, [r7, #20]
        uwCRCValue = HAL_CRC_Accumulate(&hcrc, &i_data, 1);
 80010d0:	f107 0314 	add.w	r3, r7, #20
 80010d4:	2201      	movs	r2, #1
 80010d6:	4619      	mov	r1, r3
 80010d8:	480e      	ldr	r0, [pc, #56]	; (8001114 <bootloader_verify_crc+0x64>)
 80010da:	f000 fc77 	bl	80019cc <HAL_CRC_Accumulate>
 80010de:	61f8      	str	r0, [r7, #28]
    for (uint32_t i=0 ; i < len ; i++)
 80010e0:	69bb      	ldr	r3, [r7, #24]
 80010e2:	3301      	adds	r3, #1
 80010e4:	61bb      	str	r3, [r7, #24]
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	429a      	cmp	r2, r3
 80010ec:	d3eb      	bcc.n	80010c6 <bootloader_verify_crc+0x16>
	}

	 /* Reset CRC Calculation Unit */
  __HAL_CRC_DR_RESET(&hcrc);
 80010ee:	4b09      	ldr	r3, [pc, #36]	; (8001114 <bootloader_verify_crc+0x64>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	689a      	ldr	r2, [r3, #8]
 80010f4:	4b07      	ldr	r3, [pc, #28]	; (8001114 <bootloader_verify_crc+0x64>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f042 0201 	orr.w	r2, r2, #1
 80010fc:	609a      	str	r2, [r3, #8]

	if( uwCRCValue == crc_host)
 80010fe:	69fa      	ldr	r2, [r7, #28]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	429a      	cmp	r2, r3
 8001104:	d101      	bne.n	800110a <bootloader_verify_crc+0x5a>
	{
		return VERIFY_CRC_SUCCESS;
 8001106:	2300      	movs	r3, #0
 8001108:	e000      	b.n	800110c <bootloader_verify_crc+0x5c>
	}

	return VERIFY_CRC_FAIL;
 800110a:	2301      	movs	r3, #1
}
 800110c:	4618      	mov	r0, r3
 800110e:	3720      	adds	r7, #32
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	20000030 	.word	0x20000030

08001118 <bootloader_uart_write_data>:

/* This function writes data in to C_UART */
void bootloader_uart_write_data(uint8_t *pBuffer,uint32_t len)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	6039      	str	r1, [r7, #0]
    /*you can replace the below ST's USART driver API call with your MCUs driver API call */
	HAL_UART_Transmit(C_UART,pBuffer,len,HAL_MAX_DELAY);
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	b29a      	uxth	r2, r3
 8001126:	f04f 33ff 	mov.w	r3, #4294967295
 800112a:	6879      	ldr	r1, [r7, #4]
 800112c:	4803      	ldr	r0, [pc, #12]	; (800113c <bootloader_uart_write_data+0x24>)
 800112e:	f001 fff8 	bl	8003122 <HAL_UART_Transmit>

}
 8001132:	bf00      	nop
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	20000038 	.word	0x20000038

08001140 <get_bootloader_version>:


//Just returns the macro value .
uint8_t get_bootloader_version(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  return (uint8_t)BL_VERSION;
 8001144:	2310      	movs	r3, #16
}
 8001146:	4618      	mov	r0, r3
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr

08001150 <get_mcu_chip_id>:

//Read the chip identifier or device Identifier
uint16_t get_mcu_chip_id(void)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
	and the die revision. It is part of the DBG_MCU component and is mapped on the
	external PPB bus (see Section 33.16 on page 1304). This code is accessible using the
	JTAG debug pCat.2ort (4 to 5 pins) or the SW debug port (two pins) or by the user software.
	It is even accessible while the MCU is under system reset. */
	uint16_t cid;
	cid = (uint16_t)(DBGMCU->IDCODE) & 0x0FFF;
 8001156:	4b06      	ldr	r3, [pc, #24]	; (8001170 <get_mcu_chip_id+0x20>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	b29b      	uxth	r3, r3
 800115c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001160:	80fb      	strh	r3, [r7, #6]
	return  cid;
 8001162:	88fb      	ldrh	r3, [r7, #6]

}
 8001164:	4618      	mov	r0, r3
 8001166:	370c      	adds	r7, #12
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr
 8001170:	e0042000 	.word	0xe0042000

08001174 <get_flash_rdp_level>:

/*This function reads the RDP ( Read protection option byte) value
 *For more info refer "Table 9. Description of the option bytes" in stm32f446xx RM
 */
uint8_t get_flash_rdp_level(void)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0

	uint8_t rdp_status=0;
 800117a:	2300      	movs	r3, #0
 800117c:	71fb      	strb	r3, [r7, #7]
	FLASH_OBProgramInitTypeDef  ob_handle;
	HAL_FLASHEx_OBGetConfig(&ob_handle);
	rdp_status = (uint8_t)ob_handle.RDPLevel;
#else

	 volatile uint32_t *pOB_addr = (uint32_t*) 0x1FFFC000;
 800117e:	4b06      	ldr	r3, [pc, #24]	; (8001198 <get_flash_rdp_level+0x24>)
 8001180:	603b      	str	r3, [r7, #0]
	 rdp_status =  (uint8_t)(*pOB_addr >> 8) ;
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	0a1b      	lsrs	r3, r3, #8
 8001188:	71fb      	strb	r3, [r7, #7]
#endif

	return rdp_status;
 800118a:	79fb      	ldrb	r3, [r7, #7]

}
 800118c:	4618      	mov	r0, r3
 800118e:	370c      	adds	r7, #12
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr
 8001198:	1fffc000 	.word	0x1fffc000

0800119c <verify_address>:

//verify the address sent by the host .
uint8_t verify_address(uint32_t go_address)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
	//can we jump to backup sram memory ? yes
	//can we jump to peripheral memory ? its possible , but dont allow. so no
	//can we jump to external memory ? yes.

//incomplete -poorly written .. optimize it
	if ( go_address >= SRAM1_BASE && go_address <= SRAM1_END)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80011aa:	d305      	bcc.n	80011b8 <verify_address+0x1c>
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	4a15      	ldr	r2, [pc, #84]	; (8001204 <verify_address+0x68>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d801      	bhi.n	80011b8 <verify_address+0x1c>
	{
		return ADDR_VALID;
 80011b4:	2300      	movs	r3, #0
 80011b6:	e01e      	b.n	80011f6 <verify_address+0x5a>
	}
	else if ( go_address >= SRAM2_BASE && go_address <= SRAM2_END)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	4a12      	ldr	r2, [pc, #72]	; (8001204 <verify_address+0x68>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	d305      	bcc.n	80011cc <verify_address+0x30>
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	4a11      	ldr	r2, [pc, #68]	; (8001208 <verify_address+0x6c>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d801      	bhi.n	80011cc <verify_address+0x30>
	{
		return ADDR_VALID;
 80011c8:	2300      	movs	r3, #0
 80011ca:	e014      	b.n	80011f6 <verify_address+0x5a>
	}
	else if ( go_address >= FLASH_BASE && go_address <= FLASH_END)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80011d2:	d305      	bcc.n	80011e0 <verify_address+0x44>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	4a0d      	ldr	r2, [pc, #52]	; (800120c <verify_address+0x70>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d801      	bhi.n	80011e0 <verify_address+0x44>
	{
		return ADDR_VALID;
 80011dc:	2300      	movs	r3, #0
 80011de:	e00a      	b.n	80011f6 <verify_address+0x5a>
	}
	else if ( go_address >= BKPSRAM_BASE && go_address <= BKPSRAM_END)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	4a0b      	ldr	r2, [pc, #44]	; (8001210 <verify_address+0x74>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d305      	bcc.n	80011f4 <verify_address+0x58>
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	4a0a      	ldr	r2, [pc, #40]	; (8001214 <verify_address+0x78>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d801      	bhi.n	80011f4 <verify_address+0x58>
	{
		return ADDR_VALID;
 80011f0:	2300      	movs	r3, #0
 80011f2:	e000      	b.n	80011f6 <verify_address+0x5a>
	}
	else
		return ADDR_INVALID;
 80011f4:	2301      	movs	r3, #1
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	370c      	adds	r7, #12
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	2001c000 	.word	0x2001c000
 8001208:	20020000 	.word	0x20020000
 800120c:	0807ffff 	.word	0x0807ffff
 8001210:	40024000 	.word	0x40024000
 8001214:	40025000 	.word	0x40025000

08001218 <execute_flash_erase>:

 uint8_t execute_flash_erase(uint8_t sector_number , uint8_t number_of_sector)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b08a      	sub	sp, #40	; 0x28
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	460a      	mov	r2, r1
 8001222:	71fb      	strb	r3, [r7, #7]
 8001224:	4613      	mov	r3, r2
 8001226:	71bb      	strb	r3, [r7, #6]
	FLASH_EraseInitTypeDef flashErase_handle;
	uint32_t sectorError;
	HAL_StatusTypeDef status;


	if( number_of_sector > 8 )
 8001228:	79bb      	ldrb	r3, [r7, #6]
 800122a:	2b08      	cmp	r3, #8
 800122c:	d901      	bls.n	8001232 <execute_flash_erase+0x1a>
		return INVALID_SECTOR;
 800122e:	2304      	movs	r3, #4
 8001230:	e035      	b.n	800129e <execute_flash_erase+0x86>

	if( (sector_number == 0xff ) || (sector_number <= 7) )
 8001232:	79fb      	ldrb	r3, [r7, #7]
 8001234:	2bff      	cmp	r3, #255	; 0xff
 8001236:	d002      	beq.n	800123e <execute_flash_erase+0x26>
 8001238:	79fb      	ldrb	r3, [r7, #7]
 800123a:	2b07      	cmp	r3, #7
 800123c:	d82e      	bhi.n	800129c <execute_flash_erase+0x84>
	{
		if(sector_number == (uint8_t) 0xff)
 800123e:	79fb      	ldrb	r3, [r7, #7]
 8001240:	2bff      	cmp	r3, #255	; 0xff
 8001242:	d102      	bne.n	800124a <execute_flash_erase+0x32>
		{
			flashErase_handle.TypeErase = FLASH_TYPEERASE_MASSERASE;
 8001244:	2301      	movs	r3, #1
 8001246:	613b      	str	r3, [r7, #16]
 8001248:	e012      	b.n	8001270 <execute_flash_erase+0x58>
		}else
		{
		    /*Here we are just calculating how many sectors needs to erased */
			uint8_t remanining_sector = 8 - sector_number;
 800124a:	79fb      	ldrb	r3, [r7, #7]
 800124c:	f1c3 0308 	rsb	r3, r3, #8
 8001250:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            if( number_of_sector > remanining_sector)
 8001254:	79ba      	ldrb	r2, [r7, #6]
 8001256:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800125a:	429a      	cmp	r2, r3
 800125c:	d902      	bls.n	8001264 <execute_flash_erase+0x4c>
            {
            	number_of_sector = remanining_sector;
 800125e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001262:	71bb      	strb	r3, [r7, #6]
            }
			flashErase_handle.TypeErase = FLASH_TYPEERASE_SECTORS;
 8001264:	2300      	movs	r3, #0
 8001266:	613b      	str	r3, [r7, #16]
			flashErase_handle.Sector = sector_number; // this is the initial sector
 8001268:	79fb      	ldrb	r3, [r7, #7]
 800126a:	61bb      	str	r3, [r7, #24]
			flashErase_handle.NbSectors = number_of_sector;
 800126c:	79bb      	ldrb	r3, [r7, #6]
 800126e:	61fb      	str	r3, [r7, #28]
		}
		flashErase_handle.Banks = FLASH_BANK_1;
 8001270:	2301      	movs	r3, #1
 8001272:	617b      	str	r3, [r7, #20]

		/*Get access to touch the flash registers */
		HAL_FLASH_Unlock();
 8001274:	f000 fc2a 	bl	8001acc <HAL_FLASH_Unlock>
		flashErase_handle.VoltageRange = FLASH_VOLTAGE_RANGE_3;  // our mcu will work on this voltage range
 8001278:	2302      	movs	r3, #2
 800127a:	623b      	str	r3, [r7, #32]
		status = (uint8_t) HAL_FLASHEx_Erase(&flashErase_handle, &sectorError);
 800127c:	f107 020c 	add.w	r2, r7, #12
 8001280:	f107 0310 	add.w	r3, r7, #16
 8001284:	4611      	mov	r1, r2
 8001286:	4618      	mov	r0, r3
 8001288:	f000 fdbe 	bl	8001e08 <HAL_FLASHEx_Erase>
 800128c:	4603      	mov	r3, r0
 800128e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		HAL_FLASH_Lock();
 8001292:	f000 fc3d 	bl	8001b10 <HAL_FLASH_Lock>

		return status;
 8001296:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800129a:	e000      	b.n	800129e <execute_flash_erase+0x86>
	}


	return INVALID_SECTOR;
 800129c:	2304      	movs	r3, #4
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3728      	adds	r7, #40	; 0x28
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <execute_mem_write>:

/*This function writes the contents of pBuffer to  "mem_address" byte by byte */
//Note1 : Currently this function supports writing to Flash only .
//Note2 : This functions does not check whether "mem_address" is a valid address of the flash range.
uint8_t execute_mem_write(uint8_t *pBuffer, uint32_t mem_address, uint32_t len)
{
 80012a6:	b5b0      	push	{r4, r5, r7, lr}
 80012a8:	b086      	sub	sp, #24
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	60f8      	str	r0, [r7, #12]
 80012ae:	60b9      	str	r1, [r7, #8]
 80012b0:	607a      	str	r2, [r7, #4]
    uint8_t status=HAL_OK;
 80012b2:	2300      	movs	r3, #0
 80012b4:	75fb      	strb	r3, [r7, #23]

    //We have to unlock flash module to get control of registers
    HAL_FLASH_Unlock();
 80012b6:	f000 fc09 	bl	8001acc <HAL_FLASH_Unlock>

    for(uint32_t i = 0 ; i <len ; i++)
 80012ba:	2300      	movs	r3, #0
 80012bc:	613b      	str	r3, [r7, #16]
 80012be:	e014      	b.n	80012ea <execute_mem_write+0x44>
    {
        //Here we program the flash byte by byte
        status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE,mem_address+i,pBuffer[i] );
 80012c0:	68ba      	ldr	r2, [r7, #8]
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	18d1      	adds	r1, r2, r3
 80012c6:	68fa      	ldr	r2, [r7, #12]
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	4413      	add	r3, r2
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	2200      	movs	r2, #0
 80012d2:	461c      	mov	r4, r3
 80012d4:	4615      	mov	r5, r2
 80012d6:	4622      	mov	r2, r4
 80012d8:	462b      	mov	r3, r5
 80012da:	2000      	movs	r0, #0
 80012dc:	f000 fba2 	bl	8001a24 <HAL_FLASH_Program>
 80012e0:	4603      	mov	r3, r0
 80012e2:	75fb      	strb	r3, [r7, #23]
    for(uint32_t i = 0 ; i <len ; i++)
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	3301      	adds	r3, #1
 80012e8:	613b      	str	r3, [r7, #16]
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	429a      	cmp	r2, r3
 80012f0:	d3e6      	bcc.n	80012c0 <execute_mem_write+0x1a>
    }

    HAL_FLASH_Lock();
 80012f2:	f000 fc0d 	bl	8001b10 <HAL_FLASH_Lock>

    return status;
 80012f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3718      	adds	r7, #24
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bdb0      	pop	{r4, r5, r7, pc}

08001300 <configure_flash_sector_rw_protection>:
2. Write the desired option value in the FLASH_OPTCR register.
3. Set the option start bit (OPTSTRT) in the FLASH_OPTCR register
4. Wait for the BSY bit to be cleared.
*/
uint8_t configure_flash_sector_rw_protection(uint8_t sector_details, uint8_t protection_mode, uint8_t disable)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	4603      	mov	r3, r0
 8001308:	71fb      	strb	r3, [r7, #7]
 800130a:	460b      	mov	r3, r1
 800130c:	71bb      	strb	r3, [r7, #6]
 800130e:	4613      	mov	r3, r2
 8001310:	717b      	strb	r3, [r7, #5]
    //protection_mode =1 , means write protect of the user flash sectors
    //protection_mode =2, means read/write protect of the user flash sectors
    //According to RM of stm32f446xx TABLE 9, We have to modify the address 0x1FFF C008 bit 15(SPRMOD)

	 //Flash option control register (OPTCR)
    volatile uint32_t *pOPTCR = (uint32_t*) 0x40023C14;
 8001312:	4b44      	ldr	r3, [pc, #272]	; (8001424 <configure_flash_sector_rw_protection+0x124>)
 8001314:	60fb      	str	r3, [r7, #12]

	  if(disable)
 8001316:	797b      	ldrb	r3, [r7, #5]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d025      	beq.n	8001368 <configure_flash_sector_rw_protection+0x68>
		{

			//disable all r/w protection on sectors

			//Option byte configuration unlock
			HAL_FLASH_OB_Unlock();
 800131c:	f000 fc08 	bl	8001b30 <HAL_FLASH_OB_Unlock>

			//wait till no active operation on flash
			while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
 8001320:	bf00      	nop
 8001322:	4b41      	ldr	r3, [pc, #260]	; (8001428 <configure_flash_sector_rw_protection+0x128>)
 8001324:	68db      	ldr	r3, [r3, #12]
 8001326:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800132a:	2b00      	cmp	r3, #0
 800132c:	d1f9      	bne.n	8001322 <configure_flash_sector_rw_protection+0x22>

			//clear the 31st bit (default state)
			//please refer : Flash option control register (FLASH_OPTCR) in RM
			*pOPTCR &= ~(1 << 31);
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	601a      	str	r2, [r3, #0]

			//clear the protection : make all bits belonging to sectors as 1
			*pOPTCR |= (0xFF << 16);
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f443 027f 	orr.w	r2, r3, #16711680	; 0xff0000
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	601a      	str	r2, [r3, #0]

			//Set the option start bit (OPTSTRT) in the FLASH_OPTCR register
			*pOPTCR |= ( 1 << 1);
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f043 0202 	orr.w	r2, r3, #2
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	601a      	str	r2, [r3, #0]

			//wait till no active operation on flash
			while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
 8001352:	bf00      	nop
 8001354:	4b34      	ldr	r3, [pc, #208]	; (8001428 <configure_flash_sector_rw_protection+0x128>)
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800135c:	2b00      	cmp	r3, #0
 800135e:	d1f9      	bne.n	8001354 <configure_flash_sector_rw_protection+0x54>

			HAL_FLASH_OB_Lock();
 8001360:	f000 fc02 	bl	8001b68 <HAL_FLASH_OB_Lock>

			return 0;
 8001364:	2300      	movs	r3, #0
 8001366:	e058      	b.n	800141a <configure_flash_sector_rw_protection+0x11a>

		}

	   if(protection_mode == (uint8_t) 1)
 8001368:	79bb      	ldrb	r3, [r7, #6]
 800136a:	2b01      	cmp	r3, #1
 800136c:	d126      	bne.n	80013bc <configure_flash_sector_rw_protection+0xbc>
    {
           //we are putting write protection on the sectors encoded in sector_details argument

			//Option byte configuration unlock
			HAL_FLASH_OB_Unlock();
 800136e:	f000 fbdf 	bl	8001b30 <HAL_FLASH_OB_Unlock>

			//wait till no active operation on flash
			while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
 8001372:	bf00      	nop
 8001374:	4b2c      	ldr	r3, [pc, #176]	; (8001428 <configure_flash_sector_rw_protection+0x128>)
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800137c:	2b00      	cmp	r3, #0
 800137e:	d1f9      	bne.n	8001374 <configure_flash_sector_rw_protection+0x74>

			//here we are setting just write protection for the sectors
			//clear the 31st bit
			//please refer : Flash option control register (FLASH_OPTCR) in RM
			*pOPTCR &= ~(1 << 31);
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	601a      	str	r2, [r3, #0]

			//put write protection on sectors
			*pOPTCR &= ~ (sector_details << 16);
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	79fa      	ldrb	r2, [r7, #7]
 8001392:	0412      	lsls	r2, r2, #16
 8001394:	43d2      	mvns	r2, r2
 8001396:	401a      	ands	r2, r3
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	601a      	str	r2, [r3, #0]

			//Set the option start bit (OPTSTRT) in the FLASH_OPTCR register
			*pOPTCR |= ( 1 << 1);
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f043 0202 	orr.w	r2, r3, #2
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	601a      	str	r2, [r3, #0]

			//wait till no active operation on flash
			while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
 80013a8:	bf00      	nop
 80013aa:	4b1f      	ldr	r3, [pc, #124]	; (8001428 <configure_flash_sector_rw_protection+0x128>)
 80013ac:	68db      	ldr	r3, [r3, #12]
 80013ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d1f9      	bne.n	80013aa <configure_flash_sector_rw_protection+0xaa>

			HAL_FLASH_OB_Lock();
 80013b6:	f000 fbd7 	bl	8001b68 <HAL_FLASH_OB_Lock>
 80013ba:	e02d      	b.n	8001418 <configure_flash_sector_rw_protection+0x118>
		}

		else if (protection_mode == (uint8_t) 2)
 80013bc:	79bb      	ldrb	r3, [r7, #6]
 80013be:	2b02      	cmp	r3, #2
 80013c0:	d12a      	bne.n	8001418 <configure_flash_sector_rw_protection+0x118>
    {
	  	//Option byte configuration unlock
			HAL_FLASH_OB_Unlock();
 80013c2:	f000 fbb5 	bl	8001b30 <HAL_FLASH_OB_Unlock>

			//wait till no active operation on flash
			while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
 80013c6:	bf00      	nop
 80013c8:	4b17      	ldr	r3, [pc, #92]	; (8001428 <configure_flash_sector_rw_protection+0x128>)
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d1f9      	bne.n	80013c8 <configure_flash_sector_rw_protection+0xc8>

			//here wer are setting read and write protection for the sectors
			//set the 31st bit
			//please refer : Flash option control register (FLASH_OPTCR) in RM
			*pOPTCR |= (1 << 31);
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	601a      	str	r2, [r3, #0]

			//put read and write protection on sectors
            *pOPTCR &= ~(0xff << 16);
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	601a      	str	r2, [r3, #0]
			*pOPTCR |= (sector_details << 16);
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	79fa      	ldrb	r2, [r7, #7]
 80013f2:	0412      	lsls	r2, r2, #16
 80013f4:	431a      	orrs	r2, r3
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	601a      	str	r2, [r3, #0]

			//Set the option start bit (OPTSTRT) in the FLASH_OPTCR register
			*pOPTCR |= ( 1 << 1);
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f043 0202 	orr.w	r2, r3, #2
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	601a      	str	r2, [r3, #0]

			//wait till no active operation on flash
			while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
 8001406:	bf00      	nop
 8001408:	4b07      	ldr	r3, [pc, #28]	; (8001428 <configure_flash_sector_rw_protection+0x128>)
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001410:	2b00      	cmp	r3, #0
 8001412:	d1f9      	bne.n	8001408 <configure_flash_sector_rw_protection+0x108>

			HAL_FLASH_OB_Lock();
 8001414:	f000 fba8 	bl	8001b68 <HAL_FLASH_OB_Lock>
    }

		return 0;
 8001418:	2300      	movs	r3, #0
}
 800141a:	4618      	mov	r0, r3
 800141c:	3710      	adds	r7, #16
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	40023c14 	.word	0x40023c14
 8001428:	40023c00 	.word	0x40023c00

0800142c <read_OB_rw_protection_status>:

uint16_t read_OB_rw_protection_status(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b088      	sub	sp, #32
 8001430:	af00      	add	r7, sp, #0
    //This structure is given by ST Flash driver to hold the OB(Option Byte) contents .
	FLASH_OBProgramInitTypeDef OBInit;

	//First unlock the OB(Option Byte) memory access
	HAL_FLASH_OB_Unlock();
 8001432:	f000 fb7d 	bl	8001b30 <HAL_FLASH_OB_Unlock>
	//get the OB configuration details
	HAL_FLASHEx_OBGetConfig(&OBInit);
 8001436:	1d3b      	adds	r3, r7, #4
 8001438:	4618      	mov	r0, r3
 800143a:	f000 fd55 	bl	8001ee8 <HAL_FLASHEx_OBGetConfig>
	//Lock back .
	HAL_FLASH_Lock();
 800143e:	f000 fb67 	bl	8001b10 <HAL_FLASH_Lock>

	//We are just interested in r/w protection status of the sectors.
	return (uint16_t)OBInit.WRPSector;
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	b29b      	uxth	r3, r3

}
 8001446:	4618      	mov	r0, r3
 8001448:	3720      	adds	r7, #32
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
	...

08001450 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001456:	2300      	movs	r3, #0
 8001458:	607b      	str	r3, [r7, #4]
 800145a:	4b10      	ldr	r3, [pc, #64]	; (800149c <HAL_MspInit+0x4c>)
 800145c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800145e:	4a0f      	ldr	r2, [pc, #60]	; (800149c <HAL_MspInit+0x4c>)
 8001460:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001464:	6453      	str	r3, [r2, #68]	; 0x44
 8001466:	4b0d      	ldr	r3, [pc, #52]	; (800149c <HAL_MspInit+0x4c>)
 8001468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800146e:	607b      	str	r3, [r7, #4]
 8001470:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	603b      	str	r3, [r7, #0]
 8001476:	4b09      	ldr	r3, [pc, #36]	; (800149c <HAL_MspInit+0x4c>)
 8001478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147a:	4a08      	ldr	r2, [pc, #32]	; (800149c <HAL_MspInit+0x4c>)
 800147c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001480:	6413      	str	r3, [r2, #64]	; 0x40
 8001482:	4b06      	ldr	r3, [pc, #24]	; (800149c <HAL_MspInit+0x4c>)
 8001484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800148a:	603b      	str	r3, [r7, #0]
 800148c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800148e:	2007      	movs	r0, #7
 8001490:	f000 fa30 	bl	80018f4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001494:	bf00      	nop
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	40023800 	.word	0x40023800

080014a0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b085      	sub	sp, #20
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a0b      	ldr	r2, [pc, #44]	; (80014dc <HAL_CRC_MspInit+0x3c>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d10d      	bne.n	80014ce <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	60fb      	str	r3, [r7, #12]
 80014b6:	4b0a      	ldr	r3, [pc, #40]	; (80014e0 <HAL_CRC_MspInit+0x40>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	4a09      	ldr	r2, [pc, #36]	; (80014e0 <HAL_CRC_MspInit+0x40>)
 80014bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014c0:	6313      	str	r3, [r2, #48]	; 0x30
 80014c2:	4b07      	ldr	r3, [pc, #28]	; (80014e0 <HAL_CRC_MspInit+0x40>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014ca:	60fb      	str	r3, [r7, #12]
 80014cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80014ce:	bf00      	nop
 80014d0:	3714      	adds	r7, #20
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	40023000 	.word	0x40023000
 80014e0:	40023800 	.word	0x40023800

080014e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b08c      	sub	sp, #48	; 0x30
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ec:	f107 031c 	add.w	r3, r7, #28
 80014f0:	2200      	movs	r2, #0
 80014f2:	601a      	str	r2, [r3, #0]
 80014f4:	605a      	str	r2, [r3, #4]
 80014f6:	609a      	str	r2, [r3, #8]
 80014f8:	60da      	str	r2, [r3, #12]
 80014fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a32      	ldr	r2, [pc, #200]	; (80015cc <HAL_UART_MspInit+0xe8>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d12c      	bne.n	8001560 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	61bb      	str	r3, [r7, #24]
 800150a:	4b31      	ldr	r3, [pc, #196]	; (80015d0 <HAL_UART_MspInit+0xec>)
 800150c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150e:	4a30      	ldr	r2, [pc, #192]	; (80015d0 <HAL_UART_MspInit+0xec>)
 8001510:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001514:	6413      	str	r3, [r2, #64]	; 0x40
 8001516:	4b2e      	ldr	r3, [pc, #184]	; (80015d0 <HAL_UART_MspInit+0xec>)
 8001518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800151e:	61bb      	str	r3, [r7, #24]
 8001520:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	617b      	str	r3, [r7, #20]
 8001526:	4b2a      	ldr	r3, [pc, #168]	; (80015d0 <HAL_UART_MspInit+0xec>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	4a29      	ldr	r2, [pc, #164]	; (80015d0 <HAL_UART_MspInit+0xec>)
 800152c:	f043 0301 	orr.w	r3, r3, #1
 8001530:	6313      	str	r3, [r2, #48]	; 0x30
 8001532:	4b27      	ldr	r3, [pc, #156]	; (80015d0 <HAL_UART_MspInit+0xec>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	f003 0301 	and.w	r3, r3, #1
 800153a:	617b      	str	r3, [r7, #20]
 800153c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800153e:	230c      	movs	r3, #12
 8001540:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001542:	2302      	movs	r3, #2
 8001544:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001546:	2300      	movs	r3, #0
 8001548:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800154a:	2303      	movs	r3, #3
 800154c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800154e:	2307      	movs	r3, #7
 8001550:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001552:	f107 031c 	add.w	r3, r7, #28
 8001556:	4619      	mov	r1, r3
 8001558:	481e      	ldr	r0, [pc, #120]	; (80015d4 <HAL_UART_MspInit+0xf0>)
 800155a:	f000 fde7 	bl	800212c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800155e:	e031      	b.n	80015c4 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART3)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a1c      	ldr	r2, [pc, #112]	; (80015d8 <HAL_UART_MspInit+0xf4>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d12c      	bne.n	80015c4 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART3_CLK_ENABLE();
 800156a:	2300      	movs	r3, #0
 800156c:	613b      	str	r3, [r7, #16]
 800156e:	4b18      	ldr	r3, [pc, #96]	; (80015d0 <HAL_UART_MspInit+0xec>)
 8001570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001572:	4a17      	ldr	r2, [pc, #92]	; (80015d0 <HAL_UART_MspInit+0xec>)
 8001574:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001578:	6413      	str	r3, [r2, #64]	; 0x40
 800157a:	4b15      	ldr	r3, [pc, #84]	; (80015d0 <HAL_UART_MspInit+0xec>)
 800157c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001582:	613b      	str	r3, [r7, #16]
 8001584:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001586:	2300      	movs	r3, #0
 8001588:	60fb      	str	r3, [r7, #12]
 800158a:	4b11      	ldr	r3, [pc, #68]	; (80015d0 <HAL_UART_MspInit+0xec>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	4a10      	ldr	r2, [pc, #64]	; (80015d0 <HAL_UART_MspInit+0xec>)
 8001590:	f043 0304 	orr.w	r3, r3, #4
 8001594:	6313      	str	r3, [r2, #48]	; 0x30
 8001596:	4b0e      	ldr	r3, [pc, #56]	; (80015d0 <HAL_UART_MspInit+0xec>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	f003 0304 	and.w	r3, r3, #4
 800159e:	60fb      	str	r3, [r7, #12]
 80015a0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80015a2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80015a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a8:	2302      	movs	r3, #2
 80015aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ac:	2300      	movs	r3, #0
 80015ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b0:	2303      	movs	r3, #3
 80015b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015b4:	2307      	movs	r3, #7
 80015b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015b8:	f107 031c 	add.w	r3, r7, #28
 80015bc:	4619      	mov	r1, r3
 80015be:	4807      	ldr	r0, [pc, #28]	; (80015dc <HAL_UART_MspInit+0xf8>)
 80015c0:	f000 fdb4 	bl	800212c <HAL_GPIO_Init>
}
 80015c4:	bf00      	nop
 80015c6:	3730      	adds	r7, #48	; 0x30
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	40004400 	.word	0x40004400
 80015d0:	40023800 	.word	0x40023800
 80015d4:	40020000 	.word	0x40020000
 80015d8:	40004800 	.word	0x40004800
 80015dc:	40020800 	.word	0x40020800

080015e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015e4:	e7fe      	b.n	80015e4 <NMI_Handler+0x4>

080015e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015e6:	b480      	push	{r7}
 80015e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ea:	e7fe      	b.n	80015ea <HardFault_Handler+0x4>

080015ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015f0:	e7fe      	b.n	80015f0 <MemManage_Handler+0x4>

080015f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015f2:	b480      	push	{r7}
 80015f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015f6:	e7fe      	b.n	80015f6 <BusFault_Handler+0x4>

080015f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015fc:	e7fe      	b.n	80015fc <UsageFault_Handler+0x4>

080015fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015fe:	b480      	push	{r7}
 8001600:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001602:	bf00      	nop
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr

0800160c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001610:	bf00      	nop
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr

0800161a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800161a:	b480      	push	{r7}
 800161c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800161e:	bf00      	nop
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800162c:	f000 f890 	bl	8001750 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001630:	bf00      	nop
 8001632:	bd80      	pop	{r7, pc}

08001634 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001638:	4b06      	ldr	r3, [pc, #24]	; (8001654 <SystemInit+0x20>)
 800163a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800163e:	4a05      	ldr	r2, [pc, #20]	; (8001654 <SystemInit+0x20>)
 8001640:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001644:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001648:	bf00      	nop
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	e000ed00 	.word	0xe000ed00

08001658 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001658:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001690 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800165c:	480d      	ldr	r0, [pc, #52]	; (8001694 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800165e:	490e      	ldr	r1, [pc, #56]	; (8001698 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001660:	4a0e      	ldr	r2, [pc, #56]	; (800169c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001662:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001664:	e002      	b.n	800166c <LoopCopyDataInit>

08001666 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001666:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001668:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800166a:	3304      	adds	r3, #4

0800166c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800166c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800166e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001670:	d3f9      	bcc.n	8001666 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001672:	4a0b      	ldr	r2, [pc, #44]	; (80016a0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001674:	4c0b      	ldr	r4, [pc, #44]	; (80016a4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001676:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001678:	e001      	b.n	800167e <LoopFillZerobss>

0800167a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800167a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800167c:	3204      	adds	r2, #4

0800167e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800167e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001680:	d3fb      	bcc.n	800167a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001682:	f7ff ffd7 	bl	8001634 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001686:	f002 f963 	bl	8003950 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800168a:	f7fe ff3d 	bl	8000508 <main>
  bx  lr    
 800168e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001690:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001694:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001698:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 800169c:	08003f04 	.word	0x08003f04
  ldr r2, =_sbss
 80016a0:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80016a4:	200001ac 	.word	0x200001ac

080016a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016a8:	e7fe      	b.n	80016a8 <ADC_IRQHandler>
	...

080016ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016b0:	4b0e      	ldr	r3, [pc, #56]	; (80016ec <HAL_Init+0x40>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a0d      	ldr	r2, [pc, #52]	; (80016ec <HAL_Init+0x40>)
 80016b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016bc:	4b0b      	ldr	r3, [pc, #44]	; (80016ec <HAL_Init+0x40>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a0a      	ldr	r2, [pc, #40]	; (80016ec <HAL_Init+0x40>)
 80016c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016c8:	4b08      	ldr	r3, [pc, #32]	; (80016ec <HAL_Init+0x40>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a07      	ldr	r2, [pc, #28]	; (80016ec <HAL_Init+0x40>)
 80016ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016d4:	2003      	movs	r0, #3
 80016d6:	f000 f90d 	bl	80018f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016da:	2000      	movs	r0, #0
 80016dc:	f000 f808 	bl	80016f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016e0:	f7ff feb6 	bl	8001450 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016e4:	2300      	movs	r3, #0
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	40023c00 	.word	0x40023c00

080016f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016f8:	4b12      	ldr	r3, [pc, #72]	; (8001744 <HAL_InitTick+0x54>)
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	4b12      	ldr	r3, [pc, #72]	; (8001748 <HAL_InitTick+0x58>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	4619      	mov	r1, r3
 8001702:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001706:	fbb3 f3f1 	udiv	r3, r3, r1
 800170a:	fbb2 f3f3 	udiv	r3, r2, r3
 800170e:	4618      	mov	r0, r3
 8001710:	f000 f917 	bl	8001942 <HAL_SYSTICK_Config>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e00e      	b.n	800173c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2b0f      	cmp	r3, #15
 8001722:	d80a      	bhi.n	800173a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001724:	2200      	movs	r2, #0
 8001726:	6879      	ldr	r1, [r7, #4]
 8001728:	f04f 30ff 	mov.w	r0, #4294967295
 800172c:	f000 f8ed 	bl	800190a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001730:	4a06      	ldr	r2, [pc, #24]	; (800174c <HAL_InitTick+0x5c>)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001736:	2300      	movs	r3, #0
 8001738:	e000      	b.n	800173c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
}
 800173c:	4618      	mov	r0, r3
 800173e:	3708      	adds	r7, #8
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	20000008 	.word	0x20000008
 8001748:	20000010 	.word	0x20000010
 800174c:	2000000c 	.word	0x2000000c

08001750 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001754:	4b06      	ldr	r3, [pc, #24]	; (8001770 <HAL_IncTick+0x20>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	461a      	mov	r2, r3
 800175a:	4b06      	ldr	r3, [pc, #24]	; (8001774 <HAL_IncTick+0x24>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4413      	add	r3, r2
 8001760:	4a04      	ldr	r2, [pc, #16]	; (8001774 <HAL_IncTick+0x24>)
 8001762:	6013      	str	r3, [r2, #0]
}
 8001764:	bf00      	nop
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	20000010 	.word	0x20000010
 8001774:	20000188 	.word	0x20000188

08001778 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  return uwTick;
 800177c:	4b03      	ldr	r3, [pc, #12]	; (800178c <HAL_GetTick+0x14>)
 800177e:	681b      	ldr	r3, [r3, #0]
}
 8001780:	4618      	mov	r0, r3
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	20000188 	.word	0x20000188

08001790 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001790:	b480      	push	{r7}
 8001792:	b085      	sub	sp, #20
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	f003 0307 	and.w	r3, r3, #7
 800179e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017a0:	4b0c      	ldr	r3, [pc, #48]	; (80017d4 <__NVIC_SetPriorityGrouping+0x44>)
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017a6:	68ba      	ldr	r2, [r7, #8]
 80017a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017ac:	4013      	ands	r3, r2
 80017ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017c2:	4a04      	ldr	r2, [pc, #16]	; (80017d4 <__NVIC_SetPriorityGrouping+0x44>)
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	60d3      	str	r3, [r2, #12]
}
 80017c8:	bf00      	nop
 80017ca:	3714      	adds	r7, #20
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr
 80017d4:	e000ed00 	.word	0xe000ed00

080017d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017dc:	4b04      	ldr	r3, [pc, #16]	; (80017f0 <__NVIC_GetPriorityGrouping+0x18>)
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	0a1b      	lsrs	r3, r3, #8
 80017e2:	f003 0307 	and.w	r3, r3, #7
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr
 80017f0:	e000ed00 	.word	0xe000ed00

080017f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	4603      	mov	r3, r0
 80017fc:	6039      	str	r1, [r7, #0]
 80017fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001800:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001804:	2b00      	cmp	r3, #0
 8001806:	db0a      	blt.n	800181e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	b2da      	uxtb	r2, r3
 800180c:	490c      	ldr	r1, [pc, #48]	; (8001840 <__NVIC_SetPriority+0x4c>)
 800180e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001812:	0112      	lsls	r2, r2, #4
 8001814:	b2d2      	uxtb	r2, r2
 8001816:	440b      	add	r3, r1
 8001818:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800181c:	e00a      	b.n	8001834 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	b2da      	uxtb	r2, r3
 8001822:	4908      	ldr	r1, [pc, #32]	; (8001844 <__NVIC_SetPriority+0x50>)
 8001824:	79fb      	ldrb	r3, [r7, #7]
 8001826:	f003 030f 	and.w	r3, r3, #15
 800182a:	3b04      	subs	r3, #4
 800182c:	0112      	lsls	r2, r2, #4
 800182e:	b2d2      	uxtb	r2, r2
 8001830:	440b      	add	r3, r1
 8001832:	761a      	strb	r2, [r3, #24]
}
 8001834:	bf00      	nop
 8001836:	370c      	adds	r7, #12
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr
 8001840:	e000e100 	.word	0xe000e100
 8001844:	e000ed00 	.word	0xe000ed00

08001848 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001848:	b480      	push	{r7}
 800184a:	b089      	sub	sp, #36	; 0x24
 800184c:	af00      	add	r7, sp, #0
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	60b9      	str	r1, [r7, #8]
 8001852:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	f003 0307 	and.w	r3, r3, #7
 800185a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	f1c3 0307 	rsb	r3, r3, #7
 8001862:	2b04      	cmp	r3, #4
 8001864:	bf28      	it	cs
 8001866:	2304      	movcs	r3, #4
 8001868:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	3304      	adds	r3, #4
 800186e:	2b06      	cmp	r3, #6
 8001870:	d902      	bls.n	8001878 <NVIC_EncodePriority+0x30>
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	3b03      	subs	r3, #3
 8001876:	e000      	b.n	800187a <NVIC_EncodePriority+0x32>
 8001878:	2300      	movs	r3, #0
 800187a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800187c:	f04f 32ff 	mov.w	r2, #4294967295
 8001880:	69bb      	ldr	r3, [r7, #24]
 8001882:	fa02 f303 	lsl.w	r3, r2, r3
 8001886:	43da      	mvns	r2, r3
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	401a      	ands	r2, r3
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001890:	f04f 31ff 	mov.w	r1, #4294967295
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	fa01 f303 	lsl.w	r3, r1, r3
 800189a:	43d9      	mvns	r1, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a0:	4313      	orrs	r3, r2
         );
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3724      	adds	r7, #36	; 0x24
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
	...

080018b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	3b01      	subs	r3, #1
 80018bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018c0:	d301      	bcc.n	80018c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018c2:	2301      	movs	r3, #1
 80018c4:	e00f      	b.n	80018e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018c6:	4a0a      	ldr	r2, [pc, #40]	; (80018f0 <SysTick_Config+0x40>)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	3b01      	subs	r3, #1
 80018cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018ce:	210f      	movs	r1, #15
 80018d0:	f04f 30ff 	mov.w	r0, #4294967295
 80018d4:	f7ff ff8e 	bl	80017f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018d8:	4b05      	ldr	r3, [pc, #20]	; (80018f0 <SysTick_Config+0x40>)
 80018da:	2200      	movs	r2, #0
 80018dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018de:	4b04      	ldr	r3, [pc, #16]	; (80018f0 <SysTick_Config+0x40>)
 80018e0:	2207      	movs	r2, #7
 80018e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018e4:	2300      	movs	r3, #0
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	e000e010 	.word	0xe000e010

080018f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	f7ff ff47 	bl	8001790 <__NVIC_SetPriorityGrouping>
}
 8001902:	bf00      	nop
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}

0800190a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800190a:	b580      	push	{r7, lr}
 800190c:	b086      	sub	sp, #24
 800190e:	af00      	add	r7, sp, #0
 8001910:	4603      	mov	r3, r0
 8001912:	60b9      	str	r1, [r7, #8]
 8001914:	607a      	str	r2, [r7, #4]
 8001916:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001918:	2300      	movs	r3, #0
 800191a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800191c:	f7ff ff5c 	bl	80017d8 <__NVIC_GetPriorityGrouping>
 8001920:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	68b9      	ldr	r1, [r7, #8]
 8001926:	6978      	ldr	r0, [r7, #20]
 8001928:	f7ff ff8e 	bl	8001848 <NVIC_EncodePriority>
 800192c:	4602      	mov	r2, r0
 800192e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001932:	4611      	mov	r1, r2
 8001934:	4618      	mov	r0, r3
 8001936:	f7ff ff5d 	bl	80017f4 <__NVIC_SetPriority>
}
 800193a:	bf00      	nop
 800193c:	3718      	adds	r7, #24
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}

08001942 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001942:	b580      	push	{r7, lr}
 8001944:	b082      	sub	sp, #8
 8001946:	af00      	add	r7, sp, #0
 8001948:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f7ff ffb0 	bl	80018b0 <SysTick_Config>
 8001950:	4603      	mov	r3, r0
}
 8001952:	4618      	mov	r0, r3
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
	...

0800195c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2b04      	cmp	r3, #4
 8001968:	d106      	bne.n	8001978 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800196a:	4b09      	ldr	r3, [pc, #36]	; (8001990 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a08      	ldr	r2, [pc, #32]	; (8001990 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001970:	f043 0304 	orr.w	r3, r3, #4
 8001974:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8001976:	e005      	b.n	8001984 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001978:	4b05      	ldr	r3, [pc, #20]	; (8001990 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a04      	ldr	r2, [pc, #16]	; (8001990 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800197e:	f023 0304 	bic.w	r3, r3, #4
 8001982:	6013      	str	r3, [r2, #0]
}
 8001984:	bf00      	nop
 8001986:	370c      	adds	r7, #12
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr
 8001990:	e000e010 	.word	0xe000e010

08001994 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d101      	bne.n	80019a6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e00e      	b.n	80019c4 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	795b      	ldrb	r3, [r3, #5]
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d105      	bne.n	80019bc <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2200      	movs	r2, #0
 80019b4:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f7ff fd72 	bl	80014a0 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2201      	movs	r2, #1
 80019c0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80019c2:	2300      	movs	r3, #0
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3708      	adds	r7, #8
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}

080019cc <HAL_CRC_Accumulate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b087      	sub	sp, #28
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	60f8      	str	r0, [r7, #12]
 80019d4:	60b9      	str	r1, [r7, #8]
 80019d6:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80019d8:	2300      	movs	r3, #0
 80019da:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	2202      	movs	r2, #2
 80019e0:	715a      	strb	r2, [r3, #5]

  /* Enter Data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 80019e2:	2300      	movs	r3, #0
 80019e4:	617b      	str	r3, [r7, #20]
 80019e6:	e00a      	b.n	80019fe <HAL_CRC_Accumulate+0x32>
  {
    hcrc->Instance->DR = pBuffer[index];
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	68ba      	ldr	r2, [r7, #8]
 80019ee:	441a      	add	r2, r3
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	6812      	ldr	r2, [r2, #0]
 80019f6:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	3301      	adds	r3, #1
 80019fc:	617b      	str	r3, [r7, #20]
 80019fe:	697a      	ldr	r2, [r7, #20]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	429a      	cmp	r2, r3
 8001a04:	d3f0      	bcc.n	80019e8 <HAL_CRC_Accumulate+0x1c>
  }
  temp = hcrc->Instance->DR;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	2201      	movs	r2, #1
 8001a12:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8001a14:	693b      	ldr	r3, [r7, #16]
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	371c      	adds	r7, #28
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
	...

08001a24 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b086      	sub	sp, #24
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	60f8      	str	r0, [r7, #12]
 8001a2c:	60b9      	str	r1, [r7, #8]
 8001a2e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001a36:	4b23      	ldr	r3, [pc, #140]	; (8001ac4 <HAL_FLASH_Program+0xa0>)
 8001a38:	7e1b      	ldrb	r3, [r3, #24]
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d101      	bne.n	8001a42 <HAL_FLASH_Program+0x1e>
 8001a3e:	2302      	movs	r3, #2
 8001a40:	e03b      	b.n	8001aba <HAL_FLASH_Program+0x96>
 8001a42:	4b20      	ldr	r3, [pc, #128]	; (8001ac4 <HAL_FLASH_Program+0xa0>)
 8001a44:	2201      	movs	r2, #1
 8001a46:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001a48:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001a4c:	f000 f89c 	bl	8001b88 <FLASH_WaitForLastOperation>
 8001a50:	4603      	mov	r3, r0
 8001a52:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001a54:	7dfb      	ldrb	r3, [r7, #23]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d12b      	bne.n	8001ab2 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d105      	bne.n	8001a6c <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001a60:	783b      	ldrb	r3, [r7, #0]
 8001a62:	4619      	mov	r1, r3
 8001a64:	68b8      	ldr	r0, [r7, #8]
 8001a66:	f000 f947 	bl	8001cf8 <FLASH_Program_Byte>
 8001a6a:	e016      	b.n	8001a9a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d105      	bne.n	8001a7e <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001a72:	883b      	ldrh	r3, [r7, #0]
 8001a74:	4619      	mov	r1, r3
 8001a76:	68b8      	ldr	r0, [r7, #8]
 8001a78:	f000 f91a 	bl	8001cb0 <FLASH_Program_HalfWord>
 8001a7c:	e00d      	b.n	8001a9a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	d105      	bne.n	8001a90 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	4619      	mov	r1, r3
 8001a88:	68b8      	ldr	r0, [r7, #8]
 8001a8a:	f000 f8ef 	bl	8001c6c <FLASH_Program_Word>
 8001a8e:	e004      	b.n	8001a9a <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001a90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a94:	68b8      	ldr	r0, [r7, #8]
 8001a96:	f000 f8b7 	bl	8001c08 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001a9a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001a9e:	f000 f873 	bl	8001b88 <FLASH_WaitForLastOperation>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8001aa6:	4b08      	ldr	r3, [pc, #32]	; (8001ac8 <HAL_FLASH_Program+0xa4>)
 8001aa8:	691b      	ldr	r3, [r3, #16]
 8001aaa:	4a07      	ldr	r2, [pc, #28]	; (8001ac8 <HAL_FLASH_Program+0xa4>)
 8001aac:	f023 0301 	bic.w	r3, r3, #1
 8001ab0:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001ab2:	4b04      	ldr	r3, [pc, #16]	; (8001ac4 <HAL_FLASH_Program+0xa0>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	761a      	strb	r2, [r3, #24]
  
  return status;
 8001ab8:	7dfb      	ldrb	r3, [r7, #23]
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3718      	adds	r7, #24
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	2000018c 	.word	0x2000018c
 8001ac8:	40023c00 	.word	0x40023c00

08001acc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001ad6:	4b0b      	ldr	r3, [pc, #44]	; (8001b04 <HAL_FLASH_Unlock+0x38>)
 8001ad8:	691b      	ldr	r3, [r3, #16]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	da0b      	bge.n	8001af6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001ade:	4b09      	ldr	r3, [pc, #36]	; (8001b04 <HAL_FLASH_Unlock+0x38>)
 8001ae0:	4a09      	ldr	r2, [pc, #36]	; (8001b08 <HAL_FLASH_Unlock+0x3c>)
 8001ae2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001ae4:	4b07      	ldr	r3, [pc, #28]	; (8001b04 <HAL_FLASH_Unlock+0x38>)
 8001ae6:	4a09      	ldr	r2, [pc, #36]	; (8001b0c <HAL_FLASH_Unlock+0x40>)
 8001ae8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001aea:	4b06      	ldr	r3, [pc, #24]	; (8001b04 <HAL_FLASH_Unlock+0x38>)
 8001aec:	691b      	ldr	r3, [r3, #16]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	da01      	bge.n	8001af6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001af6:	79fb      	ldrb	r3, [r7, #7]
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr
 8001b04:	40023c00 	.word	0x40023c00
 8001b08:	45670123 	.word	0x45670123
 8001b0c:	cdef89ab 	.word	0xcdef89ab

08001b10 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001b14:	4b05      	ldr	r3, [pc, #20]	; (8001b2c <HAL_FLASH_Lock+0x1c>)
 8001b16:	691b      	ldr	r3, [r3, #16]
 8001b18:	4a04      	ldr	r2, [pc, #16]	; (8001b2c <HAL_FLASH_Lock+0x1c>)
 8001b1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001b1e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001b20:	2300      	movs	r3, #0
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr
 8001b2c:	40023c00 	.word	0x40023c00

08001b30 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 8001b34:	4b09      	ldr	r3, [pc, #36]	; (8001b5c <HAL_FLASH_OB_Unlock+0x2c>)
 8001b36:	695b      	ldr	r3, [r3, #20]
 8001b38:	f003 0301 	and.w	r3, r3, #1
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d007      	beq.n	8001b50 <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 8001b40:	4b06      	ldr	r3, [pc, #24]	; (8001b5c <HAL_FLASH_OB_Unlock+0x2c>)
 8001b42:	4a07      	ldr	r2, [pc, #28]	; (8001b60 <HAL_FLASH_OB_Unlock+0x30>)
 8001b44:	609a      	str	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 8001b46:	4b05      	ldr	r3, [pc, #20]	; (8001b5c <HAL_FLASH_OB_Unlock+0x2c>)
 8001b48:	4a06      	ldr	r2, [pc, #24]	; (8001b64 <HAL_FLASH_OB_Unlock+0x34>)
 8001b4a:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	e000      	b.n	8001b52 <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr
 8001b5c:	40023c00 	.word	0x40023c00
 8001b60:	08192a3b 	.word	0x08192a3b
 8001b64:	4c5d6e7f 	.word	0x4c5d6e7f

08001b68 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status 
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8001b6c:	4b05      	ldr	r3, [pc, #20]	; (8001b84 <HAL_FLASH_OB_Lock+0x1c>)
 8001b6e:	695b      	ldr	r3, [r3, #20]
 8001b70:	4a04      	ldr	r2, [pc, #16]	; (8001b84 <HAL_FLASH_OB_Lock+0x1c>)
 8001b72:	f043 0301 	orr.w	r3, r3, #1
 8001b76:	6153      	str	r3, [r2, #20]
  
  return HAL_OK;  
 8001b78:	2300      	movs	r3, #0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr
 8001b84:	40023c00 	.word	0x40023c00

08001b88 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b90:	2300      	movs	r3, #0
 8001b92:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001b94:	4b1a      	ldr	r3, [pc, #104]	; (8001c00 <FLASH_WaitForLastOperation+0x78>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001b9a:	f7ff fded 	bl	8001778 <HAL_GetTick>
 8001b9e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001ba0:	e010      	b.n	8001bc4 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ba8:	d00c      	beq.n	8001bc4 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d007      	beq.n	8001bc0 <FLASH_WaitForLastOperation+0x38>
 8001bb0:	f7ff fde2 	bl	8001778 <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d201      	bcs.n	8001bc4 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	e019      	b.n	8001bf8 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001bc4:	4b0f      	ldr	r3, [pc, #60]	; (8001c04 <FLASH_WaitForLastOperation+0x7c>)
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d1e8      	bne.n	8001ba2 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001bd0:	4b0c      	ldr	r3, [pc, #48]	; (8001c04 <FLASH_WaitForLastOperation+0x7c>)
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	f003 0301 	and.w	r3, r3, #1
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d002      	beq.n	8001be2 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001bdc:	4b09      	ldr	r3, [pc, #36]	; (8001c04 <FLASH_WaitForLastOperation+0x7c>)
 8001bde:	2201      	movs	r2, #1
 8001be0:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001be2:	4b08      	ldr	r3, [pc, #32]	; (8001c04 <FLASH_WaitForLastOperation+0x7c>)
 8001be4:	68db      	ldr	r3, [r3, #12]
 8001be6:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d003      	beq.n	8001bf6 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001bee:	f000 f8a5 	bl	8001d3c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e000      	b.n	8001bf8 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001bf6:	2300      	movs	r3, #0
  
}  
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3710      	adds	r7, #16
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	2000018c 	.word	0x2000018c
 8001c04:	40023c00 	.word	0x40023c00

08001c08 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b085      	sub	sp, #20
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	60f8      	str	r0, [r7, #12]
 8001c10:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001c14:	4b14      	ldr	r3, [pc, #80]	; (8001c68 <FLASH_Program_DoubleWord+0x60>)
 8001c16:	691b      	ldr	r3, [r3, #16]
 8001c18:	4a13      	ldr	r2, [pc, #76]	; (8001c68 <FLASH_Program_DoubleWord+0x60>)
 8001c1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c1e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001c20:	4b11      	ldr	r3, [pc, #68]	; (8001c68 <FLASH_Program_DoubleWord+0x60>)
 8001c22:	691b      	ldr	r3, [r3, #16]
 8001c24:	4a10      	ldr	r2, [pc, #64]	; (8001c68 <FLASH_Program_DoubleWord+0x60>)
 8001c26:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001c2a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001c2c:	4b0e      	ldr	r3, [pc, #56]	; (8001c68 <FLASH_Program_DoubleWord+0x60>)
 8001c2e:	691b      	ldr	r3, [r3, #16]
 8001c30:	4a0d      	ldr	r2, [pc, #52]	; (8001c68 <FLASH_Program_DoubleWord+0x60>)
 8001c32:	f043 0301 	orr.w	r3, r3, #1
 8001c36:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	683a      	ldr	r2, [r7, #0]
 8001c3c:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8001c3e:	f3bf 8f6f 	isb	sy
}
 8001c42:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001c44:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001c48:	f04f 0200 	mov.w	r2, #0
 8001c4c:	f04f 0300 	mov.w	r3, #0
 8001c50:	000a      	movs	r2, r1
 8001c52:	2300      	movs	r3, #0
 8001c54:	68f9      	ldr	r1, [r7, #12]
 8001c56:	3104      	adds	r1, #4
 8001c58:	4613      	mov	r3, r2
 8001c5a:	600b      	str	r3, [r1, #0]
}
 8001c5c:	bf00      	nop
 8001c5e:	3714      	adds	r7, #20
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr
 8001c68:	40023c00 	.word	0x40023c00

08001c6c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001c76:	4b0d      	ldr	r3, [pc, #52]	; (8001cac <FLASH_Program_Word+0x40>)
 8001c78:	691b      	ldr	r3, [r3, #16]
 8001c7a:	4a0c      	ldr	r2, [pc, #48]	; (8001cac <FLASH_Program_Word+0x40>)
 8001c7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c80:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001c82:	4b0a      	ldr	r3, [pc, #40]	; (8001cac <FLASH_Program_Word+0x40>)
 8001c84:	691b      	ldr	r3, [r3, #16]
 8001c86:	4a09      	ldr	r2, [pc, #36]	; (8001cac <FLASH_Program_Word+0x40>)
 8001c88:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c8c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001c8e:	4b07      	ldr	r3, [pc, #28]	; (8001cac <FLASH_Program_Word+0x40>)
 8001c90:	691b      	ldr	r3, [r3, #16]
 8001c92:	4a06      	ldr	r2, [pc, #24]	; (8001cac <FLASH_Program_Word+0x40>)
 8001c94:	f043 0301 	orr.w	r3, r3, #1
 8001c98:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	683a      	ldr	r2, [r7, #0]
 8001c9e:	601a      	str	r2, [r3, #0]
}
 8001ca0:	bf00      	nop
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr
 8001cac:	40023c00 	.word	0x40023c00

08001cb0 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	460b      	mov	r3, r1
 8001cba:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001cbc:	4b0d      	ldr	r3, [pc, #52]	; (8001cf4 <FLASH_Program_HalfWord+0x44>)
 8001cbe:	691b      	ldr	r3, [r3, #16]
 8001cc0:	4a0c      	ldr	r2, [pc, #48]	; (8001cf4 <FLASH_Program_HalfWord+0x44>)
 8001cc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001cc6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001cc8:	4b0a      	ldr	r3, [pc, #40]	; (8001cf4 <FLASH_Program_HalfWord+0x44>)
 8001cca:	691b      	ldr	r3, [r3, #16]
 8001ccc:	4a09      	ldr	r2, [pc, #36]	; (8001cf4 <FLASH_Program_HalfWord+0x44>)
 8001cce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cd2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001cd4:	4b07      	ldr	r3, [pc, #28]	; (8001cf4 <FLASH_Program_HalfWord+0x44>)
 8001cd6:	691b      	ldr	r3, [r3, #16]
 8001cd8:	4a06      	ldr	r2, [pc, #24]	; (8001cf4 <FLASH_Program_HalfWord+0x44>)
 8001cda:	f043 0301 	orr.w	r3, r3, #1
 8001cde:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	887a      	ldrh	r2, [r7, #2]
 8001ce4:	801a      	strh	r2, [r3, #0]
}
 8001ce6:	bf00      	nop
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	40023c00 	.word	0x40023c00

08001cf8 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	460b      	mov	r3, r1
 8001d02:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001d04:	4b0c      	ldr	r3, [pc, #48]	; (8001d38 <FLASH_Program_Byte+0x40>)
 8001d06:	691b      	ldr	r3, [r3, #16]
 8001d08:	4a0b      	ldr	r2, [pc, #44]	; (8001d38 <FLASH_Program_Byte+0x40>)
 8001d0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d0e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001d10:	4b09      	ldr	r3, [pc, #36]	; (8001d38 <FLASH_Program_Byte+0x40>)
 8001d12:	4a09      	ldr	r2, [pc, #36]	; (8001d38 <FLASH_Program_Byte+0x40>)
 8001d14:	691b      	ldr	r3, [r3, #16]
 8001d16:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001d18:	4b07      	ldr	r3, [pc, #28]	; (8001d38 <FLASH_Program_Byte+0x40>)
 8001d1a:	691b      	ldr	r3, [r3, #16]
 8001d1c:	4a06      	ldr	r2, [pc, #24]	; (8001d38 <FLASH_Program_Byte+0x40>)
 8001d1e:	f043 0301 	orr.w	r3, r3, #1
 8001d22:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	78fa      	ldrb	r2, [r7, #3]
 8001d28:	701a      	strb	r2, [r3, #0]
}
 8001d2a:	bf00      	nop
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	40023c00 	.word	0x40023c00

08001d3c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001d40:	4b2f      	ldr	r3, [pc, #188]	; (8001e00 <FLASH_SetErrorCode+0xc4>)
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	f003 0310 	and.w	r3, r3, #16
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d008      	beq.n	8001d5e <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001d4c:	4b2d      	ldr	r3, [pc, #180]	; (8001e04 <FLASH_SetErrorCode+0xc8>)
 8001d4e:	69db      	ldr	r3, [r3, #28]
 8001d50:	f043 0310 	orr.w	r3, r3, #16
 8001d54:	4a2b      	ldr	r2, [pc, #172]	; (8001e04 <FLASH_SetErrorCode+0xc8>)
 8001d56:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001d58:	4b29      	ldr	r3, [pc, #164]	; (8001e00 <FLASH_SetErrorCode+0xc4>)
 8001d5a:	2210      	movs	r2, #16
 8001d5c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001d5e:	4b28      	ldr	r3, [pc, #160]	; (8001e00 <FLASH_SetErrorCode+0xc4>)
 8001d60:	68db      	ldr	r3, [r3, #12]
 8001d62:	f003 0320 	and.w	r3, r3, #32
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d008      	beq.n	8001d7c <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001d6a:	4b26      	ldr	r3, [pc, #152]	; (8001e04 <FLASH_SetErrorCode+0xc8>)
 8001d6c:	69db      	ldr	r3, [r3, #28]
 8001d6e:	f043 0308 	orr.w	r3, r3, #8
 8001d72:	4a24      	ldr	r2, [pc, #144]	; (8001e04 <FLASH_SetErrorCode+0xc8>)
 8001d74:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001d76:	4b22      	ldr	r3, [pc, #136]	; (8001e00 <FLASH_SetErrorCode+0xc4>)
 8001d78:	2220      	movs	r2, #32
 8001d7a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001d7c:	4b20      	ldr	r3, [pc, #128]	; (8001e00 <FLASH_SetErrorCode+0xc4>)
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d008      	beq.n	8001d9a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001d88:	4b1e      	ldr	r3, [pc, #120]	; (8001e04 <FLASH_SetErrorCode+0xc8>)
 8001d8a:	69db      	ldr	r3, [r3, #28]
 8001d8c:	f043 0304 	orr.w	r3, r3, #4
 8001d90:	4a1c      	ldr	r2, [pc, #112]	; (8001e04 <FLASH_SetErrorCode+0xc8>)
 8001d92:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001d94:	4b1a      	ldr	r3, [pc, #104]	; (8001e00 <FLASH_SetErrorCode+0xc4>)
 8001d96:	2240      	movs	r2, #64	; 0x40
 8001d98:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001d9a:	4b19      	ldr	r3, [pc, #100]	; (8001e00 <FLASH_SetErrorCode+0xc4>)
 8001d9c:	68db      	ldr	r3, [r3, #12]
 8001d9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d008      	beq.n	8001db8 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001da6:	4b17      	ldr	r3, [pc, #92]	; (8001e04 <FLASH_SetErrorCode+0xc8>)
 8001da8:	69db      	ldr	r3, [r3, #28]
 8001daa:	f043 0302 	orr.w	r3, r3, #2
 8001dae:	4a15      	ldr	r2, [pc, #84]	; (8001e04 <FLASH_SetErrorCode+0xc8>)
 8001db0:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001db2:	4b13      	ldr	r3, [pc, #76]	; (8001e00 <FLASH_SetErrorCode+0xc4>)
 8001db4:	2280      	movs	r2, #128	; 0x80
 8001db6:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8001db8:	4b11      	ldr	r3, [pc, #68]	; (8001e00 <FLASH_SetErrorCode+0xc4>)
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d009      	beq.n	8001dd8 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8001dc4:	4b0f      	ldr	r3, [pc, #60]	; (8001e04 <FLASH_SetErrorCode+0xc8>)
 8001dc6:	69db      	ldr	r3, [r3, #28]
 8001dc8:	f043 0301 	orr.w	r3, r3, #1
 8001dcc:	4a0d      	ldr	r2, [pc, #52]	; (8001e04 <FLASH_SetErrorCode+0xc8>)
 8001dce:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8001dd0:	4b0b      	ldr	r3, [pc, #44]	; (8001e00 <FLASH_SetErrorCode+0xc4>)
 8001dd2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001dd6:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001dd8:	4b09      	ldr	r3, [pc, #36]	; (8001e00 <FLASH_SetErrorCode+0xc4>)
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	f003 0302 	and.w	r3, r3, #2
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d008      	beq.n	8001df6 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001de4:	4b07      	ldr	r3, [pc, #28]	; (8001e04 <FLASH_SetErrorCode+0xc8>)
 8001de6:	69db      	ldr	r3, [r3, #28]
 8001de8:	f043 0320 	orr.w	r3, r3, #32
 8001dec:	4a05      	ldr	r2, [pc, #20]	; (8001e04 <FLASH_SetErrorCode+0xc8>)
 8001dee:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001df0:	4b03      	ldr	r3, [pc, #12]	; (8001e00 <FLASH_SetErrorCode+0xc4>)
 8001df2:	2202      	movs	r2, #2
 8001df4:	60da      	str	r2, [r3, #12]
  }
}
 8001df6:	bf00      	nop
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr
 8001e00:	40023c00 	.word	0x40023c00
 8001e04:	2000018c 	.word	0x2000018c

08001e08 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8001e16:	2300      	movs	r3, #0
 8001e18:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001e1a:	4b31      	ldr	r3, [pc, #196]	; (8001ee0 <HAL_FLASHEx_Erase+0xd8>)
 8001e1c:	7e1b      	ldrb	r3, [r3, #24]
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d101      	bne.n	8001e26 <HAL_FLASHEx_Erase+0x1e>
 8001e22:	2302      	movs	r3, #2
 8001e24:	e058      	b.n	8001ed8 <HAL_FLASHEx_Erase+0xd0>
 8001e26:	4b2e      	ldr	r3, [pc, #184]	; (8001ee0 <HAL_FLASHEx_Erase+0xd8>)
 8001e28:	2201      	movs	r2, #1
 8001e2a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001e2c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001e30:	f7ff feaa 	bl	8001b88 <FLASH_WaitForLastOperation>
 8001e34:	4603      	mov	r3, r0
 8001e36:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001e38:	7bfb      	ldrb	r3, [r7, #15]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d148      	bne.n	8001ed0 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	f04f 32ff 	mov.w	r2, #4294967295
 8001e44:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d115      	bne.n	8001e7a <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	691b      	ldr	r3, [r3, #16]
 8001e52:	b2da      	uxtb	r2, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	4619      	mov	r1, r3
 8001e5a:	4610      	mov	r0, r2
 8001e5c:	f000 f868 	bl	8001f30 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001e60:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001e64:	f7ff fe90 	bl	8001b88 <FLASH_WaitForLastOperation>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8001e6c:	4b1d      	ldr	r3, [pc, #116]	; (8001ee4 <HAL_FLASHEx_Erase+0xdc>)
 8001e6e:	691b      	ldr	r3, [r3, #16]
 8001e70:	4a1c      	ldr	r2, [pc, #112]	; (8001ee4 <HAL_FLASHEx_Erase+0xdc>)
 8001e72:	f023 0304 	bic.w	r3, r3, #4
 8001e76:	6113      	str	r3, [r2, #16]
 8001e78:	e028      	b.n	8001ecc <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	60bb      	str	r3, [r7, #8]
 8001e80:	e01c      	b.n	8001ebc <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	691b      	ldr	r3, [r3, #16]
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	4619      	mov	r1, r3
 8001e8a:	68b8      	ldr	r0, [r7, #8]
 8001e8c:	f000 f874 	bl	8001f78 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001e90:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001e94:	f7ff fe78 	bl	8001b88 <FLASH_WaitForLastOperation>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8001e9c:	4b11      	ldr	r3, [pc, #68]	; (8001ee4 <HAL_FLASHEx_Erase+0xdc>)
 8001e9e:	691b      	ldr	r3, [r3, #16]
 8001ea0:	4a10      	ldr	r2, [pc, #64]	; (8001ee4 <HAL_FLASHEx_Erase+0xdc>)
 8001ea2:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8001ea6:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8001ea8:	7bfb      	ldrb	r3, [r7, #15]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d003      	beq.n	8001eb6 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	68ba      	ldr	r2, [r7, #8]
 8001eb2:	601a      	str	r2, [r3, #0]
          break;
 8001eb4:	e00a      	b.n	8001ecc <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	3301      	adds	r3, #1
 8001eba:	60bb      	str	r3, [r7, #8]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	68da      	ldr	r2, [r3, #12]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	4413      	add	r3, r2
 8001ec6:	68ba      	ldr	r2, [r7, #8]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d3da      	bcc.n	8001e82 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8001ecc:	f000 f8e8 	bl	80020a0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001ed0:	4b03      	ldr	r3, [pc, #12]	; (8001ee0 <HAL_FLASHEx_Erase+0xd8>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	761a      	strb	r2, [r3, #24]

  return status;
 8001ed6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3710      	adds	r7, #16
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	2000018c 	.word	0x2000018c
 8001ee4:	40023c00 	.word	0x40023c00

08001ee8 <HAL_FLASHEx_OBGetConfig>:
  *         contains the configuration information for the programming.
  *
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER | OPTIONBYTE_BOR;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	220f      	movs	r2, #15
 8001ef4:	601a      	str	r2, [r3, #0]

  /*Get WRP*/
  pOBInit->WRPSector = (uint32_t)FLASH_OB_GetWRP();
 8001ef6:	f000 f897 	bl	8002028 <FLASH_OB_GetWRP>
 8001efa:	4603      	mov	r3, r0
 8001efc:	461a      	mov	r2, r3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	609a      	str	r2, [r3, #8]

  /*Get RDP Level*/
  pOBInit->RDPLevel = (uint32_t)FLASH_OB_GetRDP();
 8001f02:	f000 f89d 	bl	8002040 <FLASH_OB_GetRDP>
 8001f06:	4603      	mov	r3, r0
 8001f08:	461a      	mov	r2, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	611a      	str	r2, [r3, #16]

  /*Get USER*/
  pOBInit->USERConfig = (uint8_t)FLASH_OB_GetUser();
 8001f0e:	f000 f87b 	bl	8002008 <FLASH_OB_GetUser>
 8001f12:	4603      	mov	r3, r0
 8001f14:	461a      	mov	r2, r3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	761a      	strb	r2, [r3, #24]

  /*Get BOR Level*/
  pOBInit->BORLevel = (uint32_t)FLASH_OB_GetBOR();
 8001f1a:	f000 f8b1 	bl	8002080 <FLASH_OB_GetBOR>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	461a      	mov	r2, r3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	615a      	str	r2, [r3, #20]
}
 8001f26:	bf00      	nop
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
	...

08001f30 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	4603      	mov	r3, r0
 8001f38:	6039      	str	r1, [r7, #0]
 8001f3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001f3c:	4b0d      	ldr	r3, [pc, #52]	; (8001f74 <FLASH_MassErase+0x44>)
 8001f3e:	691b      	ldr	r3, [r3, #16]
 8001f40:	4a0c      	ldr	r2, [pc, #48]	; (8001f74 <FLASH_MassErase+0x44>)
 8001f42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f46:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8001f48:	4b0a      	ldr	r3, [pc, #40]	; (8001f74 <FLASH_MassErase+0x44>)
 8001f4a:	691b      	ldr	r3, [r3, #16]
 8001f4c:	4a09      	ldr	r2, [pc, #36]	; (8001f74 <FLASH_MassErase+0x44>)
 8001f4e:	f043 0304 	orr.w	r3, r3, #4
 8001f52:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8001f54:	4b07      	ldr	r3, [pc, #28]	; (8001f74 <FLASH_MassErase+0x44>)
 8001f56:	691a      	ldr	r2, [r3, #16]
 8001f58:	79fb      	ldrb	r3, [r7, #7]
 8001f5a:	021b      	lsls	r3, r3, #8
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	4a05      	ldr	r2, [pc, #20]	; (8001f74 <FLASH_MassErase+0x44>)
 8001f60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f64:	6113      	str	r3, [r2, #16]
}
 8001f66:	bf00      	nop
 8001f68:	370c      	adds	r7, #12
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	40023c00 	.word	0x40023c00

08001f78 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b085      	sub	sp, #20
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	460b      	mov	r3, r1
 8001f82:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8001f84:	2300      	movs	r3, #0
 8001f86:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001f88:	78fb      	ldrb	r3, [r7, #3]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d102      	bne.n	8001f94 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	60fb      	str	r3, [r7, #12]
 8001f92:	e010      	b.n	8001fb6 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001f94:	78fb      	ldrb	r3, [r7, #3]
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d103      	bne.n	8001fa2 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8001f9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f9e:	60fb      	str	r3, [r7, #12]
 8001fa0:	e009      	b.n	8001fb6 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8001fa2:	78fb      	ldrb	r3, [r7, #3]
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d103      	bne.n	8001fb0 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001fa8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fac:	60fb      	str	r3, [r7, #12]
 8001fae:	e002      	b.n	8001fb6 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001fb0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001fb4:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001fb6:	4b13      	ldr	r3, [pc, #76]	; (8002004 <FLASH_Erase_Sector+0x8c>)
 8001fb8:	691b      	ldr	r3, [r3, #16]
 8001fba:	4a12      	ldr	r2, [pc, #72]	; (8002004 <FLASH_Erase_Sector+0x8c>)
 8001fbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fc0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8001fc2:	4b10      	ldr	r3, [pc, #64]	; (8002004 <FLASH_Erase_Sector+0x8c>)
 8001fc4:	691a      	ldr	r2, [r3, #16]
 8001fc6:	490f      	ldr	r1, [pc, #60]	; (8002004 <FLASH_Erase_Sector+0x8c>)
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8001fce:	4b0d      	ldr	r3, [pc, #52]	; (8002004 <FLASH_Erase_Sector+0x8c>)
 8001fd0:	691b      	ldr	r3, [r3, #16]
 8001fd2:	4a0c      	ldr	r2, [pc, #48]	; (8002004 <FLASH_Erase_Sector+0x8c>)
 8001fd4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001fd8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001fda:	4b0a      	ldr	r3, [pc, #40]	; (8002004 <FLASH_Erase_Sector+0x8c>)
 8001fdc:	691a      	ldr	r2, [r3, #16]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	00db      	lsls	r3, r3, #3
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	4a07      	ldr	r2, [pc, #28]	; (8002004 <FLASH_Erase_Sector+0x8c>)
 8001fe6:	f043 0302 	orr.w	r3, r3, #2
 8001fea:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001fec:	4b05      	ldr	r3, [pc, #20]	; (8002004 <FLASH_Erase_Sector+0x8c>)
 8001fee:	691b      	ldr	r3, [r3, #16]
 8001ff0:	4a04      	ldr	r2, [pc, #16]	; (8002004 <FLASH_Erase_Sector+0x8c>)
 8001ff2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ff6:	6113      	str	r3, [r2, #16]
}
 8001ff8:	bf00      	nop
 8001ffa:	3714      	adds	r7, #20
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr
 8002004:	40023c00 	.word	0x40023c00

08002008 <FLASH_OB_GetUser>:
  * @brief  Return the FLASH User Option Byte value.
  * @retval uint8_t FLASH User Option Bytes values: IWDG_SW(Bit0), RST_STOP(Bit1)
  *         and RST_STDBY(Bit2).
  */
static uint8_t FLASH_OB_GetUser(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return ((uint8_t)(FLASH->OPTCR & 0xE0));
 800200c:	4b05      	ldr	r3, [pc, #20]	; (8002024 <FLASH_OB_GetUser+0x1c>)
 800200e:	695b      	ldr	r3, [r3, #20]
 8002010:	b2db      	uxtb	r3, r3
 8002012:	f023 031f 	bic.w	r3, r3, #31
 8002016:	b2db      	uxtb	r3, r3
}
 8002018:	4618      	mov	r0, r3
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	40023c00 	.word	0x40023c00

08002028 <FLASH_OB_GetWRP>:
/**
  * @brief  Return the FLASH Write Protection Option Bytes value.
  * @retval uint16_t FLASH Write Protection Option Bytes value
  */
static uint16_t FLASH_OB_GetWRP(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 800202c:	4b03      	ldr	r3, [pc, #12]	; (800203c <FLASH_OB_GetWRP+0x14>)
 800202e:	881b      	ldrh	r3, [r3, #0]
 8002030:	b29b      	uxth	r3, r3
}
 8002032:	4618      	mov	r0, r3
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr
 800203c:	40023c16 	.word	0x40023c16

08002040 <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint8_t FLASH_OB_GetRDP(void)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
  uint8_t readstatus = OB_RDP_LEVEL_0;
 8002046:	23aa      	movs	r3, #170	; 0xaa
 8002048:	71fb      	strb	r3, [r7, #7]

  if (*(__IO uint8_t *)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_2)
 800204a:	4b0c      	ldr	r3, [pc, #48]	; (800207c <FLASH_OB_GetRDP+0x3c>)
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	b2db      	uxtb	r3, r3
 8002050:	2bcc      	cmp	r3, #204	; 0xcc
 8002052:	d102      	bne.n	800205a <FLASH_OB_GetRDP+0x1a>
  {
    readstatus = OB_RDP_LEVEL_2;
 8002054:	23cc      	movs	r3, #204	; 0xcc
 8002056:	71fb      	strb	r3, [r7, #7]
 8002058:	e009      	b.n	800206e <FLASH_OB_GetRDP+0x2e>
  }
  else if (*(__IO uint8_t *)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_0)
 800205a:	4b08      	ldr	r3, [pc, #32]	; (800207c <FLASH_OB_GetRDP+0x3c>)
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	b2db      	uxtb	r3, r3
 8002060:	2baa      	cmp	r3, #170	; 0xaa
 8002062:	d102      	bne.n	800206a <FLASH_OB_GetRDP+0x2a>
  {
    readstatus = OB_RDP_LEVEL_0;
 8002064:	23aa      	movs	r3, #170	; 0xaa
 8002066:	71fb      	strb	r3, [r7, #7]
 8002068:	e001      	b.n	800206e <FLASH_OB_GetRDP+0x2e>
  }
  else
  {
    readstatus = OB_RDP_LEVEL_1;
 800206a:	2355      	movs	r3, #85	; 0x55
 800206c:	71fb      	strb	r3, [r7, #7]
  }

  return readstatus;
 800206e:	79fb      	ldrb	r3, [r7, #7]
}
 8002070:	4618      	mov	r0, r3
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr
 800207c:	40023c15 	.word	0x40023c15

08002080 <FLASH_OB_GetBOR>:
  *           - OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
  *           - OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V
  */
static uint8_t FLASH_OB_GetBOR(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  /* Return the FLASH BOR level */
  return (uint8_t)(*(__IO uint8_t *)(OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0C);
 8002084:	4b05      	ldr	r3, [pc, #20]	; (800209c <FLASH_OB_GetBOR+0x1c>)
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	b2db      	uxtb	r3, r3
 800208a:	f003 030c 	and.w	r3, r3, #12
 800208e:	b2db      	uxtb	r3, r3
}
 8002090:	4618      	mov	r0, r3
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	40023c14 	.word	0x40023c14

080020a0 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80020a4:	4b20      	ldr	r3, [pc, #128]	; (8002128 <FLASH_FlushCaches+0x88>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d017      	beq.n	80020e0 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80020b0:	4b1d      	ldr	r3, [pc, #116]	; (8002128 <FLASH_FlushCaches+0x88>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a1c      	ldr	r2, [pc, #112]	; (8002128 <FLASH_FlushCaches+0x88>)
 80020b6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80020ba:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80020bc:	4b1a      	ldr	r3, [pc, #104]	; (8002128 <FLASH_FlushCaches+0x88>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a19      	ldr	r2, [pc, #100]	; (8002128 <FLASH_FlushCaches+0x88>)
 80020c2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80020c6:	6013      	str	r3, [r2, #0]
 80020c8:	4b17      	ldr	r3, [pc, #92]	; (8002128 <FLASH_FlushCaches+0x88>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a16      	ldr	r2, [pc, #88]	; (8002128 <FLASH_FlushCaches+0x88>)
 80020ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80020d2:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020d4:	4b14      	ldr	r3, [pc, #80]	; (8002128 <FLASH_FlushCaches+0x88>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a13      	ldr	r2, [pc, #76]	; (8002128 <FLASH_FlushCaches+0x88>)
 80020da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020de:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80020e0:	4b11      	ldr	r3, [pc, #68]	; (8002128 <FLASH_FlushCaches+0x88>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d017      	beq.n	800211c <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80020ec:	4b0e      	ldr	r3, [pc, #56]	; (8002128 <FLASH_FlushCaches+0x88>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a0d      	ldr	r2, [pc, #52]	; (8002128 <FLASH_FlushCaches+0x88>)
 80020f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80020f6:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80020f8:	4b0b      	ldr	r3, [pc, #44]	; (8002128 <FLASH_FlushCaches+0x88>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a0a      	ldr	r2, [pc, #40]	; (8002128 <FLASH_FlushCaches+0x88>)
 80020fe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002102:	6013      	str	r3, [r2, #0]
 8002104:	4b08      	ldr	r3, [pc, #32]	; (8002128 <FLASH_FlushCaches+0x88>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a07      	ldr	r2, [pc, #28]	; (8002128 <FLASH_FlushCaches+0x88>)
 800210a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800210e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002110:	4b05      	ldr	r3, [pc, #20]	; (8002128 <FLASH_FlushCaches+0x88>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a04      	ldr	r2, [pc, #16]	; (8002128 <FLASH_FlushCaches+0x88>)
 8002116:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800211a:	6013      	str	r3, [r2, #0]
  }
}
 800211c:	bf00      	nop
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	40023c00 	.word	0x40023c00

0800212c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800212c:	b480      	push	{r7}
 800212e:	b089      	sub	sp, #36	; 0x24
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002136:	2300      	movs	r3, #0
 8002138:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800213a:	2300      	movs	r3, #0
 800213c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800213e:	2300      	movs	r3, #0
 8002140:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002142:	2300      	movs	r3, #0
 8002144:	61fb      	str	r3, [r7, #28]
 8002146:	e165      	b.n	8002414 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002148:	2201      	movs	r2, #1
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	fa02 f303 	lsl.w	r3, r2, r3
 8002150:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	697a      	ldr	r2, [r7, #20]
 8002158:	4013      	ands	r3, r2
 800215a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800215c:	693a      	ldr	r2, [r7, #16]
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	429a      	cmp	r2, r3
 8002162:	f040 8154 	bne.w	800240e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	f003 0303 	and.w	r3, r3, #3
 800216e:	2b01      	cmp	r3, #1
 8002170:	d005      	beq.n	800217e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800217a:	2b02      	cmp	r3, #2
 800217c:	d130      	bne.n	80021e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	005b      	lsls	r3, r3, #1
 8002188:	2203      	movs	r2, #3
 800218a:	fa02 f303 	lsl.w	r3, r2, r3
 800218e:	43db      	mvns	r3, r3
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	4013      	ands	r3, r2
 8002194:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	68da      	ldr	r2, [r3, #12]
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	005b      	lsls	r3, r3, #1
 800219e:	fa02 f303 	lsl.w	r3, r2, r3
 80021a2:	69ba      	ldr	r2, [r7, #24]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	69ba      	ldr	r2, [r7, #24]
 80021ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021b4:	2201      	movs	r2, #1
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	fa02 f303 	lsl.w	r3, r2, r3
 80021bc:	43db      	mvns	r3, r3
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	4013      	ands	r3, r2
 80021c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	091b      	lsrs	r3, r3, #4
 80021ca:	f003 0201 	and.w	r2, r3, #1
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	fa02 f303 	lsl.w	r3, r2, r3
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f003 0303 	and.w	r3, r3, #3
 80021e8:	2b03      	cmp	r3, #3
 80021ea:	d017      	beq.n	800221c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	005b      	lsls	r3, r3, #1
 80021f6:	2203      	movs	r2, #3
 80021f8:	fa02 f303 	lsl.w	r3, r2, r3
 80021fc:	43db      	mvns	r3, r3
 80021fe:	69ba      	ldr	r2, [r7, #24]
 8002200:	4013      	ands	r3, r2
 8002202:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	689a      	ldr	r2, [r3, #8]
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	005b      	lsls	r3, r3, #1
 800220c:	fa02 f303 	lsl.w	r3, r2, r3
 8002210:	69ba      	ldr	r2, [r7, #24]
 8002212:	4313      	orrs	r3, r2
 8002214:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	69ba      	ldr	r2, [r7, #24]
 800221a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f003 0303 	and.w	r3, r3, #3
 8002224:	2b02      	cmp	r3, #2
 8002226:	d123      	bne.n	8002270 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	08da      	lsrs	r2, r3, #3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	3208      	adds	r2, #8
 8002230:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002234:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	f003 0307 	and.w	r3, r3, #7
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	220f      	movs	r2, #15
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	43db      	mvns	r3, r3
 8002246:	69ba      	ldr	r2, [r7, #24]
 8002248:	4013      	ands	r3, r2
 800224a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	691a      	ldr	r2, [r3, #16]
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	f003 0307 	and.w	r3, r3, #7
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	fa02 f303 	lsl.w	r3, r2, r3
 800225c:	69ba      	ldr	r2, [r7, #24]
 800225e:	4313      	orrs	r3, r2
 8002260:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	08da      	lsrs	r2, r3, #3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	3208      	adds	r2, #8
 800226a:	69b9      	ldr	r1, [r7, #24]
 800226c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	005b      	lsls	r3, r3, #1
 800227a:	2203      	movs	r2, #3
 800227c:	fa02 f303 	lsl.w	r3, r2, r3
 8002280:	43db      	mvns	r3, r3
 8002282:	69ba      	ldr	r2, [r7, #24]
 8002284:	4013      	ands	r3, r2
 8002286:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f003 0203 	and.w	r2, r3, #3
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	005b      	lsls	r3, r3, #1
 8002294:	fa02 f303 	lsl.w	r3, r2, r3
 8002298:	69ba      	ldr	r2, [r7, #24]
 800229a:	4313      	orrs	r3, r2
 800229c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	f000 80ae 	beq.w	800240e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022b2:	2300      	movs	r3, #0
 80022b4:	60fb      	str	r3, [r7, #12]
 80022b6:	4b5d      	ldr	r3, [pc, #372]	; (800242c <HAL_GPIO_Init+0x300>)
 80022b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ba:	4a5c      	ldr	r2, [pc, #368]	; (800242c <HAL_GPIO_Init+0x300>)
 80022bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022c0:	6453      	str	r3, [r2, #68]	; 0x44
 80022c2:	4b5a      	ldr	r3, [pc, #360]	; (800242c <HAL_GPIO_Init+0x300>)
 80022c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022ca:	60fb      	str	r3, [r7, #12]
 80022cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022ce:	4a58      	ldr	r2, [pc, #352]	; (8002430 <HAL_GPIO_Init+0x304>)
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	089b      	lsrs	r3, r3, #2
 80022d4:	3302      	adds	r3, #2
 80022d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	f003 0303 	and.w	r3, r3, #3
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	220f      	movs	r2, #15
 80022e6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ea:	43db      	mvns	r3, r3
 80022ec:	69ba      	ldr	r2, [r7, #24]
 80022ee:	4013      	ands	r3, r2
 80022f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a4f      	ldr	r2, [pc, #316]	; (8002434 <HAL_GPIO_Init+0x308>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d025      	beq.n	8002346 <HAL_GPIO_Init+0x21a>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a4e      	ldr	r2, [pc, #312]	; (8002438 <HAL_GPIO_Init+0x30c>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d01f      	beq.n	8002342 <HAL_GPIO_Init+0x216>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a4d      	ldr	r2, [pc, #308]	; (800243c <HAL_GPIO_Init+0x310>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d019      	beq.n	800233e <HAL_GPIO_Init+0x212>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a4c      	ldr	r2, [pc, #304]	; (8002440 <HAL_GPIO_Init+0x314>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d013      	beq.n	800233a <HAL_GPIO_Init+0x20e>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4a4b      	ldr	r2, [pc, #300]	; (8002444 <HAL_GPIO_Init+0x318>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d00d      	beq.n	8002336 <HAL_GPIO_Init+0x20a>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4a4a      	ldr	r2, [pc, #296]	; (8002448 <HAL_GPIO_Init+0x31c>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d007      	beq.n	8002332 <HAL_GPIO_Init+0x206>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4a49      	ldr	r2, [pc, #292]	; (800244c <HAL_GPIO_Init+0x320>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d101      	bne.n	800232e <HAL_GPIO_Init+0x202>
 800232a:	2306      	movs	r3, #6
 800232c:	e00c      	b.n	8002348 <HAL_GPIO_Init+0x21c>
 800232e:	2307      	movs	r3, #7
 8002330:	e00a      	b.n	8002348 <HAL_GPIO_Init+0x21c>
 8002332:	2305      	movs	r3, #5
 8002334:	e008      	b.n	8002348 <HAL_GPIO_Init+0x21c>
 8002336:	2304      	movs	r3, #4
 8002338:	e006      	b.n	8002348 <HAL_GPIO_Init+0x21c>
 800233a:	2303      	movs	r3, #3
 800233c:	e004      	b.n	8002348 <HAL_GPIO_Init+0x21c>
 800233e:	2302      	movs	r3, #2
 8002340:	e002      	b.n	8002348 <HAL_GPIO_Init+0x21c>
 8002342:	2301      	movs	r3, #1
 8002344:	e000      	b.n	8002348 <HAL_GPIO_Init+0x21c>
 8002346:	2300      	movs	r3, #0
 8002348:	69fa      	ldr	r2, [r7, #28]
 800234a:	f002 0203 	and.w	r2, r2, #3
 800234e:	0092      	lsls	r2, r2, #2
 8002350:	4093      	lsls	r3, r2
 8002352:	69ba      	ldr	r2, [r7, #24]
 8002354:	4313      	orrs	r3, r2
 8002356:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002358:	4935      	ldr	r1, [pc, #212]	; (8002430 <HAL_GPIO_Init+0x304>)
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	089b      	lsrs	r3, r3, #2
 800235e:	3302      	adds	r3, #2
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002366:	4b3a      	ldr	r3, [pc, #232]	; (8002450 <HAL_GPIO_Init+0x324>)
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	43db      	mvns	r3, r3
 8002370:	69ba      	ldr	r2, [r7, #24]
 8002372:	4013      	ands	r3, r2
 8002374:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d003      	beq.n	800238a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002382:	69ba      	ldr	r2, [r7, #24]
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	4313      	orrs	r3, r2
 8002388:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800238a:	4a31      	ldr	r2, [pc, #196]	; (8002450 <HAL_GPIO_Init+0x324>)
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002390:	4b2f      	ldr	r3, [pc, #188]	; (8002450 <HAL_GPIO_Init+0x324>)
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	43db      	mvns	r3, r3
 800239a:	69ba      	ldr	r2, [r7, #24]
 800239c:	4013      	ands	r3, r2
 800239e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d003      	beq.n	80023b4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023b4:	4a26      	ldr	r2, [pc, #152]	; (8002450 <HAL_GPIO_Init+0x324>)
 80023b6:	69bb      	ldr	r3, [r7, #24]
 80023b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80023ba:	4b25      	ldr	r3, [pc, #148]	; (8002450 <HAL_GPIO_Init+0x324>)
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	43db      	mvns	r3, r3
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	4013      	ands	r3, r2
 80023c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d003      	beq.n	80023de <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80023d6:	69ba      	ldr	r2, [r7, #24]
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	4313      	orrs	r3, r2
 80023dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023de:	4a1c      	ldr	r2, [pc, #112]	; (8002450 <HAL_GPIO_Init+0x324>)
 80023e0:	69bb      	ldr	r3, [r7, #24]
 80023e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023e4:	4b1a      	ldr	r3, [pc, #104]	; (8002450 <HAL_GPIO_Init+0x324>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	43db      	mvns	r3, r3
 80023ee:	69ba      	ldr	r2, [r7, #24]
 80023f0:	4013      	ands	r3, r2
 80023f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d003      	beq.n	8002408 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002400:	69ba      	ldr	r2, [r7, #24]
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	4313      	orrs	r3, r2
 8002406:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002408:	4a11      	ldr	r2, [pc, #68]	; (8002450 <HAL_GPIO_Init+0x324>)
 800240a:	69bb      	ldr	r3, [r7, #24]
 800240c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	3301      	adds	r3, #1
 8002412:	61fb      	str	r3, [r7, #28]
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	2b0f      	cmp	r3, #15
 8002418:	f67f ae96 	bls.w	8002148 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800241c:	bf00      	nop
 800241e:	bf00      	nop
 8002420:	3724      	adds	r7, #36	; 0x24
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	40023800 	.word	0x40023800
 8002430:	40013800 	.word	0x40013800
 8002434:	40020000 	.word	0x40020000
 8002438:	40020400 	.word	0x40020400
 800243c:	40020800 	.word	0x40020800
 8002440:	40020c00 	.word	0x40020c00
 8002444:	40021000 	.word	0x40021000
 8002448:	40021400 	.word	0x40021400
 800244c:	40021800 	.word	0x40021800
 8002450:	40013c00 	.word	0x40013c00

08002454 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002454:	b480      	push	{r7}
 8002456:	b085      	sub	sp, #20
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	460b      	mov	r3, r1
 800245e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	691a      	ldr	r2, [r3, #16]
 8002464:	887b      	ldrh	r3, [r7, #2]
 8002466:	4013      	ands	r3, r2
 8002468:	2b00      	cmp	r3, #0
 800246a:	d002      	beq.n	8002472 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800246c:	2301      	movs	r3, #1
 800246e:	73fb      	strb	r3, [r7, #15]
 8002470:	e001      	b.n	8002476 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002472:	2300      	movs	r3, #0
 8002474:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002476:	7bfb      	ldrb	r3, [r7, #15]
}
 8002478:	4618      	mov	r0, r3
 800247a:	3714      	adds	r7, #20
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	460b      	mov	r3, r1
 800248e:	807b      	strh	r3, [r7, #2]
 8002490:	4613      	mov	r3, r2
 8002492:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002494:	787b      	ldrb	r3, [r7, #1]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d003      	beq.n	80024a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800249a:	887a      	ldrh	r2, [r7, #2]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80024a0:	e003      	b.n	80024aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024a2:	887b      	ldrh	r3, [r7, #2]
 80024a4:	041a      	lsls	r2, r3, #16
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	619a      	str	r2, [r3, #24]
}
 80024aa:	bf00      	nop
 80024ac:	370c      	adds	r7, #12
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
	...

080024b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d101      	bne.n	80024cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e0cc      	b.n	8002666 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024cc:	4b68      	ldr	r3, [pc, #416]	; (8002670 <HAL_RCC_ClockConfig+0x1b8>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 030f 	and.w	r3, r3, #15
 80024d4:	683a      	ldr	r2, [r7, #0]
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d90c      	bls.n	80024f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024da:	4b65      	ldr	r3, [pc, #404]	; (8002670 <HAL_RCC_ClockConfig+0x1b8>)
 80024dc:	683a      	ldr	r2, [r7, #0]
 80024de:	b2d2      	uxtb	r2, r2
 80024e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024e2:	4b63      	ldr	r3, [pc, #396]	; (8002670 <HAL_RCC_ClockConfig+0x1b8>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 030f 	and.w	r3, r3, #15
 80024ea:	683a      	ldr	r2, [r7, #0]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d001      	beq.n	80024f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e0b8      	b.n	8002666 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0302 	and.w	r3, r3, #2
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d020      	beq.n	8002542 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 0304 	and.w	r3, r3, #4
 8002508:	2b00      	cmp	r3, #0
 800250a:	d005      	beq.n	8002518 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800250c:	4b59      	ldr	r3, [pc, #356]	; (8002674 <HAL_RCC_ClockConfig+0x1bc>)
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	4a58      	ldr	r2, [pc, #352]	; (8002674 <HAL_RCC_ClockConfig+0x1bc>)
 8002512:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002516:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0308 	and.w	r3, r3, #8
 8002520:	2b00      	cmp	r3, #0
 8002522:	d005      	beq.n	8002530 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002524:	4b53      	ldr	r3, [pc, #332]	; (8002674 <HAL_RCC_ClockConfig+0x1bc>)
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	4a52      	ldr	r2, [pc, #328]	; (8002674 <HAL_RCC_ClockConfig+0x1bc>)
 800252a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800252e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002530:	4b50      	ldr	r3, [pc, #320]	; (8002674 <HAL_RCC_ClockConfig+0x1bc>)
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	494d      	ldr	r1, [pc, #308]	; (8002674 <HAL_RCC_ClockConfig+0x1bc>)
 800253e:	4313      	orrs	r3, r2
 8002540:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0301 	and.w	r3, r3, #1
 800254a:	2b00      	cmp	r3, #0
 800254c:	d044      	beq.n	80025d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	2b01      	cmp	r3, #1
 8002554:	d107      	bne.n	8002566 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002556:	4b47      	ldr	r3, [pc, #284]	; (8002674 <HAL_RCC_ClockConfig+0x1bc>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d119      	bne.n	8002596 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e07f      	b.n	8002666 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	2b02      	cmp	r3, #2
 800256c:	d003      	beq.n	8002576 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002572:	2b03      	cmp	r3, #3
 8002574:	d107      	bne.n	8002586 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002576:	4b3f      	ldr	r3, [pc, #252]	; (8002674 <HAL_RCC_ClockConfig+0x1bc>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d109      	bne.n	8002596 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e06f      	b.n	8002666 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002586:	4b3b      	ldr	r3, [pc, #236]	; (8002674 <HAL_RCC_ClockConfig+0x1bc>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0302 	and.w	r3, r3, #2
 800258e:	2b00      	cmp	r3, #0
 8002590:	d101      	bne.n	8002596 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e067      	b.n	8002666 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002596:	4b37      	ldr	r3, [pc, #220]	; (8002674 <HAL_RCC_ClockConfig+0x1bc>)
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	f023 0203 	bic.w	r2, r3, #3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	4934      	ldr	r1, [pc, #208]	; (8002674 <HAL_RCC_ClockConfig+0x1bc>)
 80025a4:	4313      	orrs	r3, r2
 80025a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025a8:	f7ff f8e6 	bl	8001778 <HAL_GetTick>
 80025ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ae:	e00a      	b.n	80025c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025b0:	f7ff f8e2 	bl	8001778 <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80025be:	4293      	cmp	r3, r2
 80025c0:	d901      	bls.n	80025c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e04f      	b.n	8002666 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025c6:	4b2b      	ldr	r3, [pc, #172]	; (8002674 <HAL_RCC_ClockConfig+0x1bc>)
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	f003 020c 	and.w	r2, r3, #12
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d1eb      	bne.n	80025b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025d8:	4b25      	ldr	r3, [pc, #148]	; (8002670 <HAL_RCC_ClockConfig+0x1b8>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 030f 	and.w	r3, r3, #15
 80025e0:	683a      	ldr	r2, [r7, #0]
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d20c      	bcs.n	8002600 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025e6:	4b22      	ldr	r3, [pc, #136]	; (8002670 <HAL_RCC_ClockConfig+0x1b8>)
 80025e8:	683a      	ldr	r2, [r7, #0]
 80025ea:	b2d2      	uxtb	r2, r2
 80025ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ee:	4b20      	ldr	r3, [pc, #128]	; (8002670 <HAL_RCC_ClockConfig+0x1b8>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 030f 	and.w	r3, r3, #15
 80025f6:	683a      	ldr	r2, [r7, #0]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d001      	beq.n	8002600 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e032      	b.n	8002666 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0304 	and.w	r3, r3, #4
 8002608:	2b00      	cmp	r3, #0
 800260a:	d008      	beq.n	800261e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800260c:	4b19      	ldr	r3, [pc, #100]	; (8002674 <HAL_RCC_ClockConfig+0x1bc>)
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	4916      	ldr	r1, [pc, #88]	; (8002674 <HAL_RCC_ClockConfig+0x1bc>)
 800261a:	4313      	orrs	r3, r2
 800261c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0308 	and.w	r3, r3, #8
 8002626:	2b00      	cmp	r3, #0
 8002628:	d009      	beq.n	800263e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800262a:	4b12      	ldr	r3, [pc, #72]	; (8002674 <HAL_RCC_ClockConfig+0x1bc>)
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	691b      	ldr	r3, [r3, #16]
 8002636:	00db      	lsls	r3, r3, #3
 8002638:	490e      	ldr	r1, [pc, #56]	; (8002674 <HAL_RCC_ClockConfig+0x1bc>)
 800263a:	4313      	orrs	r3, r2
 800263c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800263e:	f000 f855 	bl	80026ec <HAL_RCC_GetSysClockFreq>
 8002642:	4602      	mov	r2, r0
 8002644:	4b0b      	ldr	r3, [pc, #44]	; (8002674 <HAL_RCC_ClockConfig+0x1bc>)
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	091b      	lsrs	r3, r3, #4
 800264a:	f003 030f 	and.w	r3, r3, #15
 800264e:	490a      	ldr	r1, [pc, #40]	; (8002678 <HAL_RCC_ClockConfig+0x1c0>)
 8002650:	5ccb      	ldrb	r3, [r1, r3]
 8002652:	fa22 f303 	lsr.w	r3, r2, r3
 8002656:	4a09      	ldr	r2, [pc, #36]	; (800267c <HAL_RCC_ClockConfig+0x1c4>)
 8002658:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800265a:	4b09      	ldr	r3, [pc, #36]	; (8002680 <HAL_RCC_ClockConfig+0x1c8>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4618      	mov	r0, r3
 8002660:	f7ff f846 	bl	80016f0 <HAL_InitTick>

  return HAL_OK;
 8002664:	2300      	movs	r3, #0
}
 8002666:	4618      	mov	r0, r3
 8002668:	3710      	adds	r7, #16
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	40023c00 	.word	0x40023c00
 8002674:	40023800 	.word	0x40023800
 8002678:	08003edc 	.word	0x08003edc
 800267c:	20000008 	.word	0x20000008
 8002680:	2000000c 	.word	0x2000000c

08002684 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002688:	4b03      	ldr	r3, [pc, #12]	; (8002698 <HAL_RCC_GetHCLKFreq+0x14>)
 800268a:	681b      	ldr	r3, [r3, #0]
}
 800268c:	4618      	mov	r0, r3
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr
 8002696:	bf00      	nop
 8002698:	20000008 	.word	0x20000008

0800269c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80026a0:	f7ff fff0 	bl	8002684 <HAL_RCC_GetHCLKFreq>
 80026a4:	4602      	mov	r2, r0
 80026a6:	4b05      	ldr	r3, [pc, #20]	; (80026bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	0a9b      	lsrs	r3, r3, #10
 80026ac:	f003 0307 	and.w	r3, r3, #7
 80026b0:	4903      	ldr	r1, [pc, #12]	; (80026c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026b2:	5ccb      	ldrb	r3, [r1, r3]
 80026b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	40023800 	.word	0x40023800
 80026c0:	08003eec 	.word	0x08003eec

080026c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80026c8:	f7ff ffdc 	bl	8002684 <HAL_RCC_GetHCLKFreq>
 80026cc:	4602      	mov	r2, r0
 80026ce:	4b05      	ldr	r3, [pc, #20]	; (80026e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	0b5b      	lsrs	r3, r3, #13
 80026d4:	f003 0307 	and.w	r3, r3, #7
 80026d8:	4903      	ldr	r1, [pc, #12]	; (80026e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026da:	5ccb      	ldrb	r3, [r1, r3]
 80026dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	40023800 	.word	0x40023800
 80026e8:	08003eec 	.word	0x08003eec

080026ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026f0:	b0ae      	sub	sp, #184	; 0xb8
 80026f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80026f4:	2300      	movs	r3, #0
 80026f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80026fa:	2300      	movs	r3, #0
 80026fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002700:	2300      	movs	r3, #0
 8002702:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002706:	2300      	movs	r3, #0
 8002708:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800270c:	2300      	movs	r3, #0
 800270e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002712:	4bcb      	ldr	r3, [pc, #812]	; (8002a40 <HAL_RCC_GetSysClockFreq+0x354>)
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	f003 030c 	and.w	r3, r3, #12
 800271a:	2b0c      	cmp	r3, #12
 800271c:	f200 8206 	bhi.w	8002b2c <HAL_RCC_GetSysClockFreq+0x440>
 8002720:	a201      	add	r2, pc, #4	; (adr r2, 8002728 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002726:	bf00      	nop
 8002728:	0800275d 	.word	0x0800275d
 800272c:	08002b2d 	.word	0x08002b2d
 8002730:	08002b2d 	.word	0x08002b2d
 8002734:	08002b2d 	.word	0x08002b2d
 8002738:	08002765 	.word	0x08002765
 800273c:	08002b2d 	.word	0x08002b2d
 8002740:	08002b2d 	.word	0x08002b2d
 8002744:	08002b2d 	.word	0x08002b2d
 8002748:	0800276d 	.word	0x0800276d
 800274c:	08002b2d 	.word	0x08002b2d
 8002750:	08002b2d 	.word	0x08002b2d
 8002754:	08002b2d 	.word	0x08002b2d
 8002758:	0800295d 	.word	0x0800295d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800275c:	4bb9      	ldr	r3, [pc, #740]	; (8002a44 <HAL_RCC_GetSysClockFreq+0x358>)
 800275e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002762:	e1e7      	b.n	8002b34 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002764:	4bb8      	ldr	r3, [pc, #736]	; (8002a48 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002766:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800276a:	e1e3      	b.n	8002b34 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800276c:	4bb4      	ldr	r3, [pc, #720]	; (8002a40 <HAL_RCC_GetSysClockFreq+0x354>)
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002774:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002778:	4bb1      	ldr	r3, [pc, #708]	; (8002a40 <HAL_RCC_GetSysClockFreq+0x354>)
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d071      	beq.n	8002868 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002784:	4bae      	ldr	r3, [pc, #696]	; (8002a40 <HAL_RCC_GetSysClockFreq+0x354>)
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	099b      	lsrs	r3, r3, #6
 800278a:	2200      	movs	r2, #0
 800278c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002790:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002794:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002798:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800279c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80027a0:	2300      	movs	r3, #0
 80027a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80027a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80027aa:	4622      	mov	r2, r4
 80027ac:	462b      	mov	r3, r5
 80027ae:	f04f 0000 	mov.w	r0, #0
 80027b2:	f04f 0100 	mov.w	r1, #0
 80027b6:	0159      	lsls	r1, r3, #5
 80027b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027bc:	0150      	lsls	r0, r2, #5
 80027be:	4602      	mov	r2, r0
 80027c0:	460b      	mov	r3, r1
 80027c2:	4621      	mov	r1, r4
 80027c4:	1a51      	subs	r1, r2, r1
 80027c6:	6439      	str	r1, [r7, #64]	; 0x40
 80027c8:	4629      	mov	r1, r5
 80027ca:	eb63 0301 	sbc.w	r3, r3, r1
 80027ce:	647b      	str	r3, [r7, #68]	; 0x44
 80027d0:	f04f 0200 	mov.w	r2, #0
 80027d4:	f04f 0300 	mov.w	r3, #0
 80027d8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80027dc:	4649      	mov	r1, r9
 80027de:	018b      	lsls	r3, r1, #6
 80027e0:	4641      	mov	r1, r8
 80027e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80027e6:	4641      	mov	r1, r8
 80027e8:	018a      	lsls	r2, r1, #6
 80027ea:	4641      	mov	r1, r8
 80027ec:	1a51      	subs	r1, r2, r1
 80027ee:	63b9      	str	r1, [r7, #56]	; 0x38
 80027f0:	4649      	mov	r1, r9
 80027f2:	eb63 0301 	sbc.w	r3, r3, r1
 80027f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027f8:	f04f 0200 	mov.w	r2, #0
 80027fc:	f04f 0300 	mov.w	r3, #0
 8002800:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002804:	4649      	mov	r1, r9
 8002806:	00cb      	lsls	r3, r1, #3
 8002808:	4641      	mov	r1, r8
 800280a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800280e:	4641      	mov	r1, r8
 8002810:	00ca      	lsls	r2, r1, #3
 8002812:	4610      	mov	r0, r2
 8002814:	4619      	mov	r1, r3
 8002816:	4603      	mov	r3, r0
 8002818:	4622      	mov	r2, r4
 800281a:	189b      	adds	r3, r3, r2
 800281c:	633b      	str	r3, [r7, #48]	; 0x30
 800281e:	462b      	mov	r3, r5
 8002820:	460a      	mov	r2, r1
 8002822:	eb42 0303 	adc.w	r3, r2, r3
 8002826:	637b      	str	r3, [r7, #52]	; 0x34
 8002828:	f04f 0200 	mov.w	r2, #0
 800282c:	f04f 0300 	mov.w	r3, #0
 8002830:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002834:	4629      	mov	r1, r5
 8002836:	024b      	lsls	r3, r1, #9
 8002838:	4621      	mov	r1, r4
 800283a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800283e:	4621      	mov	r1, r4
 8002840:	024a      	lsls	r2, r1, #9
 8002842:	4610      	mov	r0, r2
 8002844:	4619      	mov	r1, r3
 8002846:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800284a:	2200      	movs	r2, #0
 800284c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002850:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002854:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002858:	f7fd fcd4 	bl	8000204 <__aeabi_uldivmod>
 800285c:	4602      	mov	r2, r0
 800285e:	460b      	mov	r3, r1
 8002860:	4613      	mov	r3, r2
 8002862:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002866:	e067      	b.n	8002938 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002868:	4b75      	ldr	r3, [pc, #468]	; (8002a40 <HAL_RCC_GetSysClockFreq+0x354>)
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	099b      	lsrs	r3, r3, #6
 800286e:	2200      	movs	r2, #0
 8002870:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002874:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002878:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800287c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002880:	67bb      	str	r3, [r7, #120]	; 0x78
 8002882:	2300      	movs	r3, #0
 8002884:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002886:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800288a:	4622      	mov	r2, r4
 800288c:	462b      	mov	r3, r5
 800288e:	f04f 0000 	mov.w	r0, #0
 8002892:	f04f 0100 	mov.w	r1, #0
 8002896:	0159      	lsls	r1, r3, #5
 8002898:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800289c:	0150      	lsls	r0, r2, #5
 800289e:	4602      	mov	r2, r0
 80028a0:	460b      	mov	r3, r1
 80028a2:	4621      	mov	r1, r4
 80028a4:	1a51      	subs	r1, r2, r1
 80028a6:	62b9      	str	r1, [r7, #40]	; 0x28
 80028a8:	4629      	mov	r1, r5
 80028aa:	eb63 0301 	sbc.w	r3, r3, r1
 80028ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028b0:	f04f 0200 	mov.w	r2, #0
 80028b4:	f04f 0300 	mov.w	r3, #0
 80028b8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80028bc:	4649      	mov	r1, r9
 80028be:	018b      	lsls	r3, r1, #6
 80028c0:	4641      	mov	r1, r8
 80028c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80028c6:	4641      	mov	r1, r8
 80028c8:	018a      	lsls	r2, r1, #6
 80028ca:	4641      	mov	r1, r8
 80028cc:	ebb2 0a01 	subs.w	sl, r2, r1
 80028d0:	4649      	mov	r1, r9
 80028d2:	eb63 0b01 	sbc.w	fp, r3, r1
 80028d6:	f04f 0200 	mov.w	r2, #0
 80028da:	f04f 0300 	mov.w	r3, #0
 80028de:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80028e2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80028e6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80028ea:	4692      	mov	sl, r2
 80028ec:	469b      	mov	fp, r3
 80028ee:	4623      	mov	r3, r4
 80028f0:	eb1a 0303 	adds.w	r3, sl, r3
 80028f4:	623b      	str	r3, [r7, #32]
 80028f6:	462b      	mov	r3, r5
 80028f8:	eb4b 0303 	adc.w	r3, fp, r3
 80028fc:	627b      	str	r3, [r7, #36]	; 0x24
 80028fe:	f04f 0200 	mov.w	r2, #0
 8002902:	f04f 0300 	mov.w	r3, #0
 8002906:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800290a:	4629      	mov	r1, r5
 800290c:	028b      	lsls	r3, r1, #10
 800290e:	4621      	mov	r1, r4
 8002910:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002914:	4621      	mov	r1, r4
 8002916:	028a      	lsls	r2, r1, #10
 8002918:	4610      	mov	r0, r2
 800291a:	4619      	mov	r1, r3
 800291c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002920:	2200      	movs	r2, #0
 8002922:	673b      	str	r3, [r7, #112]	; 0x70
 8002924:	677a      	str	r2, [r7, #116]	; 0x74
 8002926:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800292a:	f7fd fc6b 	bl	8000204 <__aeabi_uldivmod>
 800292e:	4602      	mov	r2, r0
 8002930:	460b      	mov	r3, r1
 8002932:	4613      	mov	r3, r2
 8002934:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002938:	4b41      	ldr	r3, [pc, #260]	; (8002a40 <HAL_RCC_GetSysClockFreq+0x354>)
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	0c1b      	lsrs	r3, r3, #16
 800293e:	f003 0303 	and.w	r3, r3, #3
 8002942:	3301      	adds	r3, #1
 8002944:	005b      	lsls	r3, r3, #1
 8002946:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800294a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800294e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002952:	fbb2 f3f3 	udiv	r3, r2, r3
 8002956:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800295a:	e0eb      	b.n	8002b34 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800295c:	4b38      	ldr	r3, [pc, #224]	; (8002a40 <HAL_RCC_GetSysClockFreq+0x354>)
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002964:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002968:	4b35      	ldr	r3, [pc, #212]	; (8002a40 <HAL_RCC_GetSysClockFreq+0x354>)
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d06b      	beq.n	8002a4c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002974:	4b32      	ldr	r3, [pc, #200]	; (8002a40 <HAL_RCC_GetSysClockFreq+0x354>)
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	099b      	lsrs	r3, r3, #6
 800297a:	2200      	movs	r2, #0
 800297c:	66bb      	str	r3, [r7, #104]	; 0x68
 800297e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002980:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002982:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002986:	663b      	str	r3, [r7, #96]	; 0x60
 8002988:	2300      	movs	r3, #0
 800298a:	667b      	str	r3, [r7, #100]	; 0x64
 800298c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002990:	4622      	mov	r2, r4
 8002992:	462b      	mov	r3, r5
 8002994:	f04f 0000 	mov.w	r0, #0
 8002998:	f04f 0100 	mov.w	r1, #0
 800299c:	0159      	lsls	r1, r3, #5
 800299e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029a2:	0150      	lsls	r0, r2, #5
 80029a4:	4602      	mov	r2, r0
 80029a6:	460b      	mov	r3, r1
 80029a8:	4621      	mov	r1, r4
 80029aa:	1a51      	subs	r1, r2, r1
 80029ac:	61b9      	str	r1, [r7, #24]
 80029ae:	4629      	mov	r1, r5
 80029b0:	eb63 0301 	sbc.w	r3, r3, r1
 80029b4:	61fb      	str	r3, [r7, #28]
 80029b6:	f04f 0200 	mov.w	r2, #0
 80029ba:	f04f 0300 	mov.w	r3, #0
 80029be:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80029c2:	4659      	mov	r1, fp
 80029c4:	018b      	lsls	r3, r1, #6
 80029c6:	4651      	mov	r1, sl
 80029c8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80029cc:	4651      	mov	r1, sl
 80029ce:	018a      	lsls	r2, r1, #6
 80029d0:	4651      	mov	r1, sl
 80029d2:	ebb2 0801 	subs.w	r8, r2, r1
 80029d6:	4659      	mov	r1, fp
 80029d8:	eb63 0901 	sbc.w	r9, r3, r1
 80029dc:	f04f 0200 	mov.w	r2, #0
 80029e0:	f04f 0300 	mov.w	r3, #0
 80029e4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80029e8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80029ec:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80029f0:	4690      	mov	r8, r2
 80029f2:	4699      	mov	r9, r3
 80029f4:	4623      	mov	r3, r4
 80029f6:	eb18 0303 	adds.w	r3, r8, r3
 80029fa:	613b      	str	r3, [r7, #16]
 80029fc:	462b      	mov	r3, r5
 80029fe:	eb49 0303 	adc.w	r3, r9, r3
 8002a02:	617b      	str	r3, [r7, #20]
 8002a04:	f04f 0200 	mov.w	r2, #0
 8002a08:	f04f 0300 	mov.w	r3, #0
 8002a0c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002a10:	4629      	mov	r1, r5
 8002a12:	024b      	lsls	r3, r1, #9
 8002a14:	4621      	mov	r1, r4
 8002a16:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002a1a:	4621      	mov	r1, r4
 8002a1c:	024a      	lsls	r2, r1, #9
 8002a1e:	4610      	mov	r0, r2
 8002a20:	4619      	mov	r1, r3
 8002a22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002a26:	2200      	movs	r2, #0
 8002a28:	65bb      	str	r3, [r7, #88]	; 0x58
 8002a2a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002a2c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002a30:	f7fd fbe8 	bl	8000204 <__aeabi_uldivmod>
 8002a34:	4602      	mov	r2, r0
 8002a36:	460b      	mov	r3, r1
 8002a38:	4613      	mov	r3, r2
 8002a3a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002a3e:	e065      	b.n	8002b0c <HAL_RCC_GetSysClockFreq+0x420>
 8002a40:	40023800 	.word	0x40023800
 8002a44:	00f42400 	.word	0x00f42400
 8002a48:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a4c:	4b3d      	ldr	r3, [pc, #244]	; (8002b44 <HAL_RCC_GetSysClockFreq+0x458>)
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	099b      	lsrs	r3, r3, #6
 8002a52:	2200      	movs	r2, #0
 8002a54:	4618      	mov	r0, r3
 8002a56:	4611      	mov	r1, r2
 8002a58:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002a5c:	653b      	str	r3, [r7, #80]	; 0x50
 8002a5e:	2300      	movs	r3, #0
 8002a60:	657b      	str	r3, [r7, #84]	; 0x54
 8002a62:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002a66:	4642      	mov	r2, r8
 8002a68:	464b      	mov	r3, r9
 8002a6a:	f04f 0000 	mov.w	r0, #0
 8002a6e:	f04f 0100 	mov.w	r1, #0
 8002a72:	0159      	lsls	r1, r3, #5
 8002a74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a78:	0150      	lsls	r0, r2, #5
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	460b      	mov	r3, r1
 8002a7e:	4641      	mov	r1, r8
 8002a80:	1a51      	subs	r1, r2, r1
 8002a82:	60b9      	str	r1, [r7, #8]
 8002a84:	4649      	mov	r1, r9
 8002a86:	eb63 0301 	sbc.w	r3, r3, r1
 8002a8a:	60fb      	str	r3, [r7, #12]
 8002a8c:	f04f 0200 	mov.w	r2, #0
 8002a90:	f04f 0300 	mov.w	r3, #0
 8002a94:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002a98:	4659      	mov	r1, fp
 8002a9a:	018b      	lsls	r3, r1, #6
 8002a9c:	4651      	mov	r1, sl
 8002a9e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002aa2:	4651      	mov	r1, sl
 8002aa4:	018a      	lsls	r2, r1, #6
 8002aa6:	4651      	mov	r1, sl
 8002aa8:	1a54      	subs	r4, r2, r1
 8002aaa:	4659      	mov	r1, fp
 8002aac:	eb63 0501 	sbc.w	r5, r3, r1
 8002ab0:	f04f 0200 	mov.w	r2, #0
 8002ab4:	f04f 0300 	mov.w	r3, #0
 8002ab8:	00eb      	lsls	r3, r5, #3
 8002aba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002abe:	00e2      	lsls	r2, r4, #3
 8002ac0:	4614      	mov	r4, r2
 8002ac2:	461d      	mov	r5, r3
 8002ac4:	4643      	mov	r3, r8
 8002ac6:	18e3      	adds	r3, r4, r3
 8002ac8:	603b      	str	r3, [r7, #0]
 8002aca:	464b      	mov	r3, r9
 8002acc:	eb45 0303 	adc.w	r3, r5, r3
 8002ad0:	607b      	str	r3, [r7, #4]
 8002ad2:	f04f 0200 	mov.w	r2, #0
 8002ad6:	f04f 0300 	mov.w	r3, #0
 8002ada:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ade:	4629      	mov	r1, r5
 8002ae0:	028b      	lsls	r3, r1, #10
 8002ae2:	4621      	mov	r1, r4
 8002ae4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ae8:	4621      	mov	r1, r4
 8002aea:	028a      	lsls	r2, r1, #10
 8002aec:	4610      	mov	r0, r2
 8002aee:	4619      	mov	r1, r3
 8002af0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002af4:	2200      	movs	r2, #0
 8002af6:	64bb      	str	r3, [r7, #72]	; 0x48
 8002af8:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002afa:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002afe:	f7fd fb81 	bl	8000204 <__aeabi_uldivmod>
 8002b02:	4602      	mov	r2, r0
 8002b04:	460b      	mov	r3, r1
 8002b06:	4613      	mov	r3, r2
 8002b08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002b0c:	4b0d      	ldr	r3, [pc, #52]	; (8002b44 <HAL_RCC_GetSysClockFreq+0x458>)
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	0f1b      	lsrs	r3, r3, #28
 8002b12:	f003 0307 	and.w	r3, r3, #7
 8002b16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002b1a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002b1e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b26:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002b2a:	e003      	b.n	8002b34 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b2c:	4b06      	ldr	r3, [pc, #24]	; (8002b48 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002b2e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002b32:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b34:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	37b8      	adds	r7, #184	; 0xb8
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b42:	bf00      	nop
 8002b44:	40023800 	.word	0x40023800
 8002b48:	00f42400 	.word	0x00f42400

08002b4c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b086      	sub	sp, #24
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d101      	bne.n	8002b5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e28d      	b.n	800307a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0301 	and.w	r3, r3, #1
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	f000 8083 	beq.w	8002c72 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002b6c:	4b94      	ldr	r3, [pc, #592]	; (8002dc0 <HAL_RCC_OscConfig+0x274>)
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	f003 030c 	and.w	r3, r3, #12
 8002b74:	2b04      	cmp	r3, #4
 8002b76:	d019      	beq.n	8002bac <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002b78:	4b91      	ldr	r3, [pc, #580]	; (8002dc0 <HAL_RCC_OscConfig+0x274>)
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002b80:	2b08      	cmp	r3, #8
 8002b82:	d106      	bne.n	8002b92 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002b84:	4b8e      	ldr	r3, [pc, #568]	; (8002dc0 <HAL_RCC_OscConfig+0x274>)
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b90:	d00c      	beq.n	8002bac <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b92:	4b8b      	ldr	r3, [pc, #556]	; (8002dc0 <HAL_RCC_OscConfig+0x274>)
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002b9a:	2b0c      	cmp	r3, #12
 8002b9c:	d112      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b9e:	4b88      	ldr	r3, [pc, #544]	; (8002dc0 <HAL_RCC_OscConfig+0x274>)
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ba6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002baa:	d10b      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bac:	4b84      	ldr	r3, [pc, #528]	; (8002dc0 <HAL_RCC_OscConfig+0x274>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d05b      	beq.n	8002c70 <HAL_RCC_OscConfig+0x124>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d157      	bne.n	8002c70 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e25a      	b.n	800307a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bcc:	d106      	bne.n	8002bdc <HAL_RCC_OscConfig+0x90>
 8002bce:	4b7c      	ldr	r3, [pc, #496]	; (8002dc0 <HAL_RCC_OscConfig+0x274>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a7b      	ldr	r2, [pc, #492]	; (8002dc0 <HAL_RCC_OscConfig+0x274>)
 8002bd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bd8:	6013      	str	r3, [r2, #0]
 8002bda:	e01d      	b.n	8002c18 <HAL_RCC_OscConfig+0xcc>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002be4:	d10c      	bne.n	8002c00 <HAL_RCC_OscConfig+0xb4>
 8002be6:	4b76      	ldr	r3, [pc, #472]	; (8002dc0 <HAL_RCC_OscConfig+0x274>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a75      	ldr	r2, [pc, #468]	; (8002dc0 <HAL_RCC_OscConfig+0x274>)
 8002bec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bf0:	6013      	str	r3, [r2, #0]
 8002bf2:	4b73      	ldr	r3, [pc, #460]	; (8002dc0 <HAL_RCC_OscConfig+0x274>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a72      	ldr	r2, [pc, #456]	; (8002dc0 <HAL_RCC_OscConfig+0x274>)
 8002bf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bfc:	6013      	str	r3, [r2, #0]
 8002bfe:	e00b      	b.n	8002c18 <HAL_RCC_OscConfig+0xcc>
 8002c00:	4b6f      	ldr	r3, [pc, #444]	; (8002dc0 <HAL_RCC_OscConfig+0x274>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a6e      	ldr	r2, [pc, #440]	; (8002dc0 <HAL_RCC_OscConfig+0x274>)
 8002c06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c0a:	6013      	str	r3, [r2, #0]
 8002c0c:	4b6c      	ldr	r3, [pc, #432]	; (8002dc0 <HAL_RCC_OscConfig+0x274>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a6b      	ldr	r2, [pc, #428]	; (8002dc0 <HAL_RCC_OscConfig+0x274>)
 8002c12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d013      	beq.n	8002c48 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c20:	f7fe fdaa 	bl	8001778 <HAL_GetTick>
 8002c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c26:	e008      	b.n	8002c3a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c28:	f7fe fda6 	bl	8001778 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	2b64      	cmp	r3, #100	; 0x64
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e21f      	b.n	800307a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c3a:	4b61      	ldr	r3, [pc, #388]	; (8002dc0 <HAL_RCC_OscConfig+0x274>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d0f0      	beq.n	8002c28 <HAL_RCC_OscConfig+0xdc>
 8002c46:	e014      	b.n	8002c72 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c48:	f7fe fd96 	bl	8001778 <HAL_GetTick>
 8002c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c4e:	e008      	b.n	8002c62 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c50:	f7fe fd92 	bl	8001778 <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	2b64      	cmp	r3, #100	; 0x64
 8002c5c:	d901      	bls.n	8002c62 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e20b      	b.n	800307a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c62:	4b57      	ldr	r3, [pc, #348]	; (8002dc0 <HAL_RCC_OscConfig+0x274>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d1f0      	bne.n	8002c50 <HAL_RCC_OscConfig+0x104>
 8002c6e:	e000      	b.n	8002c72 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0302 	and.w	r3, r3, #2
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d06f      	beq.n	8002d5e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002c7e:	4b50      	ldr	r3, [pc, #320]	; (8002dc0 <HAL_RCC_OscConfig+0x274>)
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	f003 030c 	and.w	r3, r3, #12
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d017      	beq.n	8002cba <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002c8a:	4b4d      	ldr	r3, [pc, #308]	; (8002dc0 <HAL_RCC_OscConfig+0x274>)
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002c92:	2b08      	cmp	r3, #8
 8002c94:	d105      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002c96:	4b4a      	ldr	r3, [pc, #296]	; (8002dc0 <HAL_RCC_OscConfig+0x274>)
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d00b      	beq.n	8002cba <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ca2:	4b47      	ldr	r3, [pc, #284]	; (8002dc0 <HAL_RCC_OscConfig+0x274>)
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002caa:	2b0c      	cmp	r3, #12
 8002cac:	d11c      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cae:	4b44      	ldr	r3, [pc, #272]	; (8002dc0 <HAL_RCC_OscConfig+0x274>)
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d116      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cba:	4b41      	ldr	r3, [pc, #260]	; (8002dc0 <HAL_RCC_OscConfig+0x274>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0302 	and.w	r3, r3, #2
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d005      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x186>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d001      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e1d3      	b.n	800307a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cd2:	4b3b      	ldr	r3, [pc, #236]	; (8002dc0 <HAL_RCC_OscConfig+0x274>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	691b      	ldr	r3, [r3, #16]
 8002cde:	00db      	lsls	r3, r3, #3
 8002ce0:	4937      	ldr	r1, [pc, #220]	; (8002dc0 <HAL_RCC_OscConfig+0x274>)
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ce6:	e03a      	b.n	8002d5e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d020      	beq.n	8002d32 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cf0:	4b34      	ldr	r3, [pc, #208]	; (8002dc4 <HAL_RCC_OscConfig+0x278>)
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf6:	f7fe fd3f 	bl	8001778 <HAL_GetTick>
 8002cfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cfc:	e008      	b.n	8002d10 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cfe:	f7fe fd3b 	bl	8001778 <HAL_GetTick>
 8002d02:	4602      	mov	r2, r0
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	1ad3      	subs	r3, r2, r3
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d901      	bls.n	8002d10 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	e1b4      	b.n	800307a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d10:	4b2b      	ldr	r3, [pc, #172]	; (8002dc0 <HAL_RCC_OscConfig+0x274>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0302 	and.w	r3, r3, #2
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d0f0      	beq.n	8002cfe <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d1c:	4b28      	ldr	r3, [pc, #160]	; (8002dc0 <HAL_RCC_OscConfig+0x274>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	691b      	ldr	r3, [r3, #16]
 8002d28:	00db      	lsls	r3, r3, #3
 8002d2a:	4925      	ldr	r1, [pc, #148]	; (8002dc0 <HAL_RCC_OscConfig+0x274>)
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	600b      	str	r3, [r1, #0]
 8002d30:	e015      	b.n	8002d5e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d32:	4b24      	ldr	r3, [pc, #144]	; (8002dc4 <HAL_RCC_OscConfig+0x278>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d38:	f7fe fd1e 	bl	8001778 <HAL_GetTick>
 8002d3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d3e:	e008      	b.n	8002d52 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d40:	f7fe fd1a 	bl	8001778 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d901      	bls.n	8002d52 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e193      	b.n	800307a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d52:	4b1b      	ldr	r3, [pc, #108]	; (8002dc0 <HAL_RCC_OscConfig+0x274>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0302 	and.w	r3, r3, #2
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d1f0      	bne.n	8002d40 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0308 	and.w	r3, r3, #8
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d036      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	695b      	ldr	r3, [r3, #20]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d016      	beq.n	8002da0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d72:	4b15      	ldr	r3, [pc, #84]	; (8002dc8 <HAL_RCC_OscConfig+0x27c>)
 8002d74:	2201      	movs	r2, #1
 8002d76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d78:	f7fe fcfe 	bl	8001778 <HAL_GetTick>
 8002d7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d7e:	e008      	b.n	8002d92 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d80:	f7fe fcfa 	bl	8001778 <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d901      	bls.n	8002d92 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e173      	b.n	800307a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d92:	4b0b      	ldr	r3, [pc, #44]	; (8002dc0 <HAL_RCC_OscConfig+0x274>)
 8002d94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d96:	f003 0302 	and.w	r3, r3, #2
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d0f0      	beq.n	8002d80 <HAL_RCC_OscConfig+0x234>
 8002d9e:	e01b      	b.n	8002dd8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002da0:	4b09      	ldr	r3, [pc, #36]	; (8002dc8 <HAL_RCC_OscConfig+0x27c>)
 8002da2:	2200      	movs	r2, #0
 8002da4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002da6:	f7fe fce7 	bl	8001778 <HAL_GetTick>
 8002daa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dac:	e00e      	b.n	8002dcc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dae:	f7fe fce3 	bl	8001778 <HAL_GetTick>
 8002db2:	4602      	mov	r2, r0
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d907      	bls.n	8002dcc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	e15c      	b.n	800307a <HAL_RCC_OscConfig+0x52e>
 8002dc0:	40023800 	.word	0x40023800
 8002dc4:	42470000 	.word	0x42470000
 8002dc8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dcc:	4b8a      	ldr	r3, [pc, #552]	; (8002ff8 <HAL_RCC_OscConfig+0x4ac>)
 8002dce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dd0:	f003 0302 	and.w	r3, r3, #2
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d1ea      	bne.n	8002dae <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0304 	and.w	r3, r3, #4
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	f000 8097 	beq.w	8002f14 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002de6:	2300      	movs	r3, #0
 8002de8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dea:	4b83      	ldr	r3, [pc, #524]	; (8002ff8 <HAL_RCC_OscConfig+0x4ac>)
 8002dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d10f      	bne.n	8002e16 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002df6:	2300      	movs	r3, #0
 8002df8:	60bb      	str	r3, [r7, #8]
 8002dfa:	4b7f      	ldr	r3, [pc, #508]	; (8002ff8 <HAL_RCC_OscConfig+0x4ac>)
 8002dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfe:	4a7e      	ldr	r2, [pc, #504]	; (8002ff8 <HAL_RCC_OscConfig+0x4ac>)
 8002e00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e04:	6413      	str	r3, [r2, #64]	; 0x40
 8002e06:	4b7c      	ldr	r3, [pc, #496]	; (8002ff8 <HAL_RCC_OscConfig+0x4ac>)
 8002e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e0e:	60bb      	str	r3, [r7, #8]
 8002e10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e12:	2301      	movs	r3, #1
 8002e14:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e16:	4b79      	ldr	r3, [pc, #484]	; (8002ffc <HAL_RCC_OscConfig+0x4b0>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d118      	bne.n	8002e54 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e22:	4b76      	ldr	r3, [pc, #472]	; (8002ffc <HAL_RCC_OscConfig+0x4b0>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a75      	ldr	r2, [pc, #468]	; (8002ffc <HAL_RCC_OscConfig+0x4b0>)
 8002e28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e2e:	f7fe fca3 	bl	8001778 <HAL_GetTick>
 8002e32:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e34:	e008      	b.n	8002e48 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e36:	f7fe fc9f 	bl	8001778 <HAL_GetTick>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	d901      	bls.n	8002e48 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002e44:	2303      	movs	r3, #3
 8002e46:	e118      	b.n	800307a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e48:	4b6c      	ldr	r3, [pc, #432]	; (8002ffc <HAL_RCC_OscConfig+0x4b0>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d0f0      	beq.n	8002e36 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d106      	bne.n	8002e6a <HAL_RCC_OscConfig+0x31e>
 8002e5c:	4b66      	ldr	r3, [pc, #408]	; (8002ff8 <HAL_RCC_OscConfig+0x4ac>)
 8002e5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e60:	4a65      	ldr	r2, [pc, #404]	; (8002ff8 <HAL_RCC_OscConfig+0x4ac>)
 8002e62:	f043 0301 	orr.w	r3, r3, #1
 8002e66:	6713      	str	r3, [r2, #112]	; 0x70
 8002e68:	e01c      	b.n	8002ea4 <HAL_RCC_OscConfig+0x358>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	2b05      	cmp	r3, #5
 8002e70:	d10c      	bne.n	8002e8c <HAL_RCC_OscConfig+0x340>
 8002e72:	4b61      	ldr	r3, [pc, #388]	; (8002ff8 <HAL_RCC_OscConfig+0x4ac>)
 8002e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e76:	4a60      	ldr	r2, [pc, #384]	; (8002ff8 <HAL_RCC_OscConfig+0x4ac>)
 8002e78:	f043 0304 	orr.w	r3, r3, #4
 8002e7c:	6713      	str	r3, [r2, #112]	; 0x70
 8002e7e:	4b5e      	ldr	r3, [pc, #376]	; (8002ff8 <HAL_RCC_OscConfig+0x4ac>)
 8002e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e82:	4a5d      	ldr	r2, [pc, #372]	; (8002ff8 <HAL_RCC_OscConfig+0x4ac>)
 8002e84:	f043 0301 	orr.w	r3, r3, #1
 8002e88:	6713      	str	r3, [r2, #112]	; 0x70
 8002e8a:	e00b      	b.n	8002ea4 <HAL_RCC_OscConfig+0x358>
 8002e8c:	4b5a      	ldr	r3, [pc, #360]	; (8002ff8 <HAL_RCC_OscConfig+0x4ac>)
 8002e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e90:	4a59      	ldr	r2, [pc, #356]	; (8002ff8 <HAL_RCC_OscConfig+0x4ac>)
 8002e92:	f023 0301 	bic.w	r3, r3, #1
 8002e96:	6713      	str	r3, [r2, #112]	; 0x70
 8002e98:	4b57      	ldr	r3, [pc, #348]	; (8002ff8 <HAL_RCC_OscConfig+0x4ac>)
 8002e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e9c:	4a56      	ldr	r2, [pc, #344]	; (8002ff8 <HAL_RCC_OscConfig+0x4ac>)
 8002e9e:	f023 0304 	bic.w	r3, r3, #4
 8002ea2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d015      	beq.n	8002ed8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eac:	f7fe fc64 	bl	8001778 <HAL_GetTick>
 8002eb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eb2:	e00a      	b.n	8002eca <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002eb4:	f7fe fc60 	bl	8001778 <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d901      	bls.n	8002eca <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e0d7      	b.n	800307a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eca:	4b4b      	ldr	r3, [pc, #300]	; (8002ff8 <HAL_RCC_OscConfig+0x4ac>)
 8002ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ece:	f003 0302 	and.w	r3, r3, #2
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d0ee      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x368>
 8002ed6:	e014      	b.n	8002f02 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ed8:	f7fe fc4e 	bl	8001778 <HAL_GetTick>
 8002edc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ede:	e00a      	b.n	8002ef6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ee0:	f7fe fc4a 	bl	8001778 <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d901      	bls.n	8002ef6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e0c1      	b.n	800307a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ef6:	4b40      	ldr	r3, [pc, #256]	; (8002ff8 <HAL_RCC_OscConfig+0x4ac>)
 8002ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002efa:	f003 0302 	and.w	r3, r3, #2
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d1ee      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f02:	7dfb      	ldrb	r3, [r7, #23]
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d105      	bne.n	8002f14 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f08:	4b3b      	ldr	r3, [pc, #236]	; (8002ff8 <HAL_RCC_OscConfig+0x4ac>)
 8002f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0c:	4a3a      	ldr	r2, [pc, #232]	; (8002ff8 <HAL_RCC_OscConfig+0x4ac>)
 8002f0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f12:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	699b      	ldr	r3, [r3, #24]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	f000 80ad 	beq.w	8003078 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f1e:	4b36      	ldr	r3, [pc, #216]	; (8002ff8 <HAL_RCC_OscConfig+0x4ac>)
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	f003 030c 	and.w	r3, r3, #12
 8002f26:	2b08      	cmp	r3, #8
 8002f28:	d060      	beq.n	8002fec <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	699b      	ldr	r3, [r3, #24]
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d145      	bne.n	8002fbe <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f32:	4b33      	ldr	r3, [pc, #204]	; (8003000 <HAL_RCC_OscConfig+0x4b4>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f38:	f7fe fc1e 	bl	8001778 <HAL_GetTick>
 8002f3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f3e:	e008      	b.n	8002f52 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f40:	f7fe fc1a 	bl	8001778 <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d901      	bls.n	8002f52 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e093      	b.n	800307a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f52:	4b29      	ldr	r3, [pc, #164]	; (8002ff8 <HAL_RCC_OscConfig+0x4ac>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d1f0      	bne.n	8002f40 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	69da      	ldr	r2, [r3, #28]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a1b      	ldr	r3, [r3, #32]
 8002f66:	431a      	orrs	r2, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6c:	019b      	lsls	r3, r3, #6
 8002f6e:	431a      	orrs	r2, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f74:	085b      	lsrs	r3, r3, #1
 8002f76:	3b01      	subs	r3, #1
 8002f78:	041b      	lsls	r3, r3, #16
 8002f7a:	431a      	orrs	r2, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f80:	061b      	lsls	r3, r3, #24
 8002f82:	431a      	orrs	r2, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f88:	071b      	lsls	r3, r3, #28
 8002f8a:	491b      	ldr	r1, [pc, #108]	; (8002ff8 <HAL_RCC_OscConfig+0x4ac>)
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f90:	4b1b      	ldr	r3, [pc, #108]	; (8003000 <HAL_RCC_OscConfig+0x4b4>)
 8002f92:	2201      	movs	r2, #1
 8002f94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f96:	f7fe fbef 	bl	8001778 <HAL_GetTick>
 8002f9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f9c:	e008      	b.n	8002fb0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f9e:	f7fe fbeb 	bl	8001778 <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	d901      	bls.n	8002fb0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002fac:	2303      	movs	r3, #3
 8002fae:	e064      	b.n	800307a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fb0:	4b11      	ldr	r3, [pc, #68]	; (8002ff8 <HAL_RCC_OscConfig+0x4ac>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d0f0      	beq.n	8002f9e <HAL_RCC_OscConfig+0x452>
 8002fbc:	e05c      	b.n	8003078 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fbe:	4b10      	ldr	r3, [pc, #64]	; (8003000 <HAL_RCC_OscConfig+0x4b4>)
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc4:	f7fe fbd8 	bl	8001778 <HAL_GetTick>
 8002fc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fca:	e008      	b.n	8002fde <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fcc:	f7fe fbd4 	bl	8001778 <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d901      	bls.n	8002fde <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e04d      	b.n	800307a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fde:	4b06      	ldr	r3, [pc, #24]	; (8002ff8 <HAL_RCC_OscConfig+0x4ac>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d1f0      	bne.n	8002fcc <HAL_RCC_OscConfig+0x480>
 8002fea:	e045      	b.n	8003078 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	699b      	ldr	r3, [r3, #24]
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d107      	bne.n	8003004 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e040      	b.n	800307a <HAL_RCC_OscConfig+0x52e>
 8002ff8:	40023800 	.word	0x40023800
 8002ffc:	40007000 	.word	0x40007000
 8003000:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003004:	4b1f      	ldr	r3, [pc, #124]	; (8003084 <HAL_RCC_OscConfig+0x538>)
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	699b      	ldr	r3, [r3, #24]
 800300e:	2b01      	cmp	r3, #1
 8003010:	d030      	beq.n	8003074 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800301c:	429a      	cmp	r2, r3
 800301e:	d129      	bne.n	8003074 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800302a:	429a      	cmp	r2, r3
 800302c:	d122      	bne.n	8003074 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800302e:	68fa      	ldr	r2, [r7, #12]
 8003030:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003034:	4013      	ands	r3, r2
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800303a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800303c:	4293      	cmp	r3, r2
 800303e:	d119      	bne.n	8003074 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800304a:	085b      	lsrs	r3, r3, #1
 800304c:	3b01      	subs	r3, #1
 800304e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003050:	429a      	cmp	r2, r3
 8003052:	d10f      	bne.n	8003074 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800305e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003060:	429a      	cmp	r2, r3
 8003062:	d107      	bne.n	8003074 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003070:	429a      	cmp	r2, r3
 8003072:	d001      	beq.n	8003078 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e000      	b.n	800307a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003078:	2300      	movs	r3, #0
}
 800307a:	4618      	mov	r0, r3
 800307c:	3718      	adds	r7, #24
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	40023800 	.word	0x40023800

08003088 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b082      	sub	sp, #8
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d101      	bne.n	800309a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e03f      	b.n	800311a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d106      	bne.n	80030b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2200      	movs	r2, #0
 80030aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f7fe fa18 	bl	80014e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2224      	movs	r2, #36	; 0x24
 80030b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	68da      	ldr	r2, [r3, #12]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80030ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f000 f9cb 	bl	8003468 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	691a      	ldr	r2, [r3, #16]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80030e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	695a      	ldr	r2, [r3, #20]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80030f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	68da      	ldr	r2, [r3, #12]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003100:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2220      	movs	r2, #32
 800310c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2220      	movs	r2, #32
 8003114:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	3708      	adds	r7, #8
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}

08003122 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003122:	b580      	push	{r7, lr}
 8003124:	b08a      	sub	sp, #40	; 0x28
 8003126:	af02      	add	r7, sp, #8
 8003128:	60f8      	str	r0, [r7, #12]
 800312a:	60b9      	str	r1, [r7, #8]
 800312c:	603b      	str	r3, [r7, #0]
 800312e:	4613      	mov	r3, r2
 8003130:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003132:	2300      	movs	r3, #0
 8003134:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800313c:	b2db      	uxtb	r3, r3
 800313e:	2b20      	cmp	r3, #32
 8003140:	d17c      	bne.n	800323c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d002      	beq.n	800314e <HAL_UART_Transmit+0x2c>
 8003148:	88fb      	ldrh	r3, [r7, #6]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d101      	bne.n	8003152 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e075      	b.n	800323e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003158:	2b01      	cmp	r3, #1
 800315a:	d101      	bne.n	8003160 <HAL_UART_Transmit+0x3e>
 800315c:	2302      	movs	r3, #2
 800315e:	e06e      	b.n	800323e <HAL_UART_Transmit+0x11c>
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2201      	movs	r2, #1
 8003164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2200      	movs	r2, #0
 800316c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2221      	movs	r2, #33	; 0x21
 8003172:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003176:	f7fe faff 	bl	8001778 <HAL_GetTick>
 800317a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	88fa      	ldrh	r2, [r7, #6]
 8003180:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	88fa      	ldrh	r2, [r7, #6]
 8003186:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003190:	d108      	bne.n	80031a4 <HAL_UART_Transmit+0x82>
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	691b      	ldr	r3, [r3, #16]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d104      	bne.n	80031a4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800319a:	2300      	movs	r3, #0
 800319c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	61bb      	str	r3, [r7, #24]
 80031a2:	e003      	b.n	80031ac <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80031a8:	2300      	movs	r3, #0
 80031aa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80031b4:	e02a      	b.n	800320c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	9300      	str	r3, [sp, #0]
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	2200      	movs	r2, #0
 80031be:	2180      	movs	r1, #128	; 0x80
 80031c0:	68f8      	ldr	r0, [r7, #12]
 80031c2:	f000 f8e2 	bl	800338a <UART_WaitOnFlagUntilTimeout>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d001      	beq.n	80031d0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80031cc:	2303      	movs	r3, #3
 80031ce:	e036      	b.n	800323e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d10b      	bne.n	80031ee <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80031d6:	69bb      	ldr	r3, [r7, #24]
 80031d8:	881b      	ldrh	r3, [r3, #0]
 80031da:	461a      	mov	r2, r3
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031e4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80031e6:	69bb      	ldr	r3, [r7, #24]
 80031e8:	3302      	adds	r3, #2
 80031ea:	61bb      	str	r3, [r7, #24]
 80031ec:	e007      	b.n	80031fe <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	781a      	ldrb	r2, [r3, #0]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	3301      	adds	r3, #1
 80031fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003202:	b29b      	uxth	r3, r3
 8003204:	3b01      	subs	r3, #1
 8003206:	b29a      	uxth	r2, r3
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003210:	b29b      	uxth	r3, r3
 8003212:	2b00      	cmp	r3, #0
 8003214:	d1cf      	bne.n	80031b6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	9300      	str	r3, [sp, #0]
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	2200      	movs	r2, #0
 800321e:	2140      	movs	r1, #64	; 0x40
 8003220:	68f8      	ldr	r0, [r7, #12]
 8003222:	f000 f8b2 	bl	800338a <UART_WaitOnFlagUntilTimeout>
 8003226:	4603      	mov	r3, r0
 8003228:	2b00      	cmp	r3, #0
 800322a:	d001      	beq.n	8003230 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800322c:	2303      	movs	r3, #3
 800322e:	e006      	b.n	800323e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2220      	movs	r2, #32
 8003234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003238:	2300      	movs	r3, #0
 800323a:	e000      	b.n	800323e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800323c:	2302      	movs	r3, #2
  }
}
 800323e:	4618      	mov	r0, r3
 8003240:	3720      	adds	r7, #32
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}

08003246 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003246:	b580      	push	{r7, lr}
 8003248:	b08a      	sub	sp, #40	; 0x28
 800324a:	af02      	add	r7, sp, #8
 800324c:	60f8      	str	r0, [r7, #12]
 800324e:	60b9      	str	r1, [r7, #8]
 8003250:	603b      	str	r3, [r7, #0]
 8003252:	4613      	mov	r3, r2
 8003254:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003256:	2300      	movs	r3, #0
 8003258:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003260:	b2db      	uxtb	r3, r3
 8003262:	2b20      	cmp	r3, #32
 8003264:	f040 808c 	bne.w	8003380 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d002      	beq.n	8003274 <HAL_UART_Receive+0x2e>
 800326e:	88fb      	ldrh	r3, [r7, #6]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d101      	bne.n	8003278 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e084      	b.n	8003382 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800327e:	2b01      	cmp	r3, #1
 8003280:	d101      	bne.n	8003286 <HAL_UART_Receive+0x40>
 8003282:	2302      	movs	r3, #2
 8003284:	e07d      	b.n	8003382 <HAL_UART_Receive+0x13c>
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2201      	movs	r2, #1
 800328a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2200      	movs	r2, #0
 8003292:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2222      	movs	r2, #34	; 0x22
 8003298:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2200      	movs	r2, #0
 80032a0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80032a2:	f7fe fa69 	bl	8001778 <HAL_GetTick>
 80032a6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	88fa      	ldrh	r2, [r7, #6]
 80032ac:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	88fa      	ldrh	r2, [r7, #6]
 80032b2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032bc:	d108      	bne.n	80032d0 <HAL_UART_Receive+0x8a>
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	691b      	ldr	r3, [r3, #16]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d104      	bne.n	80032d0 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80032c6:	2300      	movs	r3, #0
 80032c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	61bb      	str	r3, [r7, #24]
 80032ce:	e003      	b.n	80032d8 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80032d4:	2300      	movs	r3, #0
 80032d6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2200      	movs	r2, #0
 80032dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80032e0:	e043      	b.n	800336a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	9300      	str	r3, [sp, #0]
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	2200      	movs	r2, #0
 80032ea:	2120      	movs	r1, #32
 80032ec:	68f8      	ldr	r0, [r7, #12]
 80032ee:	f000 f84c 	bl	800338a <UART_WaitOnFlagUntilTimeout>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d001      	beq.n	80032fc <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	e042      	b.n	8003382 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d10c      	bne.n	800331c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	b29b      	uxth	r3, r3
 800330a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800330e:	b29a      	uxth	r2, r3
 8003310:	69bb      	ldr	r3, [r7, #24]
 8003312:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003314:	69bb      	ldr	r3, [r7, #24]
 8003316:	3302      	adds	r3, #2
 8003318:	61bb      	str	r3, [r7, #24]
 800331a:	e01f      	b.n	800335c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003324:	d007      	beq.n	8003336 <HAL_UART_Receive+0xf0>
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d10a      	bne.n	8003344 <HAL_UART_Receive+0xfe>
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	691b      	ldr	r3, [r3, #16]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d106      	bne.n	8003344 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	b2da      	uxtb	r2, r3
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	701a      	strb	r2, [r3, #0]
 8003342:	e008      	b.n	8003356 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	b2db      	uxtb	r3, r3
 800334c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003350:	b2da      	uxtb	r2, r3
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	3301      	adds	r3, #1
 800335a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003360:	b29b      	uxth	r3, r3
 8003362:	3b01      	subs	r3, #1
 8003364:	b29a      	uxth	r2, r3
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800336e:	b29b      	uxth	r3, r3
 8003370:	2b00      	cmp	r3, #0
 8003372:	d1b6      	bne.n	80032e2 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2220      	movs	r2, #32
 8003378:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800337c:	2300      	movs	r3, #0
 800337e:	e000      	b.n	8003382 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003380:	2302      	movs	r3, #2
  }
}
 8003382:	4618      	mov	r0, r3
 8003384:	3720      	adds	r7, #32
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}

0800338a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800338a:	b580      	push	{r7, lr}
 800338c:	b090      	sub	sp, #64	; 0x40
 800338e:	af00      	add	r7, sp, #0
 8003390:	60f8      	str	r0, [r7, #12]
 8003392:	60b9      	str	r1, [r7, #8]
 8003394:	603b      	str	r3, [r7, #0]
 8003396:	4613      	mov	r3, r2
 8003398:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800339a:	e050      	b.n	800343e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800339c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800339e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033a2:	d04c      	beq.n	800343e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80033a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d007      	beq.n	80033ba <UART_WaitOnFlagUntilTimeout+0x30>
 80033aa:	f7fe f9e5 	bl	8001778 <HAL_GetTick>
 80033ae:	4602      	mov	r2, r0
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d241      	bcs.n	800343e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	330c      	adds	r3, #12
 80033c0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033c4:	e853 3f00 	ldrex	r3, [r3]
 80033c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80033ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033cc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80033d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	330c      	adds	r3, #12
 80033d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80033da:	637a      	str	r2, [r7, #52]	; 0x34
 80033dc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80033e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80033e2:	e841 2300 	strex	r3, r2, [r1]
 80033e6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80033e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d1e5      	bne.n	80033ba <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	3314      	adds	r3, #20
 80033f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	e853 3f00 	ldrex	r3, [r3]
 80033fc:	613b      	str	r3, [r7, #16]
   return(result);
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	f023 0301 	bic.w	r3, r3, #1
 8003404:	63bb      	str	r3, [r7, #56]	; 0x38
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	3314      	adds	r3, #20
 800340c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800340e:	623a      	str	r2, [r7, #32]
 8003410:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003412:	69f9      	ldr	r1, [r7, #28]
 8003414:	6a3a      	ldr	r2, [r7, #32]
 8003416:	e841 2300 	strex	r3, r2, [r1]
 800341a:	61bb      	str	r3, [r7, #24]
   return(result);
 800341c:	69bb      	ldr	r3, [r7, #24]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d1e5      	bne.n	80033ee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2220      	movs	r2, #32
 8003426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2220      	movs	r2, #32
 800342e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2200      	movs	r2, #0
 8003436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e00f      	b.n	800345e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	4013      	ands	r3, r2
 8003448:	68ba      	ldr	r2, [r7, #8]
 800344a:	429a      	cmp	r2, r3
 800344c:	bf0c      	ite	eq
 800344e:	2301      	moveq	r3, #1
 8003450:	2300      	movne	r3, #0
 8003452:	b2db      	uxtb	r3, r3
 8003454:	461a      	mov	r2, r3
 8003456:	79fb      	ldrb	r3, [r7, #7]
 8003458:	429a      	cmp	r2, r3
 800345a:	d09f      	beq.n	800339c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800345c:	2300      	movs	r3, #0
}
 800345e:	4618      	mov	r0, r3
 8003460:	3740      	adds	r7, #64	; 0x40
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
	...

08003468 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003468:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800346c:	b0c0      	sub	sp, #256	; 0x100
 800346e:	af00      	add	r7, sp, #0
 8003470:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	691b      	ldr	r3, [r3, #16]
 800347c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003484:	68d9      	ldr	r1, [r3, #12]
 8003486:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	ea40 0301 	orr.w	r3, r0, r1
 8003490:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003492:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003496:	689a      	ldr	r2, [r3, #8]
 8003498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800349c:	691b      	ldr	r3, [r3, #16]
 800349e:	431a      	orrs	r2, r3
 80034a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034a4:	695b      	ldr	r3, [r3, #20]
 80034a6:	431a      	orrs	r2, r3
 80034a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034ac:	69db      	ldr	r3, [r3, #28]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80034b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80034c0:	f021 010c 	bic.w	r1, r1, #12
 80034c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80034ce:	430b      	orrs	r3, r1
 80034d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80034d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	695b      	ldr	r3, [r3, #20]
 80034da:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80034de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034e2:	6999      	ldr	r1, [r3, #24]
 80034e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	ea40 0301 	orr.w	r3, r0, r1
 80034ee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80034f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	4b8f      	ldr	r3, [pc, #572]	; (8003734 <UART_SetConfig+0x2cc>)
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d005      	beq.n	8003508 <UART_SetConfig+0xa0>
 80034fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	4b8d      	ldr	r3, [pc, #564]	; (8003738 <UART_SetConfig+0x2d0>)
 8003504:	429a      	cmp	r2, r3
 8003506:	d104      	bne.n	8003512 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003508:	f7ff f8dc 	bl	80026c4 <HAL_RCC_GetPCLK2Freq>
 800350c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003510:	e003      	b.n	800351a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003512:	f7ff f8c3 	bl	800269c <HAL_RCC_GetPCLK1Freq>
 8003516:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800351a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800351e:	69db      	ldr	r3, [r3, #28]
 8003520:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003524:	f040 810c 	bne.w	8003740 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003528:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800352c:	2200      	movs	r2, #0
 800352e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003532:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003536:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800353a:	4622      	mov	r2, r4
 800353c:	462b      	mov	r3, r5
 800353e:	1891      	adds	r1, r2, r2
 8003540:	65b9      	str	r1, [r7, #88]	; 0x58
 8003542:	415b      	adcs	r3, r3
 8003544:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003546:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800354a:	4621      	mov	r1, r4
 800354c:	eb12 0801 	adds.w	r8, r2, r1
 8003550:	4629      	mov	r1, r5
 8003552:	eb43 0901 	adc.w	r9, r3, r1
 8003556:	f04f 0200 	mov.w	r2, #0
 800355a:	f04f 0300 	mov.w	r3, #0
 800355e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003562:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003566:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800356a:	4690      	mov	r8, r2
 800356c:	4699      	mov	r9, r3
 800356e:	4623      	mov	r3, r4
 8003570:	eb18 0303 	adds.w	r3, r8, r3
 8003574:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003578:	462b      	mov	r3, r5
 800357a:	eb49 0303 	adc.w	r3, r9, r3
 800357e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003582:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800358e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003592:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003596:	460b      	mov	r3, r1
 8003598:	18db      	adds	r3, r3, r3
 800359a:	653b      	str	r3, [r7, #80]	; 0x50
 800359c:	4613      	mov	r3, r2
 800359e:	eb42 0303 	adc.w	r3, r2, r3
 80035a2:	657b      	str	r3, [r7, #84]	; 0x54
 80035a4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80035a8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80035ac:	f7fc fe2a 	bl	8000204 <__aeabi_uldivmod>
 80035b0:	4602      	mov	r2, r0
 80035b2:	460b      	mov	r3, r1
 80035b4:	4b61      	ldr	r3, [pc, #388]	; (800373c <UART_SetConfig+0x2d4>)
 80035b6:	fba3 2302 	umull	r2, r3, r3, r2
 80035ba:	095b      	lsrs	r3, r3, #5
 80035bc:	011c      	lsls	r4, r3, #4
 80035be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035c2:	2200      	movs	r2, #0
 80035c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80035c8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80035cc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80035d0:	4642      	mov	r2, r8
 80035d2:	464b      	mov	r3, r9
 80035d4:	1891      	adds	r1, r2, r2
 80035d6:	64b9      	str	r1, [r7, #72]	; 0x48
 80035d8:	415b      	adcs	r3, r3
 80035da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035dc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80035e0:	4641      	mov	r1, r8
 80035e2:	eb12 0a01 	adds.w	sl, r2, r1
 80035e6:	4649      	mov	r1, r9
 80035e8:	eb43 0b01 	adc.w	fp, r3, r1
 80035ec:	f04f 0200 	mov.w	r2, #0
 80035f0:	f04f 0300 	mov.w	r3, #0
 80035f4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80035f8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80035fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003600:	4692      	mov	sl, r2
 8003602:	469b      	mov	fp, r3
 8003604:	4643      	mov	r3, r8
 8003606:	eb1a 0303 	adds.w	r3, sl, r3
 800360a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800360e:	464b      	mov	r3, r9
 8003610:	eb4b 0303 	adc.w	r3, fp, r3
 8003614:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003624:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003628:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800362c:	460b      	mov	r3, r1
 800362e:	18db      	adds	r3, r3, r3
 8003630:	643b      	str	r3, [r7, #64]	; 0x40
 8003632:	4613      	mov	r3, r2
 8003634:	eb42 0303 	adc.w	r3, r2, r3
 8003638:	647b      	str	r3, [r7, #68]	; 0x44
 800363a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800363e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003642:	f7fc fddf 	bl	8000204 <__aeabi_uldivmod>
 8003646:	4602      	mov	r2, r0
 8003648:	460b      	mov	r3, r1
 800364a:	4611      	mov	r1, r2
 800364c:	4b3b      	ldr	r3, [pc, #236]	; (800373c <UART_SetConfig+0x2d4>)
 800364e:	fba3 2301 	umull	r2, r3, r3, r1
 8003652:	095b      	lsrs	r3, r3, #5
 8003654:	2264      	movs	r2, #100	; 0x64
 8003656:	fb02 f303 	mul.w	r3, r2, r3
 800365a:	1acb      	subs	r3, r1, r3
 800365c:	00db      	lsls	r3, r3, #3
 800365e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003662:	4b36      	ldr	r3, [pc, #216]	; (800373c <UART_SetConfig+0x2d4>)
 8003664:	fba3 2302 	umull	r2, r3, r3, r2
 8003668:	095b      	lsrs	r3, r3, #5
 800366a:	005b      	lsls	r3, r3, #1
 800366c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003670:	441c      	add	r4, r3
 8003672:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003676:	2200      	movs	r2, #0
 8003678:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800367c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003680:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003684:	4642      	mov	r2, r8
 8003686:	464b      	mov	r3, r9
 8003688:	1891      	adds	r1, r2, r2
 800368a:	63b9      	str	r1, [r7, #56]	; 0x38
 800368c:	415b      	adcs	r3, r3
 800368e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003690:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003694:	4641      	mov	r1, r8
 8003696:	1851      	adds	r1, r2, r1
 8003698:	6339      	str	r1, [r7, #48]	; 0x30
 800369a:	4649      	mov	r1, r9
 800369c:	414b      	adcs	r3, r1
 800369e:	637b      	str	r3, [r7, #52]	; 0x34
 80036a0:	f04f 0200 	mov.w	r2, #0
 80036a4:	f04f 0300 	mov.w	r3, #0
 80036a8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80036ac:	4659      	mov	r1, fp
 80036ae:	00cb      	lsls	r3, r1, #3
 80036b0:	4651      	mov	r1, sl
 80036b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80036b6:	4651      	mov	r1, sl
 80036b8:	00ca      	lsls	r2, r1, #3
 80036ba:	4610      	mov	r0, r2
 80036bc:	4619      	mov	r1, r3
 80036be:	4603      	mov	r3, r0
 80036c0:	4642      	mov	r2, r8
 80036c2:	189b      	adds	r3, r3, r2
 80036c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80036c8:	464b      	mov	r3, r9
 80036ca:	460a      	mov	r2, r1
 80036cc:	eb42 0303 	adc.w	r3, r2, r3
 80036d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80036d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80036e0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80036e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80036e8:	460b      	mov	r3, r1
 80036ea:	18db      	adds	r3, r3, r3
 80036ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80036ee:	4613      	mov	r3, r2
 80036f0:	eb42 0303 	adc.w	r3, r2, r3
 80036f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80036fa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80036fe:	f7fc fd81 	bl	8000204 <__aeabi_uldivmod>
 8003702:	4602      	mov	r2, r0
 8003704:	460b      	mov	r3, r1
 8003706:	4b0d      	ldr	r3, [pc, #52]	; (800373c <UART_SetConfig+0x2d4>)
 8003708:	fba3 1302 	umull	r1, r3, r3, r2
 800370c:	095b      	lsrs	r3, r3, #5
 800370e:	2164      	movs	r1, #100	; 0x64
 8003710:	fb01 f303 	mul.w	r3, r1, r3
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	00db      	lsls	r3, r3, #3
 8003718:	3332      	adds	r3, #50	; 0x32
 800371a:	4a08      	ldr	r2, [pc, #32]	; (800373c <UART_SetConfig+0x2d4>)
 800371c:	fba2 2303 	umull	r2, r3, r2, r3
 8003720:	095b      	lsrs	r3, r3, #5
 8003722:	f003 0207 	and.w	r2, r3, #7
 8003726:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4422      	add	r2, r4
 800372e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003730:	e105      	b.n	800393e <UART_SetConfig+0x4d6>
 8003732:	bf00      	nop
 8003734:	40011000 	.word	0x40011000
 8003738:	40011400 	.word	0x40011400
 800373c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003740:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003744:	2200      	movs	r2, #0
 8003746:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800374a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800374e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003752:	4642      	mov	r2, r8
 8003754:	464b      	mov	r3, r9
 8003756:	1891      	adds	r1, r2, r2
 8003758:	6239      	str	r1, [r7, #32]
 800375a:	415b      	adcs	r3, r3
 800375c:	627b      	str	r3, [r7, #36]	; 0x24
 800375e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003762:	4641      	mov	r1, r8
 8003764:	1854      	adds	r4, r2, r1
 8003766:	4649      	mov	r1, r9
 8003768:	eb43 0501 	adc.w	r5, r3, r1
 800376c:	f04f 0200 	mov.w	r2, #0
 8003770:	f04f 0300 	mov.w	r3, #0
 8003774:	00eb      	lsls	r3, r5, #3
 8003776:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800377a:	00e2      	lsls	r2, r4, #3
 800377c:	4614      	mov	r4, r2
 800377e:	461d      	mov	r5, r3
 8003780:	4643      	mov	r3, r8
 8003782:	18e3      	adds	r3, r4, r3
 8003784:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003788:	464b      	mov	r3, r9
 800378a:	eb45 0303 	adc.w	r3, r5, r3
 800378e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003792:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800379e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80037a2:	f04f 0200 	mov.w	r2, #0
 80037a6:	f04f 0300 	mov.w	r3, #0
 80037aa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80037ae:	4629      	mov	r1, r5
 80037b0:	008b      	lsls	r3, r1, #2
 80037b2:	4621      	mov	r1, r4
 80037b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037b8:	4621      	mov	r1, r4
 80037ba:	008a      	lsls	r2, r1, #2
 80037bc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80037c0:	f7fc fd20 	bl	8000204 <__aeabi_uldivmod>
 80037c4:	4602      	mov	r2, r0
 80037c6:	460b      	mov	r3, r1
 80037c8:	4b60      	ldr	r3, [pc, #384]	; (800394c <UART_SetConfig+0x4e4>)
 80037ca:	fba3 2302 	umull	r2, r3, r3, r2
 80037ce:	095b      	lsrs	r3, r3, #5
 80037d0:	011c      	lsls	r4, r3, #4
 80037d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037d6:	2200      	movs	r2, #0
 80037d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80037dc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80037e0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80037e4:	4642      	mov	r2, r8
 80037e6:	464b      	mov	r3, r9
 80037e8:	1891      	adds	r1, r2, r2
 80037ea:	61b9      	str	r1, [r7, #24]
 80037ec:	415b      	adcs	r3, r3
 80037ee:	61fb      	str	r3, [r7, #28]
 80037f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037f4:	4641      	mov	r1, r8
 80037f6:	1851      	adds	r1, r2, r1
 80037f8:	6139      	str	r1, [r7, #16]
 80037fa:	4649      	mov	r1, r9
 80037fc:	414b      	adcs	r3, r1
 80037fe:	617b      	str	r3, [r7, #20]
 8003800:	f04f 0200 	mov.w	r2, #0
 8003804:	f04f 0300 	mov.w	r3, #0
 8003808:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800380c:	4659      	mov	r1, fp
 800380e:	00cb      	lsls	r3, r1, #3
 8003810:	4651      	mov	r1, sl
 8003812:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003816:	4651      	mov	r1, sl
 8003818:	00ca      	lsls	r2, r1, #3
 800381a:	4610      	mov	r0, r2
 800381c:	4619      	mov	r1, r3
 800381e:	4603      	mov	r3, r0
 8003820:	4642      	mov	r2, r8
 8003822:	189b      	adds	r3, r3, r2
 8003824:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003828:	464b      	mov	r3, r9
 800382a:	460a      	mov	r2, r1
 800382c:	eb42 0303 	adc.w	r3, r2, r3
 8003830:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	67bb      	str	r3, [r7, #120]	; 0x78
 800383e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003840:	f04f 0200 	mov.w	r2, #0
 8003844:	f04f 0300 	mov.w	r3, #0
 8003848:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800384c:	4649      	mov	r1, r9
 800384e:	008b      	lsls	r3, r1, #2
 8003850:	4641      	mov	r1, r8
 8003852:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003856:	4641      	mov	r1, r8
 8003858:	008a      	lsls	r2, r1, #2
 800385a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800385e:	f7fc fcd1 	bl	8000204 <__aeabi_uldivmod>
 8003862:	4602      	mov	r2, r0
 8003864:	460b      	mov	r3, r1
 8003866:	4b39      	ldr	r3, [pc, #228]	; (800394c <UART_SetConfig+0x4e4>)
 8003868:	fba3 1302 	umull	r1, r3, r3, r2
 800386c:	095b      	lsrs	r3, r3, #5
 800386e:	2164      	movs	r1, #100	; 0x64
 8003870:	fb01 f303 	mul.w	r3, r1, r3
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	011b      	lsls	r3, r3, #4
 8003878:	3332      	adds	r3, #50	; 0x32
 800387a:	4a34      	ldr	r2, [pc, #208]	; (800394c <UART_SetConfig+0x4e4>)
 800387c:	fba2 2303 	umull	r2, r3, r2, r3
 8003880:	095b      	lsrs	r3, r3, #5
 8003882:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003886:	441c      	add	r4, r3
 8003888:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800388c:	2200      	movs	r2, #0
 800388e:	673b      	str	r3, [r7, #112]	; 0x70
 8003890:	677a      	str	r2, [r7, #116]	; 0x74
 8003892:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003896:	4642      	mov	r2, r8
 8003898:	464b      	mov	r3, r9
 800389a:	1891      	adds	r1, r2, r2
 800389c:	60b9      	str	r1, [r7, #8]
 800389e:	415b      	adcs	r3, r3
 80038a0:	60fb      	str	r3, [r7, #12]
 80038a2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80038a6:	4641      	mov	r1, r8
 80038a8:	1851      	adds	r1, r2, r1
 80038aa:	6039      	str	r1, [r7, #0]
 80038ac:	4649      	mov	r1, r9
 80038ae:	414b      	adcs	r3, r1
 80038b0:	607b      	str	r3, [r7, #4]
 80038b2:	f04f 0200 	mov.w	r2, #0
 80038b6:	f04f 0300 	mov.w	r3, #0
 80038ba:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80038be:	4659      	mov	r1, fp
 80038c0:	00cb      	lsls	r3, r1, #3
 80038c2:	4651      	mov	r1, sl
 80038c4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038c8:	4651      	mov	r1, sl
 80038ca:	00ca      	lsls	r2, r1, #3
 80038cc:	4610      	mov	r0, r2
 80038ce:	4619      	mov	r1, r3
 80038d0:	4603      	mov	r3, r0
 80038d2:	4642      	mov	r2, r8
 80038d4:	189b      	adds	r3, r3, r2
 80038d6:	66bb      	str	r3, [r7, #104]	; 0x68
 80038d8:	464b      	mov	r3, r9
 80038da:	460a      	mov	r2, r1
 80038dc:	eb42 0303 	adc.w	r3, r2, r3
 80038e0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80038e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	663b      	str	r3, [r7, #96]	; 0x60
 80038ec:	667a      	str	r2, [r7, #100]	; 0x64
 80038ee:	f04f 0200 	mov.w	r2, #0
 80038f2:	f04f 0300 	mov.w	r3, #0
 80038f6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80038fa:	4649      	mov	r1, r9
 80038fc:	008b      	lsls	r3, r1, #2
 80038fe:	4641      	mov	r1, r8
 8003900:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003904:	4641      	mov	r1, r8
 8003906:	008a      	lsls	r2, r1, #2
 8003908:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800390c:	f7fc fc7a 	bl	8000204 <__aeabi_uldivmod>
 8003910:	4602      	mov	r2, r0
 8003912:	460b      	mov	r3, r1
 8003914:	4b0d      	ldr	r3, [pc, #52]	; (800394c <UART_SetConfig+0x4e4>)
 8003916:	fba3 1302 	umull	r1, r3, r3, r2
 800391a:	095b      	lsrs	r3, r3, #5
 800391c:	2164      	movs	r1, #100	; 0x64
 800391e:	fb01 f303 	mul.w	r3, r1, r3
 8003922:	1ad3      	subs	r3, r2, r3
 8003924:	011b      	lsls	r3, r3, #4
 8003926:	3332      	adds	r3, #50	; 0x32
 8003928:	4a08      	ldr	r2, [pc, #32]	; (800394c <UART_SetConfig+0x4e4>)
 800392a:	fba2 2303 	umull	r2, r3, r2, r3
 800392e:	095b      	lsrs	r3, r3, #5
 8003930:	f003 020f 	and.w	r2, r3, #15
 8003934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4422      	add	r2, r4
 800393c:	609a      	str	r2, [r3, #8]
}
 800393e:	bf00      	nop
 8003940:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003944:	46bd      	mov	sp, r7
 8003946:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800394a:	bf00      	nop
 800394c:	51eb851f 	.word	0x51eb851f

08003950 <__libc_init_array>:
 8003950:	b570      	push	{r4, r5, r6, lr}
 8003952:	4d0d      	ldr	r5, [pc, #52]	; (8003988 <__libc_init_array+0x38>)
 8003954:	4c0d      	ldr	r4, [pc, #52]	; (800398c <__libc_init_array+0x3c>)
 8003956:	1b64      	subs	r4, r4, r5
 8003958:	10a4      	asrs	r4, r4, #2
 800395a:	2600      	movs	r6, #0
 800395c:	42a6      	cmp	r6, r4
 800395e:	d109      	bne.n	8003974 <__libc_init_array+0x24>
 8003960:	4d0b      	ldr	r5, [pc, #44]	; (8003990 <__libc_init_array+0x40>)
 8003962:	4c0c      	ldr	r4, [pc, #48]	; (8003994 <__libc_init_array+0x44>)
 8003964:	f000 f820 	bl	80039a8 <_init>
 8003968:	1b64      	subs	r4, r4, r5
 800396a:	10a4      	asrs	r4, r4, #2
 800396c:	2600      	movs	r6, #0
 800396e:	42a6      	cmp	r6, r4
 8003970:	d105      	bne.n	800397e <__libc_init_array+0x2e>
 8003972:	bd70      	pop	{r4, r5, r6, pc}
 8003974:	f855 3b04 	ldr.w	r3, [r5], #4
 8003978:	4798      	blx	r3
 800397a:	3601      	adds	r6, #1
 800397c:	e7ee      	b.n	800395c <__libc_init_array+0xc>
 800397e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003982:	4798      	blx	r3
 8003984:	3601      	adds	r6, #1
 8003986:	e7f2      	b.n	800396e <__libc_init_array+0x1e>
 8003988:	08003efc 	.word	0x08003efc
 800398c:	08003efc 	.word	0x08003efc
 8003990:	08003efc 	.word	0x08003efc
 8003994:	08003f00 	.word	0x08003f00

08003998 <memset>:
 8003998:	4402      	add	r2, r0
 800399a:	4603      	mov	r3, r0
 800399c:	4293      	cmp	r3, r2
 800399e:	d100      	bne.n	80039a2 <memset+0xa>
 80039a0:	4770      	bx	lr
 80039a2:	f803 1b01 	strb.w	r1, [r3], #1
 80039a6:	e7f9      	b.n	800399c <memset+0x4>

080039a8 <_init>:
 80039a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039aa:	bf00      	nop
 80039ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039ae:	bc08      	pop	{r3}
 80039b0:	469e      	mov	lr, r3
 80039b2:	4770      	bx	lr

080039b4 <_fini>:
 80039b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039b6:	bf00      	nop
 80039b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039ba:	bc08      	pop	{r3}
 80039bc:	469e      	mov	lr, r3
 80039be:	4770      	bx	lr
